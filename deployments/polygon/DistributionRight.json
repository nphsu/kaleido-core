{
  "address": "0xB6A186Cc92253518f5f4a4Dafc1f6Ac444388514",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "nameRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributionRightAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nameRegistryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "postOwnerPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reservedRightAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferByAllowedContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1832c577d43e92aa2773728d1a4a0d8fd02b6e227f1efd36c0cd5eac2877497b",
  "receipt": {
    "to": null,
    "from": "0x09FA173BAbFF3787c14192D6c4dFb4Ed4cfF0bFF",
    "contractAddress": "0xB6A186Cc92253518f5f4a4Dafc1f6Ac444388514",
    "transactionIndex": 24,
    "gasUsed": "2102585",
    "logsBloom": "0x
    "blockHash": "0x0feb1bbe62252977d92ad53b5cccb5dd89d713eca78323992c1600f24d3fa7ff",
    "transactionHash": "0x1832c577d43e92aa2773728d1a4a0d8fd02b6e227f1efd36c0cd5eac2877497b",
    "logs": [
      {
        "transactionIndex": 24,
        "blockNumber": 19083722,
        "transactionHash": "0x1832c577d43e92aa2773728d1a4a0d8fd02b6e227f1efd36c0cd5eac2877497b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000009fa173babff3787c14192d6c4dfb4ed4cff0bff",
          "0x000000000000000000000000b79fad4ca981472442f53d16365fdf0305ffd8e9"
        ],
        "data": "0x000000000000000000000000000000000000000000000000009565cc60b388000000000000000000000000000000000000000000000000004d655606079768340000000000000000000000000000000000000000000043cd4b707cc515f2991e0000000000000000000000000000000000000000000000004ccff039a6e3e0340000000000000000000000000000000000000000000043cd4c05e29176a6211e",
        "logIndex": 143,
        "blockHash": "0x0feb1bbe62252977d92ad53b5cccb5dd89d713eca78323992c1600f24d3fa7ff"
      }
    ],
    "blockNumber": 19083722,
    "cumulativeGasUsed": "6727866",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "DistributionRight",
    "AD_RIGHT",
    "https://arweave.net/",
    "0x87b74aC01B028558A8Af2409e59C709f409f2e80"
  ],
  "solcInputHash": "d8269bf08e62262dc92297179008e96b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"nameRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionRightAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postOwnerPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservedRightAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferByAllowedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Shumpei Koike - <shumpei.koike@bridges.inc>\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns the NFT.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"constructor\":{\"details\":\"Initializes NFT\",\"params\":{\"baseURI_\":\"string of the base URI\",\"nameRegistry\":\"address of NameRegistry\",\"name_\":\"string of the token name\",\"symbol_\":\"string of the token symbol\"}},\"distributionRightAddress()\":{\"details\":\"Gets the address of DistributionRight.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint(address,uint256,string)\":{\"details\":\"Mints a new NFT.\",\"params\":{\"account\":\"address of the token owner\",\"tokenId\":\"uint256 of the token ID\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"nameRegistryAddress()\":{\"details\":\"Gets the address of NameRegistry\"},\"owner()\":{\"details\":\"Gets the owner address.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"reservedRightAddress()\":{\"details\":\"Gets the address of ReservedRight.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferByAllowedContract(address,address,uint256)\":{\"details\":\"Transfers the NFT.\",\"params\":{\"from\":\"address of the current owner\",\"to\":\"address of the next owner\",\"tokenId\":\"uint256 of the token ID\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"vaultAddress()\":{\"details\":\"Gets the address of Vault.\"}},\"title\":\"DistributionRight - represents advertising distribution rights.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/DistributionRight.sol\":\"DistributionRight\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"contracts/accessors/NameAccessor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"./NameRegistry.sol\\\";\\n\\n/// @title NameAccessor - manages the endpoints.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ncontract NameAccessor {\\n\\tNameRegistry internal _nameRegistry;\\n\\n\\t/// @dev Sets the address of NameRegistry.\\n\\t/// @param nameRegistry address of the NameRegistry\\n\\tconstructor(address nameRegistry) {\\n\\t\\t_nameRegistry = NameRegistry(nameRegistry);\\n\\t}\\n\\n\\t/// @dev Prevents calling a function from anyone except the accepted contract.\\n\\tmodifier onlyAllowedContract() {\\n\\t\\trequire(_nameRegistry.allowedContracts(msg.sender), \\\"AR201\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Throws if called by any account other than the owner.\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(owner() == msg.sender, \\\"AR202\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Gets the address of NameRegistry\\n\\tfunction nameRegistryAddress() public view returns (address) {\\n\\t\\treturn address(_nameRegistry);\\n\\t}\\n\\n\\t/// @dev Gets the address of DistributionRight.\\n\\tfunction distributionRightAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"DistributionRight\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of ReservedRight.\\n\\tfunction reservedRightAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"ReservedRight\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of Vault.\\n\\tfunction vaultAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"Vault\\\")));\\n\\t}\\n\\n\\tfunction postOwnerPoolAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"PostOwnerPool\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the owner address.\\n\\tfunction owner() public view returns (address) {\\n\\t\\treturn _nameRegistry.owner();\\n\\t}\\n}\\n\",\"keccak256\":\"0x77149aa5f91f5a90cc7d8eb7f0829486bf5a5ed795a9ba2049193439e0a53de5\",\"license\":\"UNLICENSED\"},\"contracts/accessors/NameRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title NameRegistry - saves a set of addresses.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ncontract NameRegistry is Ownable {\\n\\tusing Address for address;\\n\\n\\tmapping(address => bool) public allowedContracts;\\n\\tmapping(bytes32 => address) private _addressStorage;\\n\\n\\tconstructor() Ownable() {}\\n\\n\\t/// @dev Sets the address associated with the key name.\\n\\t///      If the address is the contract, not an EOA, it is\\n\\t///      saved as the allowed contract list.\\n\\t/// @param key bytes32 of the key\\n\\t/// @param value address of the value\\n\\tfunction set(bytes32 key, address value) public onlyOwner {\\n\\t\\t_addressStorage[key] = value;\\n\\t\\tif (value.isContract()) {\\n\\t\\t\\tallowedContracts[value] = true;\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev Gets the address associated with the key name.\\n\\t/// @param key bytes32 of the key\\n\\tfunction get(bytes32 key) public view returns (address) {\\n\\t\\treturn _addressStorage[key];\\n\\t}\\n}\\n\",\"keccak256\":\"0x722d516b65ac61532eeb206e7f0dc0c09c608f17e75eada46807d2d98a0bba15\",\"license\":\"UNLICENSED\"},\"contracts/accessors/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n\\taddress internal _owner;\\n\\n\\tevent OwnershipTransferred(\\n\\t\\taddress indexed previousOwner,\\n\\t\\taddress indexed newOwner\\n\\t);\\n\\n\\t/**\\n\\t * @dev Initializes the contract setting the deployer as the initial owner.\\n\\t */\\n\\tconstructor() {\\n\\t\\t_setOwner(_msgSender());\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address of the current owner.\\n\\t */\\n\\tfunction owner() public view virtual returns (address) {\\n\\t\\treturn _owner;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Throws if called by any account other than the owner.\\n\\t */\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Leaves the contract without owner. It will not be possible to call\\n\\t * `onlyOwner` functions anymore. Can only be called by the current owner.\\n\\t *\\n\\t * NOTE: Renouncing ownership will leave the contract without an owner,\\n\\t * thereby removing any functionality that is only available to the owner.\\n\\t */\\n\\tfunction renounceOwnership() public virtual onlyOwner {\\n\\t\\t_setOwner(address(0));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n\\t * Can only be called by the current owner.\\n\\t */\\n\\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\\n\\t\\trequire(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n\\t\\t_setOwner(newOwner);\\n\\t}\\n\\n\\tfunction _setOwner(address newOwner) private {\\n\\t\\taddress oldOwner = _owner;\\n\\t\\t_owner = newOwner;\\n\\t\\temit OwnershipTransferred(oldOwner, newOwner);\\n\\t}\\n}\\n\",\"keccak256\":\"0xe2505d2c93a1f60b3b74357557c24bc6ec10d36870165ff8454d04adf5e368cf\",\"license\":\"MIT\"},\"contracts/base/PostOwnerPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\nimport \\\"../accessors/NameAccessor.sol\\\";\\n\\n/// @title PostOwnerPool - pool of post owners.\\n/// @author Yushi Masui - <yushi.masui@bridges.inc>\\ncontract PostOwnerPool is NameAccessor {\\n\\tconstructor(address nameRegistry) NameAccessor(nameRegistry) {}\\n\\n\\tmapping(uint256 => address) public owners;\\n\\n\\tfunction addPost(uint256 postId, address owner) public onlyAllowedContract {\\n\\t\\towners[postId] = owner;\\n\\t}\\n\\n\\tfunction ownerOf(uint256 postId) public view returns (address) {\\n\\t\\treturn owners[postId];\\n\\t}\\n}\\n\",\"keccak256\":\"0x59072ebca419e61654995a4e220c08ed694d02526be7ea9e5bc81a309d4fbe72\",\"license\":\"UNLICENSED\"},\"contracts/base/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../accessors/Ownable.sol\\\";\\nimport \\\"../common/EtherPaymentFallback.sol\\\";\\n\\ncontract Vault is Ownable, EtherPaymentFallback {\\n\\tevent Withdraw(address sender, uint256 value);\\n\\n\\tfunction balance() public view returns (uint256) {\\n\\t\\treturn address(this).balance;\\n\\t}\\n\\n\\tfunction withdraw(uint256 amount) public onlyOwner {\\n\\t\\trequire(amount <= balance(), \\\"AD109\\\");\\n\\t\\tpayable(msg.sender).transfer(amount);\\n\\t\\temit Withdraw(msg.sender, amount);\\n\\t}\\n}\\n\",\"keccak256\":\"0x5696be4b7d8ed727085d9ccad2f64eff5c019d4b3fcb28d5139df7c3b8909c40\",\"license\":\"UNLICENSED\"},\"contracts/common/EtherPaymentFallback.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\n/// @title EtherPaymentFallback - A contract that has a fallback to accept ether payments.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ncontract EtherPaymentFallback {\\n\\tevent Received(address, uint256);\\n\\n\\t/// @dev Fallback function accepts Ether transactions.\\n\\treceive() external payable {\\n\\t\\temit Received(msg.sender, msg.value);\\n\\t}\\n}\\n\",\"keccak256\":\"0xba482ac0c951246d9d2ec283c87b59d2a61b2fb05b9bb1b242415de5802ebcbf\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n\\t/**\\n\\t * @dev Returns true if this contract implements the interface defined by\\n\\t * `interfaceId`. See the corresponding\\n\\t * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n\\t * to learn more about how these ids are created.\\n\\t *\\n\\t * This function call must use less than 30 000 gas.\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x47fb51ba47a6f1dd885afda05a6d11d7f6bb24d594dbfaa4411c5185c202265e\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n\\t/**\\n\\t * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n\\t */\\n\\tevent Transfer(\\n\\t\\taddress indexed from,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 indexed tokenId\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n\\t */\\n\\tevent Approval(\\n\\t\\taddress indexed owner,\\n\\t\\taddress indexed approved,\\n\\t\\tuint256 indexed tokenId\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n\\t */\\n\\tevent ApprovalForAll(\\n\\t\\taddress indexed owner,\\n\\t\\taddress indexed operator,\\n\\t\\tbool approved\\n\\t);\\n\\n\\t/**\\n\\t * @dev Returns the number of tokens in ``owner``'s account.\\n\\t */\\n\\tfunction balanceOf(address owner) external view returns (uint256 balance);\\n\\n\\t/**\\n\\t * @dev Returns the owner of the `tokenId` token.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must exist.\\n\\t */\\n\\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n\\t/**\\n\\t * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n\\t * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `from` cannot be the zero address.\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must exist and be owned by `from`.\\n\\t * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Transfers `tokenId` token from `from` to `to`.\\n\\t *\\n\\t * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `from` cannot be the zero address.\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must be owned by `from`.\\n\\t * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) external payable;\\n\\n\\t/**\\n\\t * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n\\t * The approval is cleared when the token is transferred.\\n\\t *\\n\\t * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The caller must own the token or be an approved operator.\\n\\t * - `tokenId` must exist.\\n\\t *\\n\\t * Emits an {Approval} event.\\n\\t */\\n\\tfunction approve(address to, uint256 tokenId) external;\\n\\n\\t/**\\n\\t * @dev Returns the account approved for `tokenId` token.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must exist.\\n\\t */\\n\\tfunction getApproved(uint256 tokenId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (address operator);\\n\\n\\t/**\\n\\t * @dev Approve or remove `operator` as an operator for the caller.\\n\\t * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The `operator` cannot be the caller.\\n\\t *\\n\\t * Emits an {ApprovalForAll} event.\\n\\t */\\n\\tfunction setApprovalForAll(address operator, bool _approved) external;\\n\\n\\t/**\\n\\t * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n\\t *\\n\\t * See {setApprovalForAll}\\n\\t */\\n\\tfunction isApprovedForAll(address owner, address operator)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (bool);\\n\\n\\t/**\\n\\t * @dev Safely transfers `tokenId` token from `from` to `to`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `from` cannot be the zero address.\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must exist and be owned by `from`.\\n\\t * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes calldata data\\n\\t) external;\\n}\\n\",\"keccak256\":\"0x0530ead218d7cc69563f4530b13a999f9d2949a7be901a782371afb8d337bec3\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\t/**\\n\\t * @dev Returns the total amount of tokens stored by the contract.\\n\\t */\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n\\t * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n\\t */\\n\\tfunction tokenOfOwnerByIndex(address owner, uint256 index)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256 tokenId);\\n\\n\\t/**\\n\\t * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n\\t * Use along with {totalSupply} to enumerate all tokens.\\n\\t */\\n\\tfunction tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc09ef36867349fb40ae5ab24846feeeb1028b2f21b1f021f45c3a094eb685566\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\t/**\\n\\t * @dev Returns the token collection name.\\n\\t */\\n\\tfunction name() external view returns (string memory);\\n\\n\\t/**\\n\\t * @dev Returns the token collection symbol.\\n\\t */\\n\\tfunction symbol() external view returns (string memory);\\n\\n\\t/**\\n\\t * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n\\t */\\n\\tfunction tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6976b834147423dc07cf721d8bb7eaa1951d5f846e7c66f516959168cdbcb915\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n\\t/**\\n\\t * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n\\t * by `operator` from `from`, this function is called.\\n\\t *\\n\\t * It must return its Solidity selector to confirm the token transfer.\\n\\t * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n\\t *\\n\\t * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n\\t */\\n\\tfunction onERC721Received(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes calldata data\\n\\t) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x50af35c8123738f546a52aaa20d00a751d27337697cde9d2f7fbb991825b1dc7\",\"license\":\"MIT\"},\"contracts/token/DistributionRight.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"./ERC721Base.sol\\\";\\nimport \\\"../accessors/NameAccessor.sol\\\";\\n\\n/// @title DistributionRight - represents advertising distribution rights.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ncontract DistributionRight is ERC721Base {\\n\\t/// @dev Initializes NFT\\n\\t/// @param name_ string of the token name\\n\\t/// @param symbol_ string of the token symbol\\n\\t/// @param baseURI_ string of the base URI\\n\\t/// @param nameRegistry address of NameRegistry\\n\\tconstructor(\\n\\t\\tstring memory name_,\\n\\t\\tstring memory symbol_,\\n\\t\\tstring memory baseURI_,\\n\\t\\taddress nameRegistry\\n\\t) ERC721Base(name_, symbol_, baseURI_, nameRegistry) {}\\n\\n\\t/// @dev Mints a new NFT.\\n\\t/// @param account address of the token owner\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction mint(\\n\\t\\taddress account,\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory metadata\\n\\t) public onlyAllowedContract {\\n\\t\\t_mint(account, tokenId);\\n\\t\\t_tokenURIs[tokenId] = metadata;\\n\\t}\\n\\n\\t/// @dev Burns the NFT.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction burn(uint256 tokenId) public onlyAllowedContract {\\n\\t\\t_burn(tokenId);\\n\\t}\\n\\n\\t/// @dev Transfers the NFT.\\n\\t/// @param from address of the current owner\\n\\t/// @param to address of the next owner\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction transferByAllowedContract(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public onlyAllowedContract {\\n\\t\\t_transfer(from, to, tokenId);\\n\\t}\\n}\\n\",\"keccak256\":\"0x5a4bc906087b7f3782e91690e4f675d01cd27fb2b0c589b5ec8b87268394a875\",\"license\":\"UNLICENSED\"},\"contracts/token/ERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC721.sol\\\";\\nimport \\\"../interfaces/IERC721Receiver.sol\\\";\\nimport \\\"../interfaces/IERC721Metadata.sol\\\";\\nimport \\\"../interfaces/IERC721Enumerable.sol\\\";\\nimport \\\"../utils/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../base/PostOwnerPool.sol\\\";\\nimport \\\"../base/Vault.sol\\\";\\nimport \\\"../accessors/NameAccessor.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Base is\\n\\tContext,\\n\\tERC165,\\n\\tIERC721,\\n\\tIERC721Enumerable,\\n\\tIERC721Metadata,\\n\\tNameAccessor\\n{\\n\\tusing Address for address;\\n\\tusing Strings for uint256;\\n\\n\\t// Token name\\n\\tstring private _name;\\n\\n\\t// Token symbol\\n\\tstring private _symbol;\\n\\n\\t// Base URI\\n\\tstring internal _baseURI;\\n\\n\\t// Token URIs\\n\\tmapping(uint256 => string) internal _tokenURIs;\\n\\n\\t// Mapping from token ID to owner address\\n\\tmapping(uint256 => address) private _owners;\\n\\n\\t// Mapping owner address to token count\\n\\tmapping(address => uint256) private _balances;\\n\\n\\t// Mapping from token ID to approved address\\n\\tmapping(uint256 => address) internal _tokenApprovals;\\n\\n\\t// Mapping from owner to operator approvals\\n\\tmapping(address => mapping(address => bool)) internal _operatorApprovals;\\n\\n\\t// Mapping from owner to list of owned token IDs\\n\\tmapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n\\t// Mapping from token ID to index of the owner tokens list\\n\\tmapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n\\t// Array with all token ids, used for enumeration\\n\\tuint256[] private _allTokens;\\n\\n\\t// Mapping from token id to position in the allTokens array\\n\\tmapping(uint256 => uint256) private _allTokensIndex;\\n\\n\\t/**\\n\\t * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n\\t */\\n\\tconstructor(\\n\\t\\tstring memory name_,\\n\\t\\tstring memory symbol_,\\n\\t\\tstring memory baseURI_,\\n\\t\\taddress nameRegistry\\n\\t) NameAccessor(nameRegistry) {\\n\\t\\t_name = name_;\\n\\t\\t_symbol = symbol_;\\n\\t\\t_baseURI = baseURI_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC165-supportsInterface}.\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride(ERC165, IERC165)\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn\\n\\t\\t\\tinterfaceId == type(IERC721).interfaceId ||\\n\\t\\t\\tinterfaceId == type(IERC721Metadata).interfaceId ||\\n\\t\\t\\tsuper.supportsInterface(interfaceId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-balanceOf}.\\n\\t */\\n\\tfunction balanceOf(address owner)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n\\t\\treturn _balances[owner];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-ownerOf}.\\n\\t */\\n\\tfunction ownerOf(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (address)\\n\\t{\\n\\t\\taddress owner = _owners[tokenId];\\n\\t\\trequire(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n\\t\\treturn owner;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Metadata-name}.\\n\\t */\\n\\tfunction name() public view virtual override returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Metadata-symbol}.\\n\\t */\\n\\tfunction symbol() public view virtual override returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Metadata-tokenURI}.\\n\\t */\\n\\tfunction tokenURI(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\t_exists(tokenId),\\n\\t\\t\\t\\\"ERC721Metadata: URI query for nonexistent token\\\"\\n\\t\\t);\\n\\n\\t\\treturn\\n\\t\\t\\tbytes(_baseURI).length > 0\\n\\t\\t\\t\\t? string(abi.encodePacked(_baseURI, _tokenURIs[tokenId]))\\n\\t\\t\\t\\t: _tokenURIs[tokenId];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-approve}.\\n\\t */\\n\\tfunction approve(address to, uint256 tokenId) public virtual override {\\n\\t\\taddress owner = ownerOf(tokenId);\\n\\t\\trequire(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n\\t\\trequire(\\n\\t\\t\\t_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n\\t\\t\\t\\\"ERC721: approve caller is not owner nor approved for all\\\"\\n\\t\\t);\\n\\n\\t\\t_approve(to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-getApproved}.\\n\\t */\\n\\tfunction getApproved(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (address)\\n\\t{\\n\\t\\trequire(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n\\t\\treturn _tokenApprovals[tokenId];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-setApprovalForAll}.\\n\\t */\\n\\tfunction setApprovalForAll(address operator, bool approved)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t{\\n\\t\\trequire(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n\\t\\t_operatorApprovals[_msgSender()][operator] = approved;\\n\\t\\temit ApprovalForAll(_msgSender(), operator, approved);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-isApprovedForAll}.\\n\\t */\\n\\tfunction isApprovedForAll(address owner, address operator)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn _operatorApprovals[owner][operator];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-transferFrom}.\\n\\t */\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public payable virtual override {\\n\\t\\t//solhint-disable-next-line max-line-length\\n\\t\\trequire(\\n\\t\\t\\t_isApprovedOrOwner(_msgSender(), tokenId),\\n\\t\\t\\t\\\"ERC721: transfer caller is not owner nor approved\\\"\\n\\t\\t);\\n\\n\\t\\t_transfer(from, to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-safeTransferFrom}.\\n\\t */\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public virtual override {\\n\\t\\tsafeTransferFrom(from, to, tokenId, \\\"\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-safeTransferFrom}.\\n\\t */\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) public virtual override {\\n\\t\\trequire(\\n\\t\\t\\t_isApprovedOrOwner(_msgSender(), tokenId),\\n\\t\\t\\t\\\"ERC721: transfer caller is not owner nor approved\\\"\\n\\t\\t);\\n\\t\\t_safeTransfer(from, to, tokenId, _data);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n\\t * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n\\t *\\n\\t * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n\\t *\\n\\t * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n\\t * implement alternative mechanisms to perform token transfer, such as signature-based.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `from` cannot be the zero address.\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must exist and be owned by `from`.\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _safeTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) internal virtual {\\n\\t\\t_transfer(from, to, tokenId);\\n\\t\\trequire(\\n\\t\\t\\t_checkOnERC721Received(from, to, tokenId, _data),\\n\\t\\t\\t\\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns whether `tokenId` exists.\\n\\t *\\n\\t * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n\\t *\\n\\t * Tokens start existing when they are minted (`_mint`),\\n\\t * and stop existing when they are burned (`_burn`).\\n\\t */\\n\\tfunction _exists(uint256 tokenId) internal view virtual returns (bool) {\\n\\t\\treturn _owners[tokenId] != address(0);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must exist.\\n\\t */\\n\\tfunction _isApprovedOrOwner(address spender, uint256 tokenId)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\trequire(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n\\t\\taddress owner = ownerOf(tokenId);\\n\\t\\treturn (spender == owner ||\\n\\t\\t\\tgetApproved(tokenId) == spender ||\\n\\t\\t\\tisApprovedForAll(owner, spender));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Safely mints `tokenId` and transfers it to `to`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must not exist.\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _safeMint(address to, uint256 tokenId) internal virtual {\\n\\t\\t_safeMint(to, tokenId, \\\"\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n\\t * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n\\t */\\n\\tfunction _safeMint(\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) internal virtual {\\n\\t\\t_mint(to, tokenId);\\n\\t\\trequire(\\n\\t\\t\\t_checkOnERC721Received(address(0), to, tokenId, _data),\\n\\t\\t\\t\\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Mints `tokenId` and transfers it to `to`.\\n\\t *\\n\\t * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must not exist.\\n\\t * - `to` cannot be the zero address.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _mint(address to, uint256 tokenId) internal virtual {\\n\\t\\trequire(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n\\t\\trequire(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n\\t\\t_beforeTokenTransfer(address(0), to, tokenId);\\n\\n\\t\\t_balances[to] += 1;\\n\\t\\t_owners[tokenId] = to;\\n\\n\\t\\temit Transfer(address(0), to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Destroys `tokenId`.\\n\\t * The approval is cleared when the token is burned.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must exist.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _burn(uint256 tokenId) internal virtual {\\n\\t\\taddress owner = ownerOf(tokenId);\\n\\n\\t\\t_beforeTokenTransfer(owner, address(0), tokenId);\\n\\n\\t\\t// Clear approvals\\n\\t\\t_approve(address(0), tokenId);\\n\\n\\t\\t_balances[owner] -= 1;\\n\\t\\tdelete _owners[tokenId];\\n\\n\\t\\temit Transfer(owner, address(0), tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers `tokenId` from `from` to `to`.\\n\\t *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must be owned by `from`.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _transfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) internal virtual {\\n\\t\\trequire(\\n\\t\\t\\townerOf(tokenId) == from,\\n\\t\\t\\t\\\"ERC721: transfer of token that is not own\\\"\\n\\t\\t);\\n\\t\\trequire(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n\\t\\t_beforeTokenTransfer(from, to, tokenId);\\n\\t\\tif (msg.value != 0) {\\n\\t\\t\\tpayable(_postOwnerPool().ownerOf(tokenId)).transfer(\\n\\t\\t\\t\\t(msg.value * 3) / 100\\n\\t\\t\\t);\\n\\t\\t\\tpayable(_vault()).transfer((msg.value * 3) / 100);\\n\\t\\t\\tpayable(to).transfer((msg.value * 94) / 100);\\n\\t\\t}\\n\\t\\t// Clear approvals from the previous owner\\n\\t\\t_approve(address(0), tokenId);\\n\\t\\t_balances[from] -= 1;\\n\\t\\t_balances[to] += 1;\\n\\t\\t_owners[tokenId] = to;\\n\\n\\t\\temit Transfer(from, to, tokenId);\\n\\t}\\n\\n\\tfunction _vault() internal view returns (Vault) {\\n\\t\\treturn Vault(payable(vaultAddress()));\\n\\t}\\n\\n\\tfunction _postOwnerPool() internal view returns (PostOwnerPool) {\\n\\t\\treturn PostOwnerPool(postOwnerPoolAddress());\\n\\t}\\n\\n\\t/**\\n\\t * @dev Approve `to` to operate on `tokenId`\\n\\t *\\n\\t * Emits a {Approval} event.\\n\\t */\\n\\tfunction _approve(address to, uint256 tokenId) internal virtual {\\n\\t\\t_tokenApprovals[tokenId] = to;\\n\\t\\temit Approval(ownerOf(tokenId), to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n\\t * The call is not executed if the target address is not a contract.\\n\\t *\\n\\t * @param from address representing the previous owner of the given token ID\\n\\t * @param to target address that will receive the tokens\\n\\t * @param tokenId uint256 ID of the token to be transferred\\n\\t * @param _data bytes optional data to send along with the call\\n\\t * @return bool whether the call correctly returned the expected magic value\\n\\t */\\n\\tfunction _checkOnERC721Received(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) private returns (bool) {\\n\\t\\tif (to.isContract()) {\\n\\t\\t\\ttry\\n\\t\\t\\t\\tIERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\\n\\t\\t\\treturns (bytes4 retval) {\\n\\t\\t\\t\\treturn retval == IERC721Receiver(to).onERC721Received.selector;\\n\\t\\t\\t} catch (bytes memory reason) {\\n\\t\\t\\t\\tif (reason.length == 0) {\\n\\t\\t\\t\\t\\trevert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tassembly {\\n\\t\\t\\t\\t\\t\\trevert(add(32, reason), mload(reason))\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Hook that is called before any token transfer. This includes minting\\n\\t * and burning.\\n\\t *\\n\\t * Calling conditions:\\n\\t *\\n\\t * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n\\t * transferred to `to`.\\n\\t * - When `from` is zero, `tokenId` will be minted for `to`.\\n\\t * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n\\t * - `from` and `to` are never both zero.\\n\\t *\\n\\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n\\t */\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) internal {\\n\\t\\tif (from == address(0)) {\\n\\t\\t\\t_addTokenToAllTokensEnumeration(tokenId);\\n\\t\\t} else if (from != to) {\\n\\t\\t\\t_removeTokenFromOwnerEnumeration(from, tokenId);\\n\\t\\t}\\n\\t\\tif (to == address(0)) {\\n\\t\\t\\t_removeTokenFromAllTokensEnumeration(tokenId);\\n\\t\\t} else if (to != from) {\\n\\t\\t\\t_addTokenToOwnerEnumeration(to, tokenId);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n\\t */\\n\\tfunction tokenOfOwnerByIndex(address owner, uint256 index)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\tindex < balanceOf(owner),\\n\\t\\t\\t\\\"ERC721Enumerable: owner index out of bounds\\\"\\n\\t\\t);\\n\\t\\treturn _ownedTokens[owner][index];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Enumerable-totalSupply}.\\n\\t */\\n\\tfunction totalSupply() public view virtual override returns (uint256) {\\n\\t\\treturn _allTokens.length;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Enumerable-tokenByIndex}.\\n\\t */\\n\\tfunction tokenByIndex(uint256 index)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\tindex < totalSupply(),\\n\\t\\t\\t\\\"ERC721Enumerable: global index out of bounds\\\"\\n\\t\\t);\\n\\t\\treturn _allTokens[index];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n\\t * @param to address representing the new owner of the given token ID\\n\\t * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n\\t */\\n\\tfunction _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n\\t\\tuint256 length = balanceOf(to);\\n\\t\\t_ownedTokens[to][length] = tokenId;\\n\\t\\t_ownedTokensIndex[tokenId] = length;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to add a token to this extension's token tracking data structures.\\n\\t * @param tokenId uint256 ID of the token to be added to the tokens list\\n\\t */\\n\\tfunction _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n\\t\\t_allTokensIndex[tokenId] = _allTokens.length;\\n\\t\\t_allTokens.push(tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n\\t * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n\\t * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n\\t * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n\\t * @param from address representing the previous owner of the given token ID\\n\\t * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n\\t */\\n\\tfunction _removeTokenFromOwnerEnumeration(address from, uint256 tokenId)\\n\\t\\tprivate\\n\\t{\\n\\t\\t// To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n\\t\\t// then delete the last slot (swap and pop).\\n\\n\\t\\tuint256 lastTokenIndex = balanceOf(from) - 1;\\n\\t\\tuint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n\\t\\t// When the token to delete is the last token, the swap operation is unnecessary\\n\\t\\tif (tokenIndex != lastTokenIndex) {\\n\\t\\t\\tuint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n\\t\\t\\t_ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n\\t\\t\\t_ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\t\\t}\\n\\n\\t\\t// This also deletes the contents at the last position of the array\\n\\t\\tdelete _ownedTokensIndex[tokenId];\\n\\t\\tdelete _ownedTokens[from][lastTokenIndex];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to remove a token from this extension's token tracking data structures.\\n\\t * This has O(1) time complexity, but alters the order of the _allTokens array.\\n\\t * @param tokenId uint256 ID of the token to be removed from the tokens list\\n\\t */\\n\\tfunction _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n\\t\\t// To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n\\t\\t// then delete the last slot (swap and pop).\\n\\n\\t\\tuint256 lastTokenIndex = _allTokens.length - 1;\\n\\t\\tuint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n\\t\\t// When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n\\t\\t// rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n\\t\\t// an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n\\t\\tuint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n\\t\\t_allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n\\t\\t_allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n\\t\\t// This also deletes the contents at the last position of the array\\n\\t\\tdelete _allTokensIndex[tokenId];\\n\\t\\t_allTokens.pop();\\n\\t}\\n}\\n\",\"keccak256\":\"0x62dffb05e4281991de16922ebc3251b6377bfeceb33a019003387c32a9bb9ac3\",\"license\":\"MIT\"},\"contracts/utils/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n\\t/**\\n\\t * @dev See {IERC165-supportsInterface}.\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn interfaceId == type(IERC165).interfaceId;\\n\\t}\\n}\\n\",\"keccak256\":\"0xec4c6eb05ebae1932731b05befea0660da3317feee48b37d9e7ad041f47877c2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200265e3803806200265e833981016040819052620000349162000204565b600080546001600160a01b0319166001600160a01b038316179055835184908490849084906200006c906001906020870190620000a7565b50825162000082906002906020860190620000a7565b50815162000098906003906020850190620000a7565b5050505050505050506200030a565b828054620000b590620002b7565b90600052602060002090601f016020900481019282620000d9576000855562000124565b82601f10620000f457805160ff191683800117855562000124565b8280016001018555821562000124579182015b828111156200012457825182559160200191906001019062000107565b506200013292915062000136565b5090565b5b8082111562000132576000815560010162000137565b600082601f8301126200015f57600080fd5b81516001600160401b03808211156200017c576200017c620002f4565b604051601f8301601f19908116603f01168101908282118183101715620001a757620001a7620002f4565b81604052838152602092508683858801011115620001c457600080fd5b600091505b83821015620001e85785820183015181830184015290820190620001c9565b83821115620001fa5760008385830101525b9695505050505050565b600080600080608085870312156200021b57600080fd5b84516001600160401b03808211156200023357600080fd5b62000241888389016200014d565b955060208701519150808211156200025857600080fd5b62000266888389016200014d565b945060408701519150808211156200027d57600080fd5b506200028c878288016200014d565b606087015190935090506001600160a01b0381168114620002ac57600080fd5b939692955090935050565b600181811c90821680620002cc57607f821691505b60208210811415620002ee57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b612344806200031a6000396000f3fe6080604052600436106101965760003560e01c80634f6ccce7116100e1578063a22cb4651161008a578063c87b56dd11610064578063c87b56dd14610425578063d3fc986414610445578063e985e9c514610465578063ef95e90f146104ae57600080fd5b8063a22cb465146103d0578063ac6919a5146103f0578063b88d4fde1461040557600080fd5b80638da5cb5b116100bb5780638da5cb5b146103865780638e9e614e1461039b57806395d89b41146103bb57600080fd5b80634f6ccce7146103265780636352211e1461034657806370a082311461036657600080fd5b806327b7a2f51161014357806342842e0e1161011d57806342842e0e146102d157806342966c68146102f1578063430bf08a1461031157600080fd5b806327b7a2f51461027e57806329a594b51461029c5780632f745c59146102b157600080fd5b8063095ea7b311610174578063095ea7b31461022a57806318160ddd1461024c57806323b872dd1461026b57600080fd5b806301ffc9a71461019b57806306fdde03146101d0578063081812fc146101f2575b600080fd5b3480156101a757600080fd5b506101bb6101b6366004612034565b6104c3565b60405190151581526020015b60405180910390f35b3480156101dc57600080fd5b506101e5610560565b6040516101c791906121bf565b3480156101fe57600080fd5b5061021261020d36600461206e565b6105f2565b6040516001600160a01b0390911681526020016101c7565b34801561023657600080fd5b5061024a610245366004611f7e565b61068c565b005b34801561025857600080fd5b50600b545b6040519081526020016101c7565b61024a610279366004611e8f565b6107be565b34801561028a57600080fd5b506000546001600160a01b0316610212565b3480156102a857600080fd5b50610212610845565b3480156102bd57600080fd5b5061025d6102cc366004611f7e565b610911565b3480156102dd57600080fd5b5061024a6102ec366004611e8f565b6109b9565b3480156102fd57600080fd5b5061024a61030c36600461206e565b6109d4565b34801561031d57600080fd5b50610212610a8f565b34801561033257600080fd5b5061025d61034136600461206e565b610ad6565b34801561035257600080fd5b5061021261036136600461206e565b610b7a565b34801561037257600080fd5b5061025d610381366004611e15565b610c05565b34801561039257600080fd5b50610212610c9f565b3480156103a757600080fd5b5061024a6103b6366004611e8f565b610cee565b3480156103c757600080fd5b506101e5610d9d565b3480156103dc57600080fd5b5061024a6103eb366004611f50565b610dac565b3480156103fc57600080fd5b50610212610e71565b34801561041157600080fd5b5061024a610420366004611ed0565b610eb8565b34801561043157600080fd5b506101e561044036600461206e565b610f46565b34801561045157600080fd5b5061024a610460366004611faa565b6110c0565b34801561047157600080fd5b506101bb610480366004611e56565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205460ff1690565b3480156104ba57600080fd5b50610212611198565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061052657506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061055a57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b60606001805461056f90612242565b80601f016020809104026020016040519081016040528092919081815260200182805461059b90612242565b80156105e85780601f106105bd576101008083540402835291602001916105e8565b820191906000526020600020905b8154815290600101906020018083116105cb57829003601f168201915b5050505050905090565b6000818152600560205260408120546001600160a01b03166106705760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600760205260409020546001600160a01b031690565b600061069782610b7a565b9050806001600160a01b0316836001600160a01b031614156107215760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610667565b336001600160a01b038216148061073d575061073d8133610480565b6107af5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610667565b6107b983836111df565b505050565b6107c8338261125a565b61083a5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610667565b6107b9838383611351565b600080546040517f526573657276656452696768740000000000000000000000000000000000000060208201526001600160a01b0390911690638eaa6ac090602d015b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016108bc91815260200190565b60206040518083038186803b1580156108d457600080fd5b505afa1580156108e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090c9190611e39565b905090565b600061091c83610c05565b82106109905760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610667565b506001600160a01b03919091166000908152600960209081526040808320938352929052205490565b6107b983838360405180602001604052806000815250610eb8565b6000546040516351e0e26b60e01b81523360048201526001600160a01b03909116906351e0e26b9060240160206040518083038186803b158015610a1757600080fd5b505afa158015610a2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4f9190612017565b610a835760405162461bcd60e51b8152602060048201526005602482015264415232303160d81b6044820152606401610667565b610a8c816116af565b50565b600080546040517f5661756c7400000000000000000000000000000000000000000000000000000060208201526001600160a01b0390911690638eaa6ac090602501610888565b6000610ae1600b5490565b8210610b555760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610667565b600b8281548110610b6857610b686122a9565b90600052602060002001549050919050565b6000818152600560205260408120546001600160a01b03168061055a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610667565b60006001600160a01b038216610c835760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610667565b506001600160a01b031660009081526006602052604090205490565b60008060009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108d457600080fd5b6000546040516351e0e26b60e01b81523360048201526001600160a01b03909116906351e0e26b9060240160206040518083038186803b158015610d3157600080fd5b505afa158015610d45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d699190612017565b61083a5760405162461bcd60e51b8152602060048201526005602482015264415232303160d81b6044820152606401610667565b60606002805461056f90612242565b6001600160a01b038216331415610e055760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610667565b3360008181526008602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600080546040517f446973747269627574696f6e526967687400000000000000000000000000000060208201526001600160a01b0390911690638eaa6ac090603101610888565b610ec2338361125a565b610f345760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610667565b610f4084848484611763565b50505050565b6000818152600560205260409020546060906001600160a01b0316610fd35760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610667565b600060038054610fe290612242565b905011611085576000828152600460205260409020805461100290612242565b80601f016020809104026020016040519081016040528092919081815260200182805461102e90612242565b801561107b5780601f106110505761010080835404028352916020019161107b565b820191906000526020600020905b81548152906001019060200180831161105e57829003601f168201915b505050505061055a565b6003600460008481526020019081526020016000206040516020016110ab92919061216e565b60405160208183030381529060405292915050565b6000546040516351e0e26b60e01b81523360048201526001600160a01b03909116906351e0e26b9060240160206040518083038186803b15801561110357600080fd5b505afa158015611117573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113b9190612017565b61116f5760405162461bcd60e51b8152602060048201526005602482015264415232303160d81b6044820152606401610667565b61117983836117ec565b60008281526004602090815260409091208251610f4092840190611d06565b600080546040517f506f73744f776e6572506f6f6c0000000000000000000000000000000000000060208201526001600160a01b0390911690638eaa6ac090602d01610888565b6000818152600760205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416908117909155819061122182610b7a565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600560205260408120546001600160a01b03166112d35760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610667565b60006112de83610b7a565b9050806001600160a01b0316846001600160a01b031614806113195750836001600160a01b031661130e846105f2565b6001600160a01b0316145b8061134957506001600160a01b0380821660009081526008602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661136482610b7a565b6001600160a01b0316146113e05760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610667565b6001600160a01b03821661145b5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610667565b611466838383611947565b34156115df576114746119ff565b6001600160a01b0316636352211e826040518263ffffffff1660e01b81526004016114a191815260200190565b60206040518083038186803b1580156114b957600080fd5b505afa1580156114cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f19190611e39565b6001600160a01b03166108fc606461150a34600361220c565b61151491906121ea565b6040518115909202916000818181858888f1935050505015801561153c573d6000803e3d6000fd5b50611545611a09565b6001600160a01b03166108fc606461155e34600361220c565b61156891906121ea565b6040518115909202916000818181858888f19350505050158015611590573d6000803e3d6000fd5b506001600160a01b0382166108fc60646115ab34605e61220c565b6115b591906121ea565b6040518115909202916000818181858888f193505050501580156115dd573d6000803e3d6000fd5b505b6115ea6000826111df565b6001600160a01b038316600090815260066020526040812080546001929061161390849061222b565b90915550506001600160a01b03821660009081526006602052604081208054600192906116419084906121d2565b9091555050600081815260056020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60006116ba82610b7a565b90506116c881600084611947565b6116d36000836111df565b6001600160a01b03811660009081526006602052604081208054600192906116fc90849061222b565b9091555050600082815260056020526040808220805473ffffffffffffffffffffffffffffffffffffffff19169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b61176e848484611351565b61177a84848484611a13565b610f405760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610667565b6001600160a01b0382166118425760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610667565b6000818152600560205260409020546001600160a01b0316156118a75760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610667565b6118b360008383611947565b6001600160a01b03821660009081526006602052604081208054600192906118dc9084906121d2565b9091555050600081815260056020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b0383166119a25761199d81600b80546000838152600c60205260408120829055600182018355919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90155565b6119c5565b816001600160a01b0316836001600160a01b0316146119c5576119c58382611b76565b6001600160a01b0382166119dc576107b981611c13565b826001600160a01b0316826001600160a01b0316146107b9576107b98282611cc2565b600061090c611198565b600061090c610a8f565b60006001600160a01b0384163b15611b6b57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611a57903390899088908890600401612183565b602060405180830381600087803b158015611a7157600080fd5b505af1925050508015611aa1575060408051601f3d908101601f19168201909252611a9e91810190612051565b60015b611b51573d808015611acf576040519150601f19603f3d011682016040523d82523d6000602084013e611ad4565b606091505b508051611b495760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610667565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611349565b506001949350505050565b60006001611b8384610c05565b611b8d919061222b565b6000838152600a6020526040902054909150808214611be0576001600160a01b03841660009081526009602090815260408083208584528252808320548484528184208190558352600a90915290208190555b506000918252600a602090815260408084208490556001600160a01b039094168352600981528383209183525290812055565b600b54600090611c259060019061222b565b6000838152600c6020526040812054600b8054939450909284908110611c4d57611c4d6122a9565b9060005260206000200154905080600b8381548110611c6e57611c6e6122a9565b6000918252602080832090910192909255828152600c9091526040808220849055858252812055600b805480611ca657611ca6612293565b6001900381819060005260206000200160009055905550505050565b6000611ccd83610c05565b6001600160a01b0390931660009081526009602090815260408083208684528252808320859055938252600a9052919091209190915550565b828054611d1290612242565b90600052602060002090601f016020900481019282611d345760008555611d7a565b82601f10611d4d57805160ff1916838001178555611d7a565b82800160010185558215611d7a579182015b82811115611d7a578251825591602001919060010190611d5f565b50611d86929150611d8a565b5090565b5b80821115611d865760008155600101611d8b565b600067ffffffffffffffff80841115611dba57611dba6122bf565b604051601f8501601f19908116603f01168101908282118183101715611de257611de26122bf565b81604052809350858152868686011115611dfb57600080fd5b858560208301376000602087830101525050509392505050565b600060208284031215611e2757600080fd5b8135611e32816122d5565b9392505050565b600060208284031215611e4b57600080fd5b8151611e32816122d5565b60008060408385031215611e6957600080fd5b8235611e74816122d5565b91506020830135611e84816122d5565b809150509250929050565b600080600060608486031215611ea457600080fd5b8335611eaf816122d5565b92506020840135611ebf816122d5565b929592945050506040919091013590565b60008060008060808587031215611ee657600080fd5b8435611ef1816122d5565b93506020850135611f01816122d5565b925060408501359150606085013567ffffffffffffffff811115611f2457600080fd5b8501601f81018713611f3557600080fd5b611f4487823560208401611d9f565b91505092959194509250565b60008060408385031215611f6357600080fd5b8235611f6e816122d5565b91506020830135611e84816122ea565b60008060408385031215611f9157600080fd5b8235611f9c816122d5565b946020939093013593505050565b600080600060608486031215611fbf57600080fd5b8335611fca816122d5565b925060208401359150604084013567ffffffffffffffff811115611fed57600080fd5b8401601f81018613611ffe57600080fd5b61200d86823560208401611d9f565b9150509250925092565b60006020828403121561202957600080fd5b8151611e32816122ea565b60006020828403121561204657600080fd5b8135611e32816122f8565b60006020828403121561206357600080fd5b8151611e32816122f8565b60006020828403121561208057600080fd5b5035919050565b6000815180845260005b818110156120ad57602081850181015186830182015201612091565b818111156120bf576000602083870101525b50601f01601f19169290920160200192915050565b8054600090600181811c90808316806120ee57607f831692505b602080841082141561211057634e487b7160e01b600052602260045260246000fd5b818015612124576001811461213557612162565b60ff19861689528489019650612162565b60008881526020902060005b8681101561215a5781548b820152908501908301612141565b505084890196505b50505050505092915050565b600061134961217d83866120d4565b846120d4565b60006001600160a01b038087168352808616602084015250836040830152608060608301526121b56080830184612087565b9695505050505050565b602081526000611e326020830184612087565b600082198211156121e5576121e561227d565b500190565b60008261220757634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156122265761222661227d565b500290565b60008282101561223d5761223d61227d565b500390565b600181811c9082168061225657607f821691505b6020821081141561227757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610a8c57600080fd5b8015158114610a8c57600080fd5b6001600160e01b031981168114610a8c57600080fdfea26469706673582212209b7d2439b9a5c4fe2b7518d90a0f8f182d6b3aa04b80093a1835c60d3bb0eab564736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106101965760003560e01c80634f6ccce7116100e1578063a22cb4651161008a578063c87b56dd11610064578063c87b56dd14610425578063d3fc986414610445578063e985e9c514610465578063ef95e90f146104ae57600080fd5b8063a22cb465146103d0578063ac6919a5146103f0578063b88d4fde1461040557600080fd5b80638da5cb5b116100bb5780638da5cb5b146103865780638e9e614e1461039b57806395d89b41146103bb57600080fd5b80634f6ccce7146103265780636352211e1461034657806370a082311461036657600080fd5b806327b7a2f51161014357806342842e0e1161011d57806342842e0e146102d157806342966c68146102f1578063430bf08a1461031157600080fd5b806327b7a2f51461027e57806329a594b51461029c5780632f745c59146102b157600080fd5b8063095ea7b311610174578063095ea7b31461022a57806318160ddd1461024c57806323b872dd1461026b57600080fd5b806301ffc9a71461019b57806306fdde03146101d0578063081812fc146101f2575b600080fd5b3480156101a757600080fd5b506101bb6101b6366004612034565b6104c3565b60405190151581526020015b60405180910390f35b3480156101dc57600080fd5b506101e5610560565b6040516101c791906121bf565b3480156101fe57600080fd5b5061021261020d36600461206e565b6105f2565b6040516001600160a01b0390911681526020016101c7565b34801561023657600080fd5b5061024a610245366004611f7e565b61068c565b005b34801561025857600080fd5b50600b545b6040519081526020016101c7565b61024a610279366004611e8f565b6107be565b34801561028a57600080fd5b506000546001600160a01b0316610212565b3480156102a857600080fd5b50610212610845565b3480156102bd57600080fd5b5061025d6102cc366004611f7e565b610911565b3480156102dd57600080fd5b5061024a6102ec366004611e8f565b6109b9565b3480156102fd57600080fd5b5061024a61030c36600461206e565b6109d4565b34801561031d57600080fd5b50610212610a8f565b34801561033257600080fd5b5061025d61034136600461206e565b610ad6565b34801561035257600080fd5b5061021261036136600461206e565b610b7a565b34801561037257600080fd5b5061025d610381366004611e15565b610c05565b34801561039257600080fd5b50610212610c9f565b3480156103a757600080fd5b5061024a6103b6366004611e8f565b610cee565b3480156103c757600080fd5b506101e5610d9d565b3480156103dc57600080fd5b5061024a6103eb366004611f50565b610dac565b3480156103fc57600080fd5b50610212610e71565b34801561041157600080fd5b5061024a610420366004611ed0565b610eb8565b34801561043157600080fd5b506101e561044036600461206e565b610f46565b34801561045157600080fd5b5061024a610460366004611faa565b6110c0565b34801561047157600080fd5b506101bb610480366004611e56565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205460ff1690565b3480156104ba57600080fd5b50610212611198565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061052657506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061055a57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b60606001805461056f90612242565b80601f016020809104026020016040519081016040528092919081815260200182805461059b90612242565b80156105e85780601f106105bd576101008083540402835291602001916105e8565b820191906000526020600020905b8154815290600101906020018083116105cb57829003601f168201915b5050505050905090565b6000818152600560205260408120546001600160a01b03166106705760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600760205260409020546001600160a01b031690565b600061069782610b7a565b9050806001600160a01b0316836001600160a01b031614156107215760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610667565b336001600160a01b038216148061073d575061073d8133610480565b6107af5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610667565b6107b983836111df565b505050565b6107c8338261125a565b61083a5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610667565b6107b9838383611351565b600080546040517f526573657276656452696768740000000000000000000000000000000000000060208201526001600160a01b0390911690638eaa6ac090602d015b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016108bc91815260200190565b60206040518083038186803b1580156108d457600080fd5b505afa1580156108e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090c9190611e39565b905090565b600061091c83610c05565b82106109905760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610667565b506001600160a01b03919091166000908152600960209081526040808320938352929052205490565b6107b983838360405180602001604052806000815250610eb8565b6000546040516351e0e26b60e01b81523360048201526001600160a01b03909116906351e0e26b9060240160206040518083038186803b158015610a1757600080fd5b505afa158015610a2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4f9190612017565b610a835760405162461bcd60e51b8152602060048201526005602482015264415232303160d81b6044820152606401610667565b610a8c816116af565b50565b600080546040517f5661756c7400000000000000000000000000000000000000000000000000000060208201526001600160a01b0390911690638eaa6ac090602501610888565b6000610ae1600b5490565b8210610b555760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610667565b600b8281548110610b6857610b686122a9565b90600052602060002001549050919050565b6000818152600560205260408120546001600160a01b03168061055a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610667565b60006001600160a01b038216610c835760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610667565b506001600160a01b031660009081526006602052604090205490565b60008060009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108d457600080fd5b6000546040516351e0e26b60e01b81523360048201526001600160a01b03909116906351e0e26b9060240160206040518083038186803b158015610d3157600080fd5b505afa158015610d45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d699190612017565b61083a5760405162461bcd60e51b8152602060048201526005602482015264415232303160d81b6044820152606401610667565b60606002805461056f90612242565b6001600160a01b038216331415610e055760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610667565b3360008181526008602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600080546040517f446973747269627574696f6e526967687400000000000000000000000000000060208201526001600160a01b0390911690638eaa6ac090603101610888565b610ec2338361125a565b610f345760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610667565b610f4084848484611763565b50505050565b6000818152600560205260409020546060906001600160a01b0316610fd35760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610667565b600060038054610fe290612242565b905011611085576000828152600460205260409020805461100290612242565b80601f016020809104026020016040519081016040528092919081815260200182805461102e90612242565b801561107b5780601f106110505761010080835404028352916020019161107b565b820191906000526020600020905b81548152906001019060200180831161105e57829003601f168201915b505050505061055a565b6003600460008481526020019081526020016000206040516020016110ab92919061216e565b60405160208183030381529060405292915050565b6000546040516351e0e26b60e01b81523360048201526001600160a01b03909116906351e0e26b9060240160206040518083038186803b15801561110357600080fd5b505afa158015611117573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113b9190612017565b61116f5760405162461bcd60e51b8152602060048201526005602482015264415232303160d81b6044820152606401610667565b61117983836117ec565b60008281526004602090815260409091208251610f4092840190611d06565b600080546040517f506f73744f776e6572506f6f6c0000000000000000000000000000000000000060208201526001600160a01b0390911690638eaa6ac090602d01610888565b6000818152600760205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416908117909155819061122182610b7a565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600560205260408120546001600160a01b03166112d35760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610667565b60006112de83610b7a565b9050806001600160a01b0316846001600160a01b031614806113195750836001600160a01b031661130e846105f2565b6001600160a01b0316145b8061134957506001600160a01b0380821660009081526008602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661136482610b7a565b6001600160a01b0316146113e05760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610667565b6001600160a01b03821661145b5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610667565b611466838383611947565b34156115df576114746119ff565b6001600160a01b0316636352211e826040518263ffffffff1660e01b81526004016114a191815260200190565b60206040518083038186803b1580156114b957600080fd5b505afa1580156114cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f19190611e39565b6001600160a01b03166108fc606461150a34600361220c565b61151491906121ea565b6040518115909202916000818181858888f1935050505015801561153c573d6000803e3d6000fd5b50611545611a09565b6001600160a01b03166108fc606461155e34600361220c565b61156891906121ea565b6040518115909202916000818181858888f19350505050158015611590573d6000803e3d6000fd5b506001600160a01b0382166108fc60646115ab34605e61220c565b6115b591906121ea565b6040518115909202916000818181858888f193505050501580156115dd573d6000803e3d6000fd5b505b6115ea6000826111df565b6001600160a01b038316600090815260066020526040812080546001929061161390849061222b565b90915550506001600160a01b03821660009081526006602052604081208054600192906116419084906121d2565b9091555050600081815260056020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60006116ba82610b7a565b90506116c881600084611947565b6116d36000836111df565b6001600160a01b03811660009081526006602052604081208054600192906116fc90849061222b565b9091555050600082815260056020526040808220805473ffffffffffffffffffffffffffffffffffffffff19169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b61176e848484611351565b61177a84848484611a13565b610f405760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610667565b6001600160a01b0382166118425760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610667565b6000818152600560205260409020546001600160a01b0316156118a75760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610667565b6118b360008383611947565b6001600160a01b03821660009081526006602052604081208054600192906118dc9084906121d2565b9091555050600081815260056020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b0383166119a25761199d81600b80546000838152600c60205260408120829055600182018355919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90155565b6119c5565b816001600160a01b0316836001600160a01b0316146119c5576119c58382611b76565b6001600160a01b0382166119dc576107b981611c13565b826001600160a01b0316826001600160a01b0316146107b9576107b98282611cc2565b600061090c611198565b600061090c610a8f565b60006001600160a01b0384163b15611b6b57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611a57903390899088908890600401612183565b602060405180830381600087803b158015611a7157600080fd5b505af1925050508015611aa1575060408051601f3d908101601f19168201909252611a9e91810190612051565b60015b611b51573d808015611acf576040519150601f19603f3d011682016040523d82523d6000602084013e611ad4565b606091505b508051611b495760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610667565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611349565b506001949350505050565b60006001611b8384610c05565b611b8d919061222b565b6000838152600a6020526040902054909150808214611be0576001600160a01b03841660009081526009602090815260408083208584528252808320548484528184208190558352600a90915290208190555b506000918252600a602090815260408084208490556001600160a01b039094168352600981528383209183525290812055565b600b54600090611c259060019061222b565b6000838152600c6020526040812054600b8054939450909284908110611c4d57611c4d6122a9565b9060005260206000200154905080600b8381548110611c6e57611c6e6122a9565b6000918252602080832090910192909255828152600c9091526040808220849055858252812055600b805480611ca657611ca6612293565b6001900381819060005260206000200160009055905550505050565b6000611ccd83610c05565b6001600160a01b0390931660009081526009602090815260408083208684528252808320859055938252600a9052919091209190915550565b828054611d1290612242565b90600052602060002090601f016020900481019282611d345760008555611d7a565b82601f10611d4d57805160ff1916838001178555611d7a565b82800160010185558215611d7a579182015b82811115611d7a578251825591602001919060010190611d5f565b50611d86929150611d8a565b5090565b5b80821115611d865760008155600101611d8b565b600067ffffffffffffffff80841115611dba57611dba6122bf565b604051601f8501601f19908116603f01168101908282118183101715611de257611de26122bf565b81604052809350858152868686011115611dfb57600080fd5b858560208301376000602087830101525050509392505050565b600060208284031215611e2757600080fd5b8135611e32816122d5565b9392505050565b600060208284031215611e4b57600080fd5b8151611e32816122d5565b60008060408385031215611e6957600080fd5b8235611e74816122d5565b91506020830135611e84816122d5565b809150509250929050565b600080600060608486031215611ea457600080fd5b8335611eaf816122d5565b92506020840135611ebf816122d5565b929592945050506040919091013590565b60008060008060808587031215611ee657600080fd5b8435611ef1816122d5565b93506020850135611f01816122d5565b925060408501359150606085013567ffffffffffffffff811115611f2457600080fd5b8501601f81018713611f3557600080fd5b611f4487823560208401611d9f565b91505092959194509250565b60008060408385031215611f6357600080fd5b8235611f6e816122d5565b91506020830135611e84816122ea565b60008060408385031215611f9157600080fd5b8235611f9c816122d5565b946020939093013593505050565b600080600060608486031215611fbf57600080fd5b8335611fca816122d5565b925060208401359150604084013567ffffffffffffffff811115611fed57600080fd5b8401601f81018613611ffe57600080fd5b61200d86823560208401611d9f565b9150509250925092565b60006020828403121561202957600080fd5b8151611e32816122ea565b60006020828403121561204657600080fd5b8135611e32816122f8565b60006020828403121561206357600080fd5b8151611e32816122f8565b60006020828403121561208057600080fd5b5035919050565b6000815180845260005b818110156120ad57602081850181015186830182015201612091565b818111156120bf576000602083870101525b50601f01601f19169290920160200192915050565b8054600090600181811c90808316806120ee57607f831692505b602080841082141561211057634e487b7160e01b600052602260045260246000fd5b818015612124576001811461213557612162565b60ff19861689528489019650612162565b60008881526020902060005b8681101561215a5781548b820152908501908301612141565b505084890196505b50505050505092915050565b600061134961217d83866120d4565b846120d4565b60006001600160a01b038087168352808616602084015250836040830152608060608301526121b56080830184612087565b9695505050505050565b602081526000611e326020830184612087565b600082198211156121e5576121e561227d565b500190565b60008261220757634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156122265761222661227d565b500290565b60008282101561223d5761223d61227d565b500390565b600181811c9082168061225657607f821691505b6020821081141561227757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610a8c57600080fd5b8015158114610a8c57600080fd5b6001600160e01b031981168114610a8c57600080fdfea26469706673582212209b7d2439b9a5c4fe2b7518d90a0f8f182d6b3aa04b80093a1835c60d3bb0eab564736f6c63430008060033",
  "devdoc": {
    "author": "Shumpei Koike - <shumpei.koike@bridges.inc>",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Burns the NFT.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "constructor": {
        "details": "Initializes NFT",
        "params": {
          "baseURI_": "string of the base URI",
          "nameRegistry": "address of NameRegistry",
          "name_": "string of the token name",
          "symbol_": "string of the token symbol"
        }
      },
      "distributionRightAddress()": {
        "details": "Gets the address of DistributionRight."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint(address,uint256,string)": {
        "details": "Mints a new NFT.",
        "params": {
          "account": "address of the token owner",
          "tokenId": "uint256 of the token ID"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "nameRegistryAddress()": {
        "details": "Gets the address of NameRegistry"
      },
      "owner()": {
        "details": "Gets the owner address."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "reservedRightAddress()": {
        "details": "Gets the address of ReservedRight."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferByAllowedContract(address,address,uint256)": {
        "details": "Transfers the NFT.",
        "params": {
          "from": "address of the current owner",
          "to": "address of the next owner",
          "tokenId": "uint256 of the token ID"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "vaultAddress()": {
        "details": "Gets the address of Vault."
      }
    },
    "title": "DistributionRight - represents advertising distribution rights.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1739,
        "contract": "contracts/token/DistributionRight.sol:DistributionRight",
        "label": "_nameRegistry",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(NameRegistry)1937"
      },
      {
        "astId": 2676,
        "contract": "contracts/token/DistributionRight.sol:DistributionRight",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2678,
        "contract": "contracts/token/DistributionRight.sol:DistributionRight",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2680,
        "contract": "contracts/token/DistributionRight.sol:DistributionRight",
        "label": "_baseURI",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2684,
        "contract": "contracts/token/DistributionRight.sol:DistributionRight",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2688,
        "contract": "contracts/token/DistributionRight.sol:DistributionRight",
        "label": "_owners",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2692,
        "contract": "contracts/token/DistributionRight.sol:DistributionRight",
        "label": "_balances",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2696,
        "contract": "contracts/token/DistributionRight.sol:DistributionRight",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2702,
        "contract": "contracts/token/DistributionRight.sol:DistributionRight",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2708,
        "contract": "contracts/token/DistributionRight.sol:DistributionRight",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2712,
        "contract": "contracts/token/DistributionRight.sol:DistributionRight",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2715,
        "contract": "contracts/token/DistributionRight.sol:DistributionRight",
        "label": "_allTokens",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2719,
        "contract": "contracts/token/DistributionRight.sol:DistributionRight",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(NameRegistry)1937": {
        "encoding": "inplace",
        "label": "contract NameRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
