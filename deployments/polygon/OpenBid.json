{
  "address": "0xbe4fF70D1f88d4F45A41dCb90E9e1AEA7E335596",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nameRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "adPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "proposal",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "bidding",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "content",
              "type": "string"
            }
          ],
          "internalType": "struct Sale.OpenBid",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "biddingList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "content",
              "type": "string"
            }
          ],
          "internalType": "struct Sale.OpenBid[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "englishAuctionAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eventEmitterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mediaFactoryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mediaRegistryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nameRegistryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offerBidAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openBidAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalReviewAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reasons",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "selectProposal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "content",
              "type": "string"
            }
          ],
          "internalType": "struct Sale.OpenBid",
          "name": "selected",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "content",
              "type": "string"
            }
          ],
          "internalType": "struct Sale.OpenBid[]",
          "name": "nonSelected",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc0234366ee1300b3c0608fde2f854a75e95b8574de9e166126b769d592fa929f",
  "receipt": {
    "to": null,
    "from": "0x051Eb10CD4d10E18244f40c470c91c72655b7dE9",
    "contractAddress": "0xbe4fF70D1f88d4F45A41dCb90E9e1AEA7E335596",
    "transactionIndex": 50,
    "gasUsed": "1204919",
    "logsBloom": "0x
    "blockHash": "0x2e1e0707c18f870d7b7bb75f54fd3c741d7ac8a5b84efe9c136f438e1ac55f1c",
    "transactionHash": "0xc0234366ee1300b3c0608fde2f854a75e95b8574de9e166126b769d592fa929f",
    "logs": [
      {
        "transactionIndex": 50,
        "blockNumber": 22322530,
        "transactionHash": "0xc0234366ee1300b3c0608fde2f854a75e95b8574de9e166126b769d592fa929f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000051eb10cd4d10e18244f40c470c91c72655b7de9",
          "0x000000000000000000000000b79fad4ca981472442f53d16365fdf0305ffd8e9"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000806c05fd57f4000000000000000000000000000000000000000000000000001787aaf1bf34580000000000000000000000000000000000000000000000c2aa7e2f6f1f651cfe7400000000000000000000000000000000000000000000000017073eebc1dc640000000000000000000000000000000000000000000000c2aa7eafdb256274f274",
        "logIndex": 256,
        "blockHash": "0x2e1e0707c18f870d7b7bb75f54fd3c741d7ac8a5b84efe9c136f438e1ac55f1c"
      }
    ],
    "blockNumber": 22322530,
    "cumulativeGasUsed": "10274518",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA21f44Ad2751A5020dBff35f813D90C18f9986b7"
  ],
  "solcInputHash": "5a69c2e6422d35e6b64c3dfdb0689225",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nameRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"adPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proposal\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"bidding\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"}],\"internalType\":\"struct Sale.OpenBid\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"biddingList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"}],\"internalType\":\"struct Sale.OpenBid[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"englishAuctionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventEmitterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mediaFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mediaRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offerBidAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openBidAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalReviewAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reasons\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"selectProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"}],\"internalType\":\"struct Sale.OpenBid\",\"name\":\"selected\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"}],\"internalType\":\"struct Sale.OpenBid[]\",\"name\":\"nonSelected\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"adPoolAddress()\":{\"details\":\"Gets the address of AdPool.\"},\"bid(uint256,string,address,uint256)\":{\"details\":\"Bids to participate in an auction.      It is defined as an Open Bid.\",\"params\":{\"amount\":\"uint256 of the msg.value\",\"proposal\":\"string of the metadata hash\",\"sender\":\"address of the msg.sender\",\"tokenId\":\"uint256 of the token ID\"}},\"englishAuctionAddress()\":{\"details\":\"Gets the address of EnglishAuction.\"},\"eventEmitterAddress()\":{\"details\":\"Gets the address of EventEmitter.\"},\"mediaFactoryAddress()\":{\"details\":\"Gets the address of MediaFactory.\"},\"mediaRegistryAddress()\":{\"details\":\"Gets the address of MediaRegistry.\"},\"nameRegistryAddress()\":{\"details\":\"Gets the address of NameRegistry\"},\"offerBidAddress()\":{\"details\":\"Gets the address of OfferBid.\"},\"openBidAddress()\":{\"details\":\"Gets the address of OpenBid.\"},\"owner()\":{\"details\":\"Gets the owner address.\"},\"proposalReviewAddress()\":{\"details\":\"Gets the address of ProposalReview.\"},\"selectProposal(uint256,uint256,string)\":{\"details\":\"Selects the best proposal bidded with.\",\"params\":{\"index\":\"uint256 of the index number\",\"reason\":\"string of the reason or metadata\",\"tokenId\":\"uint256 of the token ID\"}},\"vaultAddress()\":{\"details\":\"Gets the address of Vault.\"}},\"stateVariables\":{\"_bidding\":{\"details\":\"Maps a tokenId with appeal info\"},\"reasons\":{\"details\":\"Maps a tokenId with the reason why the content is selected\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/peripheries/OpenBid.sol\":\"OpenBid\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/accessors/NameAccessor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/INameRegistry.sol\\\";\\n\\n/// @title NameAccessor - manages the endpoints.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ncontract NameAccessor {\\n\\tINameRegistry internal _nameRegistry;\\n\\n\\t/// @dev Sets the address of NameRegistry.\\n\\t/// @param nameRegistry address of the NameRegistry\\n\\tfunction initialize(address nameRegistry) internal {\\n\\t\\t_nameRegistry = INameRegistry(nameRegistry);\\n\\t}\\n\\n\\t/// @dev Prevents calling a function from anyone except the accepted contracts.\\n\\tmodifier onlyAllowedContract() {\\n\\t\\trequire(_nameRegistry.allowedContracts(msg.sender), \\\"KD013\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Throws if called by any account other than the owner.\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(owner() == msg.sender, \\\"KD012\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Gets the address of NameRegistry\\n\\tfunction nameRegistryAddress() public view returns (address) {\\n\\t\\treturn address(_nameRegistry);\\n\\t}\\n\\n\\t/// @dev Gets the address of AdPool.\\n\\tfunction adPoolAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"AdPool\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of MediaFactory.\\n\\tfunction mediaFactoryAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"MediaFactory\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of MediaRegistry.\\n\\tfunction mediaRegistryAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"MediaRegistry\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of Vault.\\n\\tfunction vaultAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"Vault\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of EventEmitter.\\n\\tfunction eventEmitterAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"EventEmitter\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of EnglishAuction.\\n\\tfunction englishAuctionAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"EnglishAuction\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of OpenBid.\\n\\tfunction openBidAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"OpenBid\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of OfferBid.\\n\\tfunction offerBidAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"OfferBid\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of ProposalReview.\\n\\tfunction proposalReviewAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"ProposalReview\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the owner address.\\n\\tfunction owner() public view returns (address) {\\n\\t\\treturn _nameRegistry.deployer();\\n\\t}\\n}\\n\",\"keccak256\":\"0x1cd127d9c865e6441a0039bfe6af64ac60f5cf5c338d27e9f928f2eec21ca244\",\"license\":\"UNLICENSED\"},\"contracts/common/BlockTimestamp.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\n/// @title BlockTimestamp - gets a block timestamp.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\nabstract contract BlockTimestamp {\\n\\t/// @dev Method that exists purely to be overridden for tests\\n\\tfunction _blockTimestamp() internal view virtual returns (uint256) {\\n\\t\\treturn block.timestamp;\\n\\t}\\n}\\n\",\"keccak256\":\"0x6991a9f03b7e615563901bb2fb1dadcb4fb6cf3f0e7c15a39d22d5929f530940\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IAdPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Ad.sol\\\";\\nimport \\\"../libraries/Sale.sol\\\";\\n\\n/// @title IAdPool - stores all ads accorss every space.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface IAdPool {\\n\\tfunction allPeriods(uint256 tokenId) external view returns (Ad.Period memory);\\n\\n\\tfunction spaced(string memory spaceMetadata) external view returns (bool);\\n\\n\\t/// @dev Creates a new space for the media account.\\n\\t/// @param spaceMetadata string of the space metadata\\n\\tfunction addSpace(string memory spaceMetadata) external;\\n\\n\\t/// @dev Create a new period for a space. This function requires some params\\n\\t///      to decide which kinds of pricing way and how much price to get started.\\n\\t/// @param proxy address of the media proxy\\n\\t/// @param spaceMetadata string of the space metadata\\n\\t/// @param tokenMetadata string of the token metadata\\n\\t/// @param saleEndTimestamp uint256 of the end timestamp for the sale\\n\\t/// @param displayStartTimestamp uint256 of the start timestamp for the display\\n\\t/// @param displayEndTimestamp uint256 of the end timestamp for the display\\n\\t/// @param pricing uint256 of the pricing way\\n\\t/// @param minPrice uint256 of the minimum price to sell it out\\n\\tfunction addPeriod(\\n\\t\\taddress proxy,\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tstring memory tokenMetadata,\\n\\t\\tuint256 saleEndTimestamp,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\tAd.Pricing pricing,\\n\\t\\tuint256 minPrice\\n\\t) external returns (uint256);\\n\\n\\t/// @dev Deletes a period and its token.\\n\\t///      If there is any users locking the fund for the sale, the amount would be transfered\\n\\t///      to the user when deleting the period.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction deletePeriod(uint256 tokenId) external;\\n\\n\\t/// @dev Buys the token that is defined as the specific period on an ad space.\\n\\t///      The price of the token is fixed.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param msgValue uint256 of the price\\n\\tfunction soldByFixedPrice(uint256 tokenId, uint256 msgValue) external;\\n\\n\\t/// @dev Buys the token that is defined as the specific period on an ad space.\\n\\t///      The price is decreasing as time goes by, that is defined as an Dutch Auction.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param msgValue uint256 of the price\\n\\tfunction soldByDutchAuction(uint256 tokenId, uint256 msgValue) external;\\n\\n\\t/// @dev Bids to participate in an auction.\\n\\t///      It is defined as an English Auction.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param msgSender address of the sender\\n\\t/// @param msgValue uint256 of the price\\n\\tfunction bidByEnglishAuction(\\n\\t\\tuint256 tokenId,\\n\\t\\taddress msgSender,\\n\\t\\tuint256 msgValue\\n\\t) external returns (Sale.Bidding memory);\\n\\n\\t/// @dev Receives the token you bidded if you are the successful bidder.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction soldByEnglishAuction(uint256 tokenId)\\n\\t\\texternal\\n\\t\\treturns (address, uint256);\\n\\n\\t/// @dev Bids to participate in an auction.\\n\\t///      It is defined as an Open Bid.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param proposalMetadata string of the metadata hash\\n\\t/// @param msgSender address of the sender\\n\\t/// @param msgValue uint256 of the price\\n\\tfunction bidWithProposal(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory proposalMetadata,\\n\\t\\taddress msgSender,\\n\\t\\tuint256 msgValue\\n\\t) external;\\n\\n\\t/// @dev Accepts an offer by the Media.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param tokenMetadata string of the NFT token metadata\\n\\t/// @param offer Sale.Offer\\n\\tfunction acceptOffer(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory tokenMetadata,\\n\\t\\tSale.Offer memory offer\\n\\t) external;\\n\\n\\tfunction mediaProxyOf(uint256 tokenId) external view returns (address);\\n\\n\\t/// @dev Returns tokenIds tied with the space metadata\\n\\t/// @param spaceMetadata string of the space metadata\\n\\tfunction tokenIdsOf(string memory spaceMetadata)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256[] memory);\\n\\n\\t/// @dev Returns the current price.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction currentPrice(uint256 tokenId) external view returns (uint256);\\n\\n\\t/// @dev Displays the ad content that is approved by the media owner.\\n\\t/// @param spaceMetadata string of the space metadata\\n\\tfunction display(string memory spaceMetadata)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (string memory, uint256);\\n}\\n\",\"keccak256\":\"0x5852d66c1c377716df5e33f0d416f5083e7209cbc1d7f51593f46bd9ae49b728\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IEventEmitter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Ad.sol\\\";\\n\\n/// @title IEventEmitter - emits events.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface IEventEmitter {\\n\\tfunction emitNewSpace(string memory metadata) external;\\n\\n\\tfunction emitNewPeriod(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tstring memory tokenMetadata,\\n\\t\\tuint256 saleStartTimestamp,\\n\\t\\tuint256 saleEndTimestamp,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\tAd.Pricing pricing,\\n\\t\\tuint256 minPrice\\n\\t) external;\\n\\n\\tfunction emitDeletePeriod(uint256 tokenId) external;\\n\\n\\tfunction emitBuy(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 msgValue,\\n\\t\\taddress msgSender,\\n\\t\\tuint256 blockTimestamp\\n\\t) external;\\n\\n\\tfunction emitBid(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 msgValue,\\n\\t\\taddress msgSender,\\n\\t\\tuint256 blockTimestamp\\n\\t) external;\\n\\n\\tfunction emitBidWithProposal(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 msgValue,\\n\\t\\taddress msgSender,\\n\\t\\tstring memory metadata,\\n\\t\\tuint256 blockTimestamp\\n\\t) external;\\n\\n\\tfunction emitSelectProposal(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 index,\\n\\t\\taddress successfulBidder,\\n\\t\\tstring memory reason\\n\\t) external;\\n\\n\\tfunction emitReceiveToken(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 price,\\n\\t\\taddress buyer,\\n\\t\\tuint256 blockTimestamp\\n\\t) external;\\n\\n\\tfunction emitOfferPeriod(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\taddress sender,\\n\\t\\tuint256 price\\n\\t) external;\\n\\n\\tfunction emitCancelOffer(uint256 tokenId) external;\\n\\n\\tfunction emitAcceptOffer(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tstring memory tokenMetadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\tuint256 price\\n\\t) external;\\n\\n\\tfunction emitWithdraw(uint256 amount) external;\\n\\n\\tfunction emitPropose(uint256 tokenId, string memory metadata) external;\\n\\n\\tfunction emitAcceptProposal(uint256 tokenId, string memory metadata) external;\\n\\n\\tfunction emitDenyProposal(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory metadata,\\n\\t\\tstring memory reason,\\n\\t\\tbool offensive\\n\\t) external;\\n\\n\\tfunction emitTransferCustom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) external;\\n\\n\\tfunction emitNewMedia(\\n\\t\\taddress proxy,\\n\\t\\taddress mediaEOA,\\n\\t\\tstring memory applicationMetadata,\\n\\t\\tstring memory updatableMetadata,\\n\\t\\tuint256 saltNonce\\n\\t) external;\\n\\n\\tfunction emitUpdateMedia(\\n\\t\\taddress proxy,\\n\\t\\taddress mediaEOA,\\n\\t\\tstring memory accountMetadata\\n\\t) external;\\n\\n\\tfunction emitPaymentFailure(address receiver, uint256 price) external;\\n\\n\\tfunction emitReceived(address receiver, uint256 price) external;\\n}\\n\",\"keccak256\":\"0x771735fe921d962611486dfed6cce0050c4a0ba7ece4a28678110ae3b0f67b6c\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IMediaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Ad.sol\\\";\\n\\n/// @title MediaRegistry - registers a list of media accounts.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface IMediaRegistry {\\n\\tstruct Account {\\n\\t\\taddress proxy;\\n\\t\\taddress mediaEOA;\\n\\t\\tstring applicationMetadata;\\n\\t\\tstring updatableMetadata;\\n\\t}\\n\\n\\t/// @dev Returns account info.\\n\\t/// @param proxy address of the proxy contract address\\n\\tfunction allAccounts(address proxy)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\taddress,\\n\\t\\t\\taddress,\\n\\t\\t\\tstring memory,\\n\\t\\t\\tstring memory\\n\\t\\t);\\n\\n\\t/// @dev Adds media account.\\n\\t/// @param proxy address of the proxy contract\\n\\t/// @param applicationMetadata string of constant metadata for the defailts of the account\\n\\t/// @param updatableMetadata string of constant metadata for the defailts of the account\\n\\t/// @param mediaEOA address of the media account\\n\\tfunction addMedia(\\n\\t\\taddress proxy,\\n\\t\\tstring memory applicationMetadata,\\n\\t\\tstring memory updatableMetadata,\\n\\t\\taddress mediaEOA\\n\\t) external;\\n\\n\\t/// @dev Updates media account.\\n\\t/// @param metadata string of the account metadata\\n\\t/// @param mediaEOA address of the media account\\n\\tfunction updateMedia(address mediaEOA, string memory metadata) external;\\n\\n\\tfunction updateApplicationMetadata(address proxy, string memory metadata)\\n\\t\\texternal;\\n\\n\\t/// @dev Returns whether the account has created or not.\\n\\t/// @param proxy address of the proxy contract that represents an account.\\n\\tfunction created(address proxy) external view returns (bool);\\n\\n\\t/// @dev Returns the owner of the account.\\n\\t/// @param proxy address of the proxy contract that represents an account.\\n\\tfunction ownerOf(address proxy) external view returns (address);\\n}\\n\",\"keccak256\":\"0xf60005370edf262e5e68ba96deb5fc8b7a0fcb1546ba8c4a6c1793017389c78b\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/INameRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\n/// @title INameRegistry - saves a set of addresses used in the system.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface INameRegistry {\\n\\t/// @dev Sets the address associated with the key name.\\n\\t///      If the address is the contract, not an EOA, it is\\n\\t///      saved as the allowed contract list.\\n\\t/// @param key bytes32 of the key\\n\\t/// @param value address of the value\\n\\tfunction set(bytes32 key, address value) external;\\n\\n\\t/// @dev Gets the address associated with the key name.\\n\\t/// @param key bytes32 of the key\\n\\tfunction get(bytes32 key) external view returns (address);\\n\\n\\t/// @dev Returns whether or not the address is the one that we deployed.\\n\\t/// @param caller address of the msg.sender\\n\\tfunction allowedContracts(address caller) external returns (bool);\\n\\n\\t/// @dev Gets the deployer of NameRegistry.\\n\\tfunction deployer() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa46fe7c81f01262c7daf69b1d7695a6dd507d5a4ab881dab731e3faa992dcb1d\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOpenBid.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Sale.sol\\\";\\n\\n/// @title IOpenBid\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface IOpenBid {\\n\\t/// @dev Bids to participate in an auction.\\n\\t///      It is defined as an Open Bid.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param proposal string of the metadata hash\\n\\t/// @param sender address of the msg.sender\\n\\t/// @param amount uint256 of the msg.value\\n\\tfunction bid(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory proposal,\\n\\t\\taddress sender,\\n\\t\\tuint256 amount\\n\\t) external;\\n\\n\\t/// @dev Selects the best proposal bidded with.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param index uint256 of the index number\\n\\t/// @param reason string of the reason or metadata\\n\\tfunction selectProposal(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 index,\\n\\t\\tstring memory reason\\n\\t)\\n\\t\\texternal\\n\\t\\treturns (Sale.OpenBid memory selected, Sale.OpenBid[] memory nonSelected);\\n\\n\\tfunction biddingList(uint256 tokenId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (Sale.OpenBid[] memory);\\n\\n\\tfunction bidding(uint256 tokenId, uint256 index)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (Sale.OpenBid memory);\\n}\\n\",\"keccak256\":\"0xf29f1e439017218595e55ea62955bf1f7b93bca8801aea0a8241345af262fd11\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Ad.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nlibrary Ad {\\n\\tuint256 private constant _ID_LENGTH = 100000000000000000000000000000000;\\n\\t// 0.RRP     : Recommended Retail Price\\n\\t// 1.DUTCH   : Dutch Auction\\n\\t// 2.ENGLISH : English Acction\\n\\t// 3.OFFER   : Offered by Others\\n\\t// 4.OPEN    : Open Bid by revealing the content\\n\\tenum Pricing {\\n\\t\\tRRP,\\n\\t\\tDUTCH,\\n\\t\\tENGLISH,\\n\\t\\tOFFER,\\n\\t\\tOPEN\\n\\t}\\n\\tstruct Period {\\n\\t\\taddress mediaProxy;\\n\\t\\tstring spaceMetadata;\\n\\t\\tstring tokenMetadata;\\n\\t\\tuint256 saleStartTimestamp;\\n\\t\\tuint256 saleEndTimestamp;\\n\\t\\tuint256 displayStartTimestamp;\\n\\t\\tuint256 displayEndTimestamp;\\n\\t\\tPricing pricing;\\n\\t\\tuint256 minPrice;\\n\\t\\tuint256 startPrice;\\n\\t\\tbool sold;\\n\\t}\\n\\n\\tfunction id(\\n\\t\\tstring memory metadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp\\n\\t) public pure returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\tuint256(\\n\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\tabi.encodePacked(metadata, displayStartTimestamp, displayEndTimestamp)\\n\\t\\t\\t\\t)\\n\\t\\t\\t) % _ID_LENGTH;\\n\\t}\\n}\\n\",\"keccak256\":\"0x47955874c274fa881de288b6af7d7ea36130caf1d64c6e367316278f6e95fd07\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Purchase.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"./Ad.sol\\\";\\n\\nlibrary Purchase {\\n\\tfunction checkBeforeBuy(Ad.Period memory period, uint256 msgValue)\\n\\t\\tpublic\\n\\t\\tpure\\n\\t{\\n\\t\\trequire(period.pricing == Ad.Pricing.RRP, \\\"KD120\\\");\\n\\t\\trequire(!period.sold, \\\"KD121\\\");\\n\\t\\trequire(period.minPrice == msgValue, \\\"KD122\\\");\\n\\t}\\n\\n\\tfunction checkBeforeBuyBasedOnTime(\\n\\t\\tAd.Period memory period,\\n\\t\\tuint256 currentPrice,\\n\\t\\tuint256 blockTimestamp,\\n\\t\\tuint256 msgValue\\n\\t) public pure {\\n\\t\\trequire(period.pricing == Ad.Pricing.DUTCH, \\\"KD123\\\");\\n\\t\\trequire(!period.sold, \\\"KD121\\\");\\n\\t\\trequire(currentPrice <= msgValue, \\\"KD122\\\");\\n\\t\\trequire(period.saleEndTimestamp >= blockTimestamp, \\\"KD129\\\");\\n\\t}\\n\\n\\tfunction checkBeforeBid(\\n\\t\\tAd.Period memory period,\\n\\t\\tuint256 currentPrice,\\n\\t\\tuint256 blockTimestamp,\\n\\t\\tuint256 msgValue\\n\\t) public pure {\\n\\t\\trequire(period.pricing == Ad.Pricing.ENGLISH, \\\"KD124\\\");\\n\\t\\trequire(!period.sold, \\\"KD121\\\");\\n\\t\\trequire(currentPrice < msgValue, \\\"KD122\\\");\\n\\t\\trequire(period.saleEndTimestamp >= blockTimestamp, \\\"KD129\\\");\\n\\t}\\n\\n\\tfunction checkBeforeBidWithProposal(\\n\\t\\tAd.Period memory period,\\n\\t\\tuint256 blockTimestamp,\\n\\t\\tuint256 msgValue\\n\\t) public pure {\\n\\t\\trequire(period.pricing == Ad.Pricing.OPEN, \\\"KD127\\\");\\n\\t\\trequire(!period.sold, \\\"KD121\\\");\\n\\t\\trequire(period.minPrice <= msgValue, \\\"KD122\\\");\\n\\t\\trequire(period.saleEndTimestamp >= blockTimestamp, \\\"KD129\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0x2d428de10bc0f94c1bf27f95c0daafb364619ecf63d28cae1d0fdf82f238f43f\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Sale.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"./Ad.sol\\\";\\n\\nlibrary Sale {\\n\\tstruct Bidding {\\n\\t\\tuint256 tokenId;\\n\\t\\taddress bidder;\\n\\t\\tuint256 price;\\n\\t}\\n\\tstruct Offer {\\n\\t\\tstring spaceMetadata;\\n\\t\\tuint256 displayStartTimestamp;\\n\\t\\tuint256 displayEndTimestamp;\\n\\t\\taddress sender;\\n\\t\\tuint256 price;\\n\\t}\\n\\tstruct OpenBid {\\n\\t\\tuint256 tokenId;\\n\\t\\taddress sender;\\n\\t\\tuint256 price;\\n\\t\\tstring content;\\n\\t}\\n\\n\\tfunction startPrice(Ad.Period memory period) public pure returns (uint256) {\\n\\t\\tif (period.pricing == Ad.Pricing.RRP) {\\n\\t\\t\\treturn period.minPrice;\\n\\t\\t} else if (period.pricing == Ad.Pricing.DUTCH) {\\n\\t\\t\\treturn period.minPrice * 10;\\n\\t\\t} else if (period.pricing == Ad.Pricing.ENGLISH) {\\n\\t\\t\\treturn period.minPrice;\\n\\t\\t} else if (period.pricing == Ad.Pricing.OFFER) {\\n\\t\\t\\treturn period.minPrice;\\n\\t\\t} else if (period.pricing == Ad.Pricing.OPEN) {\\n\\t\\t\\treturn period.minPrice;\\n\\t\\t} else {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x19a427a8ac429adf4fbe2f2a87c4a95e20c794fb99eaa0baa1ae69257541d9c2\",\"license\":\"UNLICENSED\"},\"contracts/peripheries/OpenBid.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Ad.sol\\\";\\nimport \\\"../libraries/Purchase.sol\\\";\\nimport \\\"../accessors/NameAccessor.sol\\\";\\nimport \\\"../common/BlockTimestamp.sol\\\";\\nimport \\\"../interfaces/IAdPool.sol\\\";\\nimport \\\"../interfaces/IEventEmitter.sol\\\";\\nimport \\\"../interfaces/IOpenBid.sol\\\";\\nimport \\\"../interfaces/IMediaRegistry.sol\\\";\\n\\ncontract OpenBid is IOpenBid, BlockTimestamp, NameAccessor {\\n\\t/// @dev Maps a tokenId with appeal info\\n\\tmapping(uint256 => Sale.OpenBid[]) internal _bidding;\\n\\n\\t/// @dev Maps a tokenId with the reason why the content is selected\\n\\tmapping(uint256 => string) public reasons;\\n\\n\\tmodifier onlyProxies() {\\n\\t\\trequire(_mediaRegistry().ownerOf(msg.sender) != address(0x0), \\\"KD011\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyAdPool() {\\n\\t\\trequire(msg.sender == adPoolAddress(), \\\"KD011\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor(address _nameRegistry) {\\n\\t\\tinitialize(_nameRegistry);\\n\\t}\\n\\n\\t/// @inheritdoc IOpenBid\\n\\tfunction bid(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory proposal,\\n\\t\\taddress sender,\\n\\t\\tuint256 value\\n\\t) external virtual onlyAdPool {\\n\\t\\t_bidding[tokenId].push(Sale.OpenBid(tokenId, sender, value, proposal));\\n\\t\\t_event().emitBidWithProposal(\\n\\t\\t\\ttokenId,\\n\\t\\t\\tvalue,\\n\\t\\t\\tsender,\\n\\t\\t\\tproposal,\\n\\t\\t\\t_blockTimestamp()\\n\\t\\t);\\n\\t}\\n\\n\\t/// @inheritdoc IOpenBid\\n\\tfunction selectProposal(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 index,\\n\\t\\tstring memory reason\\n\\t)\\n\\t\\texternal\\n\\t\\tvirtual\\n\\t\\tonlyProxies\\n\\t\\treturns (Sale.OpenBid memory selected, Sale.OpenBid[] memory nonSelected)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\t_adPool().allPeriods(tokenId).saleEndTimestamp < _blockTimestamp(),\\n\\t\\t\\t\\\"KD129\\\"\\n\\t\\t);\\n\\t\\tselected = bidding(tokenId, index);\\n\\t\\treasons[tokenId] = reason;\\n\\t\\tdelete _bidding[tokenId][index];\\n\\t\\tnonSelected = _bidding[tokenId];\\n\\t\\tdelete _bidding[tokenId];\\n\\t\\t_event().emitSelectProposal(tokenId, index, selected.sender, reason);\\n\\t}\\n\\n\\tfunction biddingList(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (Sale.OpenBid[] memory)\\n\\t{\\n\\t\\treturn _bidding[tokenId];\\n\\t}\\n\\n\\tfunction bidding(uint256 tokenId, uint256 index)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (Sale.OpenBid memory)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\t_bidding[tokenId].length >= index &&\\n\\t\\t\\t\\t_bidding[tokenId][index].sender != address(0),\\n\\t\\t\\t\\\"KD114\\\"\\n\\t\\t);\\n\\t\\treturn _bidding[tokenId][index];\\n\\t}\\n\\n\\t/**\\n\\t * Accessors\\n\\t */\\n\\tfunction _adPool() internal view returns (IAdPool) {\\n\\t\\treturn IAdPool(adPoolAddress());\\n\\t}\\n\\n\\tfunction _event() internal view virtual returns (IEventEmitter) {\\n\\t\\treturn IEventEmitter(eventEmitterAddress());\\n\\t}\\n\\n\\tfunction _mediaRegistry() internal view returns (IMediaRegistry) {\\n\\t\\treturn IMediaRegistry(mediaRegistryAddress());\\n\\t}\\n}\\n\",\"keccak256\":\"0x800450ae6ce8e292fedae7447270333c51835150b075d5f8b6a5415f19509c48\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516114f53803806114f583398101604081905261002f91610050565b600080546001600160a01b0319166001600160a01b03831617905550610080565b60006020828403121561006257600080fd5b81516001600160a01b038116811461007957600080fd5b9392505050565b6114668061008f6000396000f3fe608060405234801561001057600080fd5b50600436106100d05760003560e01c80630106d8eb146100d55780632231c1eb146100f357806327b7a2f5146100fb578063389ad90e1461010c578063430bf08a146101215780636a58767e14610129578063761ce95d146101315780637cf175fb1461015157806387fe412c146101595780638da5cb5b146101795780638f6059d614610181578063b41ace1714610189578063c9cd71b5146101a9578063d82da8fc146101b1578063e2f5fc78146101d2578063f0726291146101da575b600080fd5b6100dd6101e2565b6040516100ea9190610e4e565b60405180910390f35b6100dd610290565b6000546001600160a01b03166100dd565b61011f61011a366004610f63565b6102c1565b005b6100dd610405565b6100dd610434565b61014461013f366004610fc3565b61046b565b6040516100ea91906110d3565b6100dd61059a565b61016c6101673660046110ed565b6105cc565b6040516100ea919061110f565b6100dd610777565b6100dd6107cb565b61019c610197366004610fc3565b610801565b6040516100ea9190611122565b6100dd61089b565b6101c46101bf366004611135565b6108cb565b6040516100ea929190611184565b6100dd610c5e565b6100dd610c96565b600080546040516d22b733b634b9b420bab1ba34b7b760911b60208201526001600160a01b0390911690638eaa6ac090602e015b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161024a91815260200190565b602060405180830381865afa158015610267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028b91906111c2565b905090565b600080546040516613dc195b909a5960ca1b60208201526001600160a01b0390911690638eaa6ac090602701610216565b6102c961089b565b6001600160a01b0316336001600160a01b0316146103025760405162461bcd60e51b81526004016102f9906111df565b60405180910390fd5b600084815260016020818152604080842081516080810183528981526001600160a01b03888116828601908152938201888152606083018b815284548089018655948952978690208351600490950201938455935195830180546001600160a01b0319169690911695909517909455905160028201559251805192939261038f9260038501920190610cea565b50505061039a610ccc565b6001600160a01b0316630d2657bf85838587426040518663ffffffff1660e01b81526004016103cd9594939291906111fe565b600060405180830381600087803b1580156103e757600080fd5b505af11580156103fb573d6000803e3d6000fd5b5050505050505050565b600080546040516415985d5b1d60da1b60208201526001600160a01b0390911690638eaa6ac090602501610216565b600080546040516c4d65646961526567697374727960981b60208201526001600160a01b0390911690638eaa6ac090602d01610216565b606060016000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561058f57600084815260209081902060408051608081018252600486029092018054835260018101546001600160a01b0316938301939093526002830154908201526003820180549192916060840191906104fe9061123d565b80601f016020809104026020016040519081016040528092919081815260200182805461052a9061123d565b80156105775780601f1061054c57610100808354040283529160200191610577565b820191906000526020600020905b81548152906001019060200180831161055a57829003601f168201915b505050505081525050815260200190600101906104a0565b505050509050919050565b600080546040516713d999995c909a5960c21b60208201526001600160a01b0390911690638eaa6ac090602801610216565b6105d4610d6e565b600083815260016020526040902054821180159061062d5750600083815260016020526040812080548490811061060d5761060d611278565b60009182526020909120600160049092020101546001600160a01b031614155b6106615760405162461bcd60e51b815260206004820152600560248201526412d10c4c4d60da1b60448201526064016102f9565b600083815260016020526040902080548390811061068157610681611278565b9060005260206000209060040201604051806080016040529081600082015481526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600282015481526020016003820180546106ed9061123d565b80601f01602080910402602001604051908101604052809291908181526020018280546107199061123d565b80156107665780601f1061073b57610100808354040283529160200191610766565b820191906000526020600020905b81548152906001019060200180831161074957829003601f168201915b505050505081525050905092915050565b60008060009054906101000a90046001600160a01b03166001600160a01b031663d5f394886040518163ffffffff1660e01b8152600401602060405180830381865afa158015610267573d6000803e3d6000fd5b600080546040516b4d65646961466163746f727960a01b60208201526001600160a01b0390911690638eaa6ac090602c01610216565b6002602052600090815260409020805461081a9061123d565b80601f01602080910402602001604051908101604052809291908181526020018280546108469061123d565b80156108935780601f1061086857610100808354040283529160200191610893565b820191906000526020600020905b81548152906001019060200180831161087657829003601f168201915b505050505081565b60008054604051651059141bdbdb60d21b60208201526001600160a01b0390911690638eaa6ac090602601610216565b6108d3610d6e565b606060006108df610cd6565b6001600160a01b03166314afd79e336040518263ffffffff1660e01b815260040161090a9190610e4e565b602060405180830381865afa158015610927573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094b91906111c2565b6001600160a01b031614156109725760405162461bcd60e51b81526004016102f9906111df565b4261097b610ce0565b6001600160a01b031663b3a0ebc9876040518263ffffffff1660e01b81526004016109a891815260200190565b600060405180830381865afa1580156109c5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109ed91908101906112f2565b6080015110610a265760405162461bcd60e51b81526020600482015260056024820152644b4431323960d81b60448201526064016102f9565b610a3085856105cc565b60008681526002602090815260409091208551929450610a54929091860190610cea565b506000858152600160205260409020805485908110610a7557610a75611278565b6000918252602082206004909102018181556001810180546001600160a01b03191690556002810182905590610aae6003830182610d9f565b5050600085815260016020908152604080832080548251818502810185019093528083529193909284015b82821015610bc857600084815260209081902060408051608081018252600486029092018054835260018101546001600160a01b031693830193909352600283015490820152600382018054919291606084019190610b379061123d565b80601f0160208091040260200160405190810160405280929190818152602001828054610b639061123d565b8015610bb05780601f10610b8557610100808354040283529160200191610bb0565b820191906000526020600020905b815481529060010190602001808311610b9357829003601f168201915b50505050508152505081526020019060010190610ad9565b5050506000878152600160205260408120929350610be7929150610ddc565b610bef610ccc565b6001600160a01b031663ea41e68f86868560200151876040518563ffffffff1660e01b8152600401610c2494939291906113f9565b600060405180830381600087803b158015610c3e57600080fd5b505af1158015610c52573d6000803e3d6000fd5b50505050935093915050565b600080546040516d50726f706f73616c52657669657760901b60208201526001600160a01b0390911690638eaa6ac090602e01610216565b600080546040516b22bb32b73a22b6b4ba3a32b960a11b60208201526001600160a01b0390911690638eaa6ac090602c01610216565b600061028b610c96565b600061028b610434565b600061028b61089b565b828054610cf69061123d565b90600052602060002090601f016020900481019282610d185760008555610d5e565b82601f10610d3157805160ff1916838001178555610d5e565b82800160010185558215610d5e579182015b82811115610d5e578251825591602001919060010190610d43565b50610d6a929150610dfd565b5090565b60405180608001604052806000815260200160006001600160a01b0316815260200160008152602001606081525090565b508054610dab9061123d565b6000825580601f10610dbb575050565b601f016020900490600052602060002090810190610dd99190610dfd565b50565b5080546000825560040290600052602060002090810190610dd99190610e12565b5b80821115610d6a5760008155600101610dfe565b80821115610d6a5760008082556001820180546001600160a01b031916905560028201819055610e456003830182610d9f565b50600401610e12565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b0381118282101715610e9b57610e9b610e62565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610ec957610ec9610e62565b604052919050565b60006001600160401b03821115610eea57610eea610e62565b50601f01601f191660200190565b600082601f830112610f0957600080fd5b8135610f1c610f1782610ed1565b610ea1565b818152846020838601011115610f3157600080fd5b816020850160208301376000918101602001919091529392505050565b6001600160a01b0381168114610dd957600080fd5b60008060008060808587031215610f7957600080fd5b8435935060208501356001600160401b03811115610f9657600080fd5b610fa287828801610ef8565b9350506040850135610fb381610f4e565b9396929550929360600135925050565b600060208284031215610fd557600080fd5b5035919050565b60005b83811015610ff7578181015183820152602001610fdf565b83811115611006576000848401525b50505050565b60008151808452611024816020860160208601610fdc565b601f01601f19169290920160200192915050565b8051825260018060a01b036020820151166020830152604081015160408301526000606082015160806060850152611073608085018261100c565b949350505050565b600082825180855260208086019550808260051b84010181860160005b848110156110c657601f198684030189526110b4838351611038565b98840198925090830190600101611098565b5090979650505050505050565b6020815260006110e6602083018461107b565b9392505050565b6000806040838503121561110057600080fd5b50508035926020909101359150565b6020815260006110e66020830184611038565b6020815260006110e6602083018461100c565b60008060006060848603121561114a57600080fd5b833592506020840135915060408401356001600160401b0381111561116e57600080fd5b61117a86828701610ef8565b9150509250925092565b6040815260006111976040830185611038565b82810360208401526111a9818561107b565b95945050505050565b80516111bd81610f4e565b919050565b6000602082840312156111d457600080fd5b81516110e681610f4e565b6020808252600590820152644b4430313160d81b604082015260600190565b85815284602082015260018060a01b038416604082015260a06060820152600061122b60a083018561100c565b90508260808301529695505050505050565b600181811c9082168061125157607f821691505b6020821081141561127257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b600082601f83011261129f57600080fd5b81516112ad610f1782610ed1565b8181528460208386010111156112c257600080fd5b611073826020830160208701610fdc565b8051600581106111bd57600080fd5b805180151581146111bd57600080fd5b60006020828403121561130457600080fd5b81516001600160401b038082111561131b57600080fd5b90830190610160828603121561133057600080fd5b611338610e78565b611341836111b2565b815260208301518281111561135557600080fd5b6113618782860161128e565b60208301525060408301518281111561137957600080fd5b6113858782860161128e565b604083015250606083015160608201526080830151608082015260a083015160a082015260c083015160c08201526113bf60e084016112d3565b60e08201526101008381015190820152610120808401519082015261014091506113ea8284016112e2565b91810191909152949350505050565b84815283602082015260018060a01b0383166040820152608060608201526000611426608083018461100c565b969550505050505056fea2646970667358221220c3f5ac512ddbfeef4996f3ece1393e8b816934c1bc568d636cd1d5572a1445fd64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d05760003560e01c80630106d8eb146100d55780632231c1eb146100f357806327b7a2f5146100fb578063389ad90e1461010c578063430bf08a146101215780636a58767e14610129578063761ce95d146101315780637cf175fb1461015157806387fe412c146101595780638da5cb5b146101795780638f6059d614610181578063b41ace1714610189578063c9cd71b5146101a9578063d82da8fc146101b1578063e2f5fc78146101d2578063f0726291146101da575b600080fd5b6100dd6101e2565b6040516100ea9190610e4e565b60405180910390f35b6100dd610290565b6000546001600160a01b03166100dd565b61011f61011a366004610f63565b6102c1565b005b6100dd610405565b6100dd610434565b61014461013f366004610fc3565b61046b565b6040516100ea91906110d3565b6100dd61059a565b61016c6101673660046110ed565b6105cc565b6040516100ea919061110f565b6100dd610777565b6100dd6107cb565b61019c610197366004610fc3565b610801565b6040516100ea9190611122565b6100dd61089b565b6101c46101bf366004611135565b6108cb565b6040516100ea929190611184565b6100dd610c5e565b6100dd610c96565b600080546040516d22b733b634b9b420bab1ba34b7b760911b60208201526001600160a01b0390911690638eaa6ac090602e015b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161024a91815260200190565b602060405180830381865afa158015610267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028b91906111c2565b905090565b600080546040516613dc195b909a5960ca1b60208201526001600160a01b0390911690638eaa6ac090602701610216565b6102c961089b565b6001600160a01b0316336001600160a01b0316146103025760405162461bcd60e51b81526004016102f9906111df565b60405180910390fd5b600084815260016020818152604080842081516080810183528981526001600160a01b03888116828601908152938201888152606083018b815284548089018655948952978690208351600490950201938455935195830180546001600160a01b0319169690911695909517909455905160028201559251805192939261038f9260038501920190610cea565b50505061039a610ccc565b6001600160a01b0316630d2657bf85838587426040518663ffffffff1660e01b81526004016103cd9594939291906111fe565b600060405180830381600087803b1580156103e757600080fd5b505af11580156103fb573d6000803e3d6000fd5b5050505050505050565b600080546040516415985d5b1d60da1b60208201526001600160a01b0390911690638eaa6ac090602501610216565b600080546040516c4d65646961526567697374727960981b60208201526001600160a01b0390911690638eaa6ac090602d01610216565b606060016000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561058f57600084815260209081902060408051608081018252600486029092018054835260018101546001600160a01b0316938301939093526002830154908201526003820180549192916060840191906104fe9061123d565b80601f016020809104026020016040519081016040528092919081815260200182805461052a9061123d565b80156105775780601f1061054c57610100808354040283529160200191610577565b820191906000526020600020905b81548152906001019060200180831161055a57829003601f168201915b505050505081525050815260200190600101906104a0565b505050509050919050565b600080546040516713d999995c909a5960c21b60208201526001600160a01b0390911690638eaa6ac090602801610216565b6105d4610d6e565b600083815260016020526040902054821180159061062d5750600083815260016020526040812080548490811061060d5761060d611278565b60009182526020909120600160049092020101546001600160a01b031614155b6106615760405162461bcd60e51b815260206004820152600560248201526412d10c4c4d60da1b60448201526064016102f9565b600083815260016020526040902080548390811061068157610681611278565b9060005260206000209060040201604051806080016040529081600082015481526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600282015481526020016003820180546106ed9061123d565b80601f01602080910402602001604051908101604052809291908181526020018280546107199061123d565b80156107665780601f1061073b57610100808354040283529160200191610766565b820191906000526020600020905b81548152906001019060200180831161074957829003601f168201915b505050505081525050905092915050565b60008060009054906101000a90046001600160a01b03166001600160a01b031663d5f394886040518163ffffffff1660e01b8152600401602060405180830381865afa158015610267573d6000803e3d6000fd5b600080546040516b4d65646961466163746f727960a01b60208201526001600160a01b0390911690638eaa6ac090602c01610216565b6002602052600090815260409020805461081a9061123d565b80601f01602080910402602001604051908101604052809291908181526020018280546108469061123d565b80156108935780601f1061086857610100808354040283529160200191610893565b820191906000526020600020905b81548152906001019060200180831161087657829003601f168201915b505050505081565b60008054604051651059141bdbdb60d21b60208201526001600160a01b0390911690638eaa6ac090602601610216565b6108d3610d6e565b606060006108df610cd6565b6001600160a01b03166314afd79e336040518263ffffffff1660e01b815260040161090a9190610e4e565b602060405180830381865afa158015610927573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094b91906111c2565b6001600160a01b031614156109725760405162461bcd60e51b81526004016102f9906111df565b4261097b610ce0565b6001600160a01b031663b3a0ebc9876040518263ffffffff1660e01b81526004016109a891815260200190565b600060405180830381865afa1580156109c5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109ed91908101906112f2565b6080015110610a265760405162461bcd60e51b81526020600482015260056024820152644b4431323960d81b60448201526064016102f9565b610a3085856105cc565b60008681526002602090815260409091208551929450610a54929091860190610cea565b506000858152600160205260409020805485908110610a7557610a75611278565b6000918252602082206004909102018181556001810180546001600160a01b03191690556002810182905590610aae6003830182610d9f565b5050600085815260016020908152604080832080548251818502810185019093528083529193909284015b82821015610bc857600084815260209081902060408051608081018252600486029092018054835260018101546001600160a01b031693830193909352600283015490820152600382018054919291606084019190610b379061123d565b80601f0160208091040260200160405190810160405280929190818152602001828054610b639061123d565b8015610bb05780601f10610b8557610100808354040283529160200191610bb0565b820191906000526020600020905b815481529060010190602001808311610b9357829003601f168201915b50505050508152505081526020019060010190610ad9565b5050506000878152600160205260408120929350610be7929150610ddc565b610bef610ccc565b6001600160a01b031663ea41e68f86868560200151876040518563ffffffff1660e01b8152600401610c2494939291906113f9565b600060405180830381600087803b158015610c3e57600080fd5b505af1158015610c52573d6000803e3d6000fd5b50505050935093915050565b600080546040516d50726f706f73616c52657669657760901b60208201526001600160a01b0390911690638eaa6ac090602e01610216565b600080546040516b22bb32b73a22b6b4ba3a32b960a11b60208201526001600160a01b0390911690638eaa6ac090602c01610216565b600061028b610c96565b600061028b610434565b600061028b61089b565b828054610cf69061123d565b90600052602060002090601f016020900481019282610d185760008555610d5e565b82601f10610d3157805160ff1916838001178555610d5e565b82800160010185558215610d5e579182015b82811115610d5e578251825591602001919060010190610d43565b50610d6a929150610dfd565b5090565b60405180608001604052806000815260200160006001600160a01b0316815260200160008152602001606081525090565b508054610dab9061123d565b6000825580601f10610dbb575050565b601f016020900490600052602060002090810190610dd99190610dfd565b50565b5080546000825560040290600052602060002090810190610dd99190610e12565b5b80821115610d6a5760008155600101610dfe565b80821115610d6a5760008082556001820180546001600160a01b031916905560028201819055610e456003830182610d9f565b50600401610e12565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b0381118282101715610e9b57610e9b610e62565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610ec957610ec9610e62565b604052919050565b60006001600160401b03821115610eea57610eea610e62565b50601f01601f191660200190565b600082601f830112610f0957600080fd5b8135610f1c610f1782610ed1565b610ea1565b818152846020838601011115610f3157600080fd5b816020850160208301376000918101602001919091529392505050565b6001600160a01b0381168114610dd957600080fd5b60008060008060808587031215610f7957600080fd5b8435935060208501356001600160401b03811115610f9657600080fd5b610fa287828801610ef8565b9350506040850135610fb381610f4e565b9396929550929360600135925050565b600060208284031215610fd557600080fd5b5035919050565b60005b83811015610ff7578181015183820152602001610fdf565b83811115611006576000848401525b50505050565b60008151808452611024816020860160208601610fdc565b601f01601f19169290920160200192915050565b8051825260018060a01b036020820151166020830152604081015160408301526000606082015160806060850152611073608085018261100c565b949350505050565b600082825180855260208086019550808260051b84010181860160005b848110156110c657601f198684030189526110b4838351611038565b98840198925090830190600101611098565b5090979650505050505050565b6020815260006110e6602083018461107b565b9392505050565b6000806040838503121561110057600080fd5b50508035926020909101359150565b6020815260006110e66020830184611038565b6020815260006110e6602083018461100c565b60008060006060848603121561114a57600080fd5b833592506020840135915060408401356001600160401b0381111561116e57600080fd5b61117a86828701610ef8565b9150509250925092565b6040815260006111976040830185611038565b82810360208401526111a9818561107b565b95945050505050565b80516111bd81610f4e565b919050565b6000602082840312156111d457600080fd5b81516110e681610f4e565b6020808252600590820152644b4430313160d81b604082015260600190565b85815284602082015260018060a01b038416604082015260a06060820152600061122b60a083018561100c565b90508260808301529695505050505050565b600181811c9082168061125157607f821691505b6020821081141561127257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b600082601f83011261129f57600080fd5b81516112ad610f1782610ed1565b8181528460208386010111156112c257600080fd5b611073826020830160208701610fdc565b8051600581106111bd57600080fd5b805180151581146111bd57600080fd5b60006020828403121561130457600080fd5b81516001600160401b038082111561131b57600080fd5b90830190610160828603121561133057600080fd5b611338610e78565b611341836111b2565b815260208301518281111561135557600080fd5b6113618782860161128e565b60208301525060408301518281111561137957600080fd5b6113858782860161128e565b604083015250606083015160608201526080830151608082015260a083015160a082015260c083015160c08201526113bf60e084016112d3565b60e08201526101008381015190820152610120808401519082015261014091506113ea8284016112e2565b91810191909152949350505050565b84815283602082015260018060a01b0383166040820152608060608201526000611426608083018461100c565b969550505050505056fea2646970667358221220c3f5ac512ddbfeef4996f3ece1393e8b816934c1bc568d636cd1d5572a1445fd64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "adPoolAddress()": {
        "details": "Gets the address of AdPool."
      },
      "bid(uint256,string,address,uint256)": {
        "details": "Bids to participate in an auction.      It is defined as an Open Bid.",
        "params": {
          "amount": "uint256 of the msg.value",
          "proposal": "string of the metadata hash",
          "sender": "address of the msg.sender",
          "tokenId": "uint256 of the token ID"
        }
      },
      "englishAuctionAddress()": {
        "details": "Gets the address of EnglishAuction."
      },
      "eventEmitterAddress()": {
        "details": "Gets the address of EventEmitter."
      },
      "mediaFactoryAddress()": {
        "details": "Gets the address of MediaFactory."
      },
      "mediaRegistryAddress()": {
        "details": "Gets the address of MediaRegistry."
      },
      "nameRegistryAddress()": {
        "details": "Gets the address of NameRegistry"
      },
      "offerBidAddress()": {
        "details": "Gets the address of OfferBid."
      },
      "openBidAddress()": {
        "details": "Gets the address of OpenBid."
      },
      "owner()": {
        "details": "Gets the owner address."
      },
      "proposalReviewAddress()": {
        "details": "Gets the address of ProposalReview."
      },
      "selectProposal(uint256,uint256,string)": {
        "details": "Selects the best proposal bidded with.",
        "params": {
          "index": "uint256 of the index number",
          "reason": "string of the reason or metadata",
          "tokenId": "uint256 of the token ID"
        }
      },
      "vaultAddress()": {
        "details": "Gets the address of Vault."
      }
    },
    "stateVariables": {
      "_bidding": {
        "details": "Maps a tokenId with appeal info"
      },
      "reasons": {
        "details": "Maps a tokenId with the reason why the content is selected"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1889,
        "contract": "contracts/peripheries/OpenBid.sol:OpenBid",
        "label": "_nameRegistry",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(INameRegistry)3999"
      },
      {
        "astId": 6926,
        "contract": "contracts/peripheries/OpenBid.sol:OpenBid",
        "label": "_bidding",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_array(t_struct(OpenBid)4429_storage)dyn_storage)"
      },
      {
        "astId": 6931,
        "contract": "contracts/peripheries/OpenBid.sol:OpenBid",
        "label": "reasons",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(OpenBid)4429_storage)dyn_storage": {
        "base": "t_struct(OpenBid)4429_storage",
        "encoding": "dynamic_array",
        "label": "struct Sale.OpenBid[]",
        "numberOfBytes": "32"
      },
      "t_contract(INameRegistry)3999": {
        "encoding": "inplace",
        "label": "contract INameRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_array(t_struct(OpenBid)4429_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Sale.OpenBid[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(OpenBid)4429_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(OpenBid)4429_storage": {
        "encoding": "inplace",
        "label": "struct Sale.OpenBid",
        "members": [
          {
            "astId": 4422,
            "contract": "contracts/peripheries/OpenBid.sol:OpenBid",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4424,
            "contract": "contracts/peripheries/OpenBid.sol:OpenBid",
            "label": "sender",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4426,
            "contract": "contracts/peripheries/OpenBid.sol:OpenBid",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4428,
            "contract": "contracts/peripheries/OpenBid.sol:OpenBid",
            "label": "content",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}