{
  "address": "0xf642F9BCD144782623E91594ac605ddf756C23BA",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "acceptProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "accepted",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "spaceMetadata",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "displayStartTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "displayEndTimestamp",
          "type": "uint256"
        }
      ],
      "name": "adId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "appealed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "proposalMetadata",
          "type": "string"
        }
      ],
      "name": "bidWithProposal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "currentPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "deletePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deniedReasons",
      "outputs": [
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "offensive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "offensive",
          "type": "bool"
        }
      ],
      "name": "denyProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "spaceMetadata",
          "type": "string"
        }
      ],
      "name": "display",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eventEmitterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "nameRegistry",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mediaFactoryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mediaRegistryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nameRegistryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "spaceMetadata",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenMetadata",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "saleEndTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "displayStartTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "displayEndTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum Ad.Pricing",
          "name": "pricing",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        }
      ],
      "name": "newPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "spaceMetadata",
          "type": "string"
        }
      ],
      "name": "newSpace",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "periods",
      "outputs": [
        {
          "internalType": "address",
          "name": "mediaProxy",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "spaceMetadata",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenMetadata",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "saleStartTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "saleEndTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "displayStartTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "displayEndTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum Ad.Pricing",
          "name": "pricing",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "sold",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "propose",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposed",
      "outputs": [
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "selectProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "spaced",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "spaceMetadata",
          "type": "string"
        }
      ],
      "name": "tokenIdsOf",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newMediaEOA",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "newMetadata",
          "type": "string"
        }
      ],
      "name": "updateMedia",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x03baaec668f1db0263e3429b3a1cc32cba29658a8552b823a6c9d89db1f36b3f",
  "receipt": {
    "to": null,
    "from": "0xCdfc500F7f0FCe1278aECb0340b523cD55b3EBbb",
    "contractAddress": "0xf642F9BCD144782623E91594ac605ddf756C23BA",
    "transactionIndex": 1,
    "gasUsed": "5044405",
    "logsBloom": "0x
    "blockHash": "0x99e5e9c548b5516bf7d1089dc8399827eecdbb8ecc8455e494c67ac9b33803ab",
    "transactionHash": "0x03baaec668f1db0263e3429b3a1cc32cba29658a8552b823a6c9d89db1f36b3f",
    "logs": [],
    "blockNumber": 9753482,
    "cumulativeGasUsed": "5072005",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "d3d38aa74a09225e7603340a0e8b265f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"acceptProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accepted\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"spaceMetadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"displayStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"displayEndTimestamp\",\"type\":\"uint256\"}],\"name\":\"adId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"appealed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proposalMetadata\",\"type\":\"string\"}],\"name\":\"bidWithProposal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"deletePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deniedReasons\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"offensive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"offensive\",\"type\":\"bool\"}],\"name\":\"denyProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"spaceMetadata\",\"type\":\"string\"}],\"name\":\"display\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventEmitterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"nameRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mediaFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mediaRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"spaceMetadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenMetadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"saleEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"displayStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"displayEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum Ad.Pricing\",\"name\":\"pricing\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"}],\"name\":\"newPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"spaceMetadata\",\"type\":\"string\"}],\"name\":\"newSpace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"periods\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"mediaProxy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"spaceMetadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenMetadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"saleStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"displayStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"displayEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum Ad.Pricing\",\"name\":\"pricing\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sold\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposed\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"selectProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"spaced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"spaceMetadata\",\"type\":\"string\"}],\"name\":\"tokenIdsOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMediaEOA\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newMetadata\",\"type\":\"string\"}],\"name\":\"updateMedia\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Shumpei Koike - <shumpei.koike@bridges.inc>\",\"kind\":\"dev\",\"methods\":{\"acceptProposal(uint256)\":{\"details\":\"Accepts the proposal.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"adId(string,uint256,uint256)\":{\"details\":\"Returns ID based on the space metadata, display start timestamp, and      display end timestamp. These three makes it the unique.\",\"params\":{\"displayEndTimestamp\":\"uint256 of the end timestamp for the display\",\"displayStartTimestamp\":\"uint256 of the start timestamp for the display\",\"spaceMetadata\":\"uint256 of the space metadata\"}},\"adPoolAddress()\":{\"details\":\"Gets the address of AdPool.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balance()\":{\"details\":\"Returns the balacne deposited on the proxy contract.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"bidWithProposal(uint256,string)\":{\"details\":\"Bids to participate in an auction.      It is defined as an Open Bid.\",\"params\":{\"proposalMetadata\":\"string of the metadata hash\",\"tokenId\":\"uint256 of the token ID\"}},\"buy(uint256)\":{\"details\":\"Buys the token that is defined as the specific period on an ad space.      The price of the token is fixed.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"currentPrice(uint256)\":{\"details\":\"Returns the current price.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"deletePeriod(uint256)\":{\"details\":\"Deletes a period and its token.      If there is any users locking the fund for the sale, the amount would be transfered      to the user when deleting the period.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"denyProposal(uint256,string,bool)\":{\"details\":\"Denies the submitted proposal, mentioning what is the problem.\",\"params\":{\"offensive\":\"bool if the content would offend somebody\",\"reason\":\"string of the reason why it is rejected\",\"tokenId\":\"uint256 of the token ID\"}},\"display(string)\":{\"details\":\"Displays the ad content that is approved by the media owner.\",\"params\":{\"spaceMetadata\":\"string of the space metadata\"}},\"eventEmitterAddress()\":{\"details\":\"Gets the address of EventEmitter.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"initialize(string,string,address)\":{\"details\":\"Initialize the instance.\",\"params\":{\"baseURI\":\"string of the base URI\",\"nameRegistry\":\"address of NameRegistry\",\"title\":\"string of the title of the instance\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mediaFactoryAddress()\":{\"details\":\"Gets the address of MediaFactory.\"},\"mediaRegistryAddress()\":{\"details\":\"Gets the address of MediaRegistry.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"nameRegistryAddress()\":{\"details\":\"Gets the address of NameRegistry\"},\"newPeriod(string,string,uint256,uint256,uint256,uint8,uint256)\":{\"details\":\"Create a new period for a space. This function requires some params      to decide which kinds of pricing way and how much price to get started.\",\"params\":{\"displayEndTimestamp\":\"uint256 of the end timestamp for the display\",\"displayStartTimestamp\":\"uint256 of the start timestamp for the display\",\"minPrice\":\"uint256 of the minimum price to sell it out\",\"pricing\":\"uint256 of the pricing way\",\"saleEndTimestamp\":\"uint256 of the end timestamp for the sale\",\"spaceMetadata\":\"string of the space metadata\",\"tokenMetadata\":\"string of the token metadata\"}},\"newSpace(string)\":{\"details\":\"Creates a new space for the media account.\",\"params\":{\"spaceMetadata\":\"string of the space metadata\"}},\"owner()\":{\"details\":\"Gets the owner address.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"propose(uint256,string)\":{\"details\":\"Proposes the metadata to the token you bought.      Users can propose many times as long as it is accepted.\",\"params\":{\"metadata\":\"string of the proposal metadata\",\"tokenId\":\"uint256 of the token ID\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Overrides transferFrom to emit an event from the common emitter.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"selectProposal(uint256,uint256)\":{\"details\":\"Selects the best proposal bidded with.\",\"params\":{\"index\":\"uint256 of the index number\",\"tokenId\":\"uint256 of the token ID\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenIdsOf(string)\":{\"details\":\"Returns tokenIds tied with the space metadata\",\"params\":{\"spaceMetadata\":\"string of the space metadata\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Overrides transferFrom to emit an event from the common emitter.\"},\"updateMedia(address,string)\":{\"details\":\"Updates the media EOA and the metadata.\",\"params\":{\"newMediaEOA\":\"address of a new EOA\",\"newMetadata\":\"string of a new metadata\"}},\"vaultAddress()\":{\"details\":\"Gets the address of Vault.\"},\"withdraw()\":{\"details\":\"Withdraws the fund deposited to the proxy contract.      If you put 0 as the amount, you can withdraw as much as possible.\"},\"withdrawalAmount()\":{\"details\":\"Returns the withdrawal amount.\"}},\"title\":\"AdManager - manages ad spaces and its periods to sell them to users.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AdManager.sol\":\"AdManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"contracts/AdManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./base/PrimarySales.sol\\\";\\nimport \\\"./base/DistributionRight.sol\\\";\\n\\n/// @title AdManager - manages ad spaces and its periods to sell them to users.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ncontract AdManager is DistributionRight, PrimarySales, ReentrancyGuard {\\n\\t/// @dev Can call it by only the media\\n\\tmodifier onlyMedia() {\\n\\t\\trequire(_mediaRegistry().ownerOf(address(this)) == msg.sender, \\\"KD012\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Prevents the media from calling by yourself\\n\\tmodifier exceptYourself() {\\n\\t\\trequire(_mediaRegistry().ownerOf(address(this)) != msg.sender, \\\"KD014\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t// /// @dev Called by the successful bidder\\n\\t// modifier onlySuccessfulBidder(uint256 tokenId) {\\n\\t// \\trequire(bidding[tokenId].bidder == msg.sender, \\\"KD126\\\");\\n\\t// \\t_;\\n\\t// }\\n\\n\\t/// @dev Can call it only once\\n\\tmodifier initializer() {\\n\\t\\trequire(address(_nameRegistry) == address(0x0), \\\"AR000\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Initialize the instance.\\n\\t/// @param title string of the title of the instance\\n\\t/// @param baseURI string of the base URI\\n\\t/// @param nameRegistry address of NameRegistry\\n\\tfunction initialize(\\n\\t\\tstring memory title,\\n\\t\\tstring memory baseURI,\\n\\t\\taddress nameRegistry\\n\\t) external virtual {\\n\\t\\t_name = title;\\n\\t\\t_symbol = string(abi.encodePacked(\\\"Kaleido_\\\", title));\\n\\t\\t_baseURI = baseURI;\\n\\t\\tinitialize(nameRegistry);\\n\\t}\\n\\n\\t/// @dev Updates the media EOA and the metadata.\\n\\t/// @param newMediaEOA address of a new EOA\\n\\t/// @param newMetadata string of a new metadata\\n\\tfunction updateMedia(address newMediaEOA, string memory newMetadata)\\n\\t\\texternal\\n\\t\\tvirtual\\n\\t\\tonlyMedia\\n\\t{\\n\\t\\t_mediaRegistry().updateMedia(newMediaEOA, newMetadata);\\n\\t\\t_eventEmitter().emitUpdateMedia(address(this), newMediaEOA, newMetadata);\\n\\t}\\n\\n\\t/// @dev Creates a new space for the media account.\\n\\t/// @param spaceMetadata string of the space metadata\\n\\tfunction newSpace(string memory spaceMetadata) external virtual onlyMedia {\\n\\t\\t_newSpace(spaceMetadata);\\n\\t}\\n\\n\\t/// @dev Create a new period for a space. This function requires some params\\n\\t///      to decide which kinds of pricing way and how much price to get started.\\n\\t/// @param spaceMetadata string of the space metadata\\n\\t/// @param tokenMetadata string of the token metadata\\n\\t/// @param saleEndTimestamp uint256 of the end timestamp for the sale\\n\\t/// @param displayStartTimestamp uint256 of the start timestamp for the display\\n\\t/// @param displayEndTimestamp uint256 of the end timestamp for the display\\n\\t/// @param pricing uint256 of the pricing way\\n\\t/// @param minPrice uint256 of the minimum price to sell it out\\n\\tfunction newPeriod(\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tstring memory tokenMetadata,\\n\\t\\tuint256 saleEndTimestamp,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\tAd.Pricing pricing,\\n\\t\\tuint256 minPrice\\n\\t) external virtual onlyMedia {\\n\\t\\trequire(saleEndTimestamp > _blockTimestamp(), \\\"KD111\\\");\\n\\t\\trequire(saleEndTimestamp < displayStartTimestamp, \\\"KD112\\\");\\n\\t\\trequire(displayStartTimestamp < displayEndTimestamp, \\\"KD113\\\");\\n\\n\\t\\tif (!spaced[spaceMetadata]) {\\n\\t\\t\\t_newSpace(spaceMetadata);\\n\\t\\t}\\n\\t\\t_checkOverlapping(\\n\\t\\t\\tspaceMetadata,\\n\\t\\t\\tdisplayStartTimestamp,\\n\\t\\t\\tdisplayEndTimestamp\\n\\t\\t);\\n\\t\\tuint256 tokenId = Ad.id(\\n\\t\\t\\tspaceMetadata,\\n\\t\\t\\tdisplayStartTimestamp,\\n\\t\\t\\tdisplayEndTimestamp\\n\\t\\t);\\n\\t\\tAd.Period memory period = Ad.Period(\\n\\t\\t\\taddress(this),\\n\\t\\t\\tspaceMetadata,\\n\\t\\t\\ttokenMetadata,\\n\\t\\t\\t_blockTimestamp(),\\n\\t\\t\\tsaleEndTimestamp,\\n\\t\\t\\tdisplayStartTimestamp,\\n\\t\\t\\tdisplayEndTimestamp,\\n\\t\\t\\tpricing,\\n\\t\\t\\tminPrice,\\n\\t\\t\\t0,\\n\\t\\t\\tfalse\\n\\t\\t);\\n\\t\\tperiod.startPrice = Sale._startPrice(period);\\n\\t\\t_savePeriod(spaceMetadata, tokenId, period);\\n\\t\\t_mintRight(address(this), tokenId, tokenMetadata);\\n\\t\\t_eventEmitter().emitNewPeriod(\\n\\t\\t\\ttokenId,\\n\\t\\t\\tspaceMetadata,\\n\\t\\t\\ttokenMetadata,\\n\\t\\t\\t_blockTimestamp(),\\n\\t\\t\\tsaleEndTimestamp,\\n\\t\\t\\tdisplayStartTimestamp,\\n\\t\\t\\tdisplayEndTimestamp,\\n\\t\\t\\tpricing,\\n\\t\\t\\tminPrice\\n\\t\\t);\\n\\t\\t_eventEmitter().emitTransferCustom(address(0), address(this), tokenId);\\n\\t}\\n\\n\\t/// @dev Deletes a period and its token.\\n\\t///      If there is any users locking the fund for the sale, the amount would be transfered\\n\\t///      to the user when deleting the period.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction deletePeriod(uint256 tokenId) external virtual onlyMedia {\\n\\t\\trequire(periods[tokenId].mediaProxy != address(0), \\\"KD114\\\");\\n\\t\\trequire(ownerOf(tokenId) == address(this), \\\"KD121\\\");\\n\\t\\trequire(!_alreadyBid(tokenId), \\\"KD128\\\");\\n\\t\\t_burnRight(tokenId);\\n\\t\\t_deletePeriod(tokenId);\\n\\t\\t_eventEmitter().emitDeletePeriod(tokenId);\\n\\t\\t_eventEmitter().emitTransferCustom(address(this), address(0), tokenId);\\n\\t}\\n\\n\\t/// @dev Buys the token that is defined as the specific period on an ad space.\\n\\t///      The price of the token is fixed.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction buy(uint256 tokenId) external payable virtual exceptYourself {\\n\\t\\t_checkBeforeBuy(tokenId);\\n\\t\\tperiods[tokenId].sold = true;\\n\\t\\t_dropRight(msg.sender, tokenId);\\n\\t\\t_collectFees(msg.value / 10);\\n\\t\\t_eventEmitter().emitBuy(tokenId, msg.value, msg.sender, _blockTimestamp());\\n\\t\\t_eventEmitter().emitTransferCustom(address(this), msg.sender, tokenId);\\n\\t}\\n\\n\\t// /// @dev Buys the token that is defined as the specific period on an ad space.\\n\\t// ///      The price is decreasing as time goes by, that is defined as an Dutch Auction.\\n\\t// /// @param tokenId uint256 of the token ID\\n\\t// function buyBasedOnTime(uint256 tokenId)\\n\\t// \\texternal\\n\\t// \\tpayable\\n\\t// \\tvirtual\\n\\t// \\texceptYourself\\n\\t// {\\n\\t// \\t_checkBeforeBuyBasedOnTime(tokenId);\\n\\t// \\tperiods[tokenId].sold = true;\\n\\t// \\t_dropRight(msg.sender, tokenId);\\n\\t// \\t_collectFees(msg.value / 10);\\n\\t// \\t_eventEmitter().emitBuy(tokenId, msg.value, msg.sender, _blockTimestamp());\\n\\t// \\t_eventEmitter().emitTransferCustom(address(this), msg.sender, tokenId);\\n\\t// }\\n\\n\\t// /// @dev Bids to participate in an auction.\\n\\t// ///      It is defined as an English Auction.\\n\\t// /// @param tokenId uint256 of the token ID\\n\\t// function bid(uint256 tokenId)\\n\\t// \\texternal\\n\\t// \\tpayable\\n\\t// \\tvirtual\\n\\t// \\texceptYourself\\n\\t// \\tnonReentrant\\n\\t// {\\n\\t// \\t_checkBeforeBid(tokenId);\\n\\t// \\t_refundBiddingAmount(tokenId);\\n\\t// \\t_biddingTotal += (msg.value - bidding[tokenId].price);\\n\\t// \\tbidding[tokenId] = Sale.Bidding(tokenId, msg.sender, msg.value);\\n\\t// \\t_eventEmitter().emitBid(tokenId, msg.value, msg.sender, _blockTimestamp());\\n\\t// }\\n\\n\\t/// @dev Bids to participate in an auction.\\n\\t///      It is defined as an Open Bid.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param proposalMetadata string of the metadata hash\\n\\tfunction bidWithProposal(uint256 tokenId, string memory proposalMetadata)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\tvirtual\\n\\t\\texceptYourself\\n\\t\\tnonReentrant\\n\\t{\\n\\t\\t_checkBeforeBidWithProposal(tokenId);\\n\\t\\t_biddingTotal += msg.value;\\n\\t\\tappealed[tokenId].push(\\n\\t\\t\\tSale.Appeal(tokenId, msg.sender, msg.value, proposalMetadata)\\n\\t\\t);\\n\\t\\t_eventEmitter().emitBidWithProposal(\\n\\t\\t\\ttokenId,\\n\\t\\t\\tmsg.value,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tproposalMetadata,\\n\\t\\t\\t_blockTimestamp()\\n\\t\\t);\\n\\t}\\n\\n\\t/// @dev Selects the best proposal bidded with.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param index uint256 of the index number\\n\\tfunction selectProposal(uint256 tokenId, uint256 index)\\n\\t\\texternal\\n\\t\\tvirtual\\n\\t\\tonlyMedia\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\tappealed[tokenId].length >= index &&\\n\\t\\t\\t\\tappealed[tokenId][index].sender != address(0),\\n\\t\\t\\t\\\"KD114\\\"\\n\\t\\t);\\n\\t\\trequire(periods[tokenId].saleEndTimestamp < _blockTimestamp(), \\\"KD129\\\");\\n\\n\\t\\tSale.Appeal memory appeal = appealed[tokenId][index];\\n\\t\\t_dropRight(appeal.sender, tokenId);\\n\\t\\t_refundToProposers(tokenId, index);\\n\\t\\tdelete appealed[tokenId];\\n\\t\\t_eventEmitter().emitSelectProposal(tokenId, appeal.sender);\\n\\t\\t_eventEmitter().emitTransferCustom(address(this), appeal.sender, tokenId);\\n\\t}\\n\\n\\t// /// @dev Receives the token you bidded if you are the successful bidder.\\n\\t// /// @param tokenId uint256 of the token ID\\n\\t// function receiveToken(uint256 tokenId)\\n\\t// \\texternal\\n\\t// \\tvirtual\\n\\t// \\tonlySuccessfulBidder(tokenId)\\n\\t// {\\n\\t// \\t_toSuccessfulBidder(tokenId, msg.sender);\\n\\t// }\\n\\n\\t// /// @dev Receives the token you bidded if you are the successful bidder.\\n\\t// /// @param tokenId uint256 of the token ID\\n\\t// function pushToSuccessfulBidder(uint256 tokenId) external virtual onlyMedia {\\n\\t// \\t_toSuccessfulBidder(tokenId, bidding[tokenId].bidder);\\n\\t// }\\n\\n\\t// /// @dev Offers to buy a period that the sender requests.\\n\\t// /// @param spaceMetadata string of the space metadata\\n\\t// /// @param displayStartTimestamp uint256 of the start timestamp for the display\\n\\t// /// @param displayEndTimestamp uint256 of the end timestamp for the display\\n\\t// function offerPeriod(\\n\\t// \\tstring memory spaceMetadata,\\n\\t// \\tuint256 displayStartTimestamp,\\n\\t// \\tuint256 displayEndTimestamp\\n\\t// ) external payable virtual exceptYourself {\\n\\t// \\trequire(spaced[spaceMetadata], \\\"KD101\\\");\\n\\t// \\trequire(displayStartTimestamp < displayEndTimestamp, \\\"KD113\\\");\\n\\t// \\tuint256 tokenId = Ad.id(\\n\\t// \\t\\tspaceMetadata,\\n\\t// \\t\\tdisplayStartTimestamp,\\n\\t// \\t\\tdisplayEndTimestamp\\n\\t// \\t);\\n\\t// \\toffered[tokenId] = Sale.Offer(\\n\\t// \\t\\tspaceMetadata,\\n\\t// \\t\\tdisplayStartTimestamp,\\n\\t// \\t\\tdisplayEndTimestamp,\\n\\t// \\t\\tmsg.sender,\\n\\t// \\t\\tmsg.value\\n\\t// \\t);\\n\\t// \\t_offeredTotal += msg.value;\\n\\t// \\t_eventEmitter().emitOfferPeriod(\\n\\t// \\t\\ttokenId,\\n\\t// \\t\\tspaceMetadata,\\n\\t// \\t\\tdisplayStartTimestamp,\\n\\t// \\t\\tdisplayEndTimestamp,\\n\\t// \\t\\tmsg.sender,\\n\\t// \\t\\tmsg.value\\n\\t// \\t);\\n\\t// }\\n\\n\\t// /// @dev Cancels an offer.\\n\\t// /// @param tokenId uint256 of the token ID\\n\\t// function cancelOffer(uint256 tokenId) external virtual exceptYourself {\\n\\t// \\trequire(offered[tokenId].sender == msg.sender, \\\"KD116\\\");\\n\\t// \\t_refundOfferedAmount(tokenId);\\n\\t// \\t_offeredTotal -= offered[tokenId].price;\\n\\t// \\tdelete offered[tokenId];\\n\\t// \\t_eventEmitter().emitCancelOffer(tokenId);\\n\\t// }\\n\\n\\t// /// @dev Accepts an offer by the Media.\\n\\t// /// @param tokenId uint256 of the token ID\\n\\t// /// @param tokenMetadata string of the NFT token metadata\\n\\t// function acceptOffer(uint256 tokenId, string memory tokenMetadata)\\n\\t// \\texternal\\n\\t// \\tvirtual\\n\\t// \\tonlyMedia\\n\\t// {\\n\\t// \\tSale.Offer memory offer = offered[tokenId];\\n\\t// \\trequire(offer.sender != address(0), \\\"KD115\\\");\\n\\t// \\t_checkOverlapping(\\n\\t// \\t\\toffer.spaceMetadata,\\n\\t// \\t\\toffer.displayStartTimestamp,\\n\\t// \\t\\toffer.displayEndTimestamp\\n\\t// \\t);\\n\\t// \\tAd.Period memory period = Ad.Period(\\n\\t// \\t\\toffer.sender,\\n\\t// \\t\\toffer.spaceMetadata,\\n\\t// \\t\\ttokenMetadata,\\n\\t// \\t\\t_blockTimestamp(),\\n\\t// \\t\\t_blockTimestamp(),\\n\\t// \\t\\toffer.displayStartTimestamp,\\n\\t// \\t\\toffer.displayEndTimestamp,\\n\\t// \\t\\tAd.Pricing.OFFER,\\n\\t// \\t\\toffer.price,\\n\\t// \\t\\toffer.price,\\n\\t// \\t\\ttrue\\n\\t// \\t);\\n\\n\\t// \\t_mintRight(offer.sender, tokenId, tokenMetadata);\\n\\t// \\t_savePeriod(offer.spaceMetadata, tokenId, period);\\n\\t// \\t_collectFees(offer.price / 10);\\n\\n\\t// \\t_offeredTotal -= offer.price;\\n\\t// \\tdelete offered[tokenId];\\n\\n\\t// \\t_eventEmitter().emitAcceptOffer(\\n\\t// \\t\\ttokenId,\\n\\t// \\t\\toffer.spaceMetadata,\\n\\t// \\t\\ttokenMetadata,\\n\\t// \\t\\toffer.displayStartTimestamp,\\n\\t// \\t\\toffer.displayEndTimestamp,\\n\\t// \\t\\toffer.price\\n\\t// \\t);\\n\\t// \\t_eventEmitter().emitTransferCustom(address(0), address(this), tokenId);\\n\\t// }\\n\\n\\t/// @dev Withdraws the fund deposited to the proxy contract.\\n\\t///      If you put 0 as the amount, you can withdraw as much as possible.\\n\\tfunction withdraw() external virtual onlyMedia {\\n\\t\\tuint256 withdrawal = withdrawalAmount();\\n\\t\\t(bool success, ) = payable(msg.sender).call{\\n\\t\\t\\tvalue: withdrawal,\\n\\t\\t\\tgas: 10000\\n\\t\\t}(\\\"\\\");\\n\\t\\tif (success) {\\n\\t\\t\\t_eventEmitter().emitWithdraw(withdrawal);\\n\\t\\t} else {\\n\\t\\t\\t_eventEmitter().emitPaymentFailure(msg.sender, withdrawal);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev Proposes the metadata to the token you bought.\\n\\t///      Users can propose many times as long as it is accepted.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param metadata string of the proposal metadata\\n\\tfunction propose(uint256 tokenId, string memory metadata) external virtual {\\n\\t\\trequire(ownerOf(tokenId) == msg.sender, \\\"KD012\\\");\\n\\t\\t_proposeToRight(tokenId, metadata);\\n\\t\\t_eventEmitter().emitPropose(tokenId, metadata);\\n\\t}\\n\\n\\t/// @dev Accepts the proposal.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction acceptProposal(uint256 tokenId) external virtual onlyMedia {\\n\\t\\tstring memory metadata = proposed[tokenId].content;\\n\\t\\trequire(bytes(metadata).length != 0, \\\"KD130\\\");\\n\\t\\trequire(ownerOf(tokenId) == proposed[tokenId].proposer, \\\"KD131\\\");\\n\\t\\t_acceptProposal(tokenId, metadata);\\n\\t\\t_eventEmitter().emitAcceptProposal(tokenId, metadata);\\n\\t}\\n\\n\\t/// @dev Denies the submitted proposal, mentioning what is the problem.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param reason string of the reason why it is rejected\\n\\t/// @param offensive bool if the content would offend somebody\\n\\tfunction denyProposal(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory reason,\\n\\t\\tbool offensive\\n\\t) external virtual onlyMedia {\\n\\t\\tstring memory metadata = proposed[tokenId].content;\\n\\t\\trequire(bytes(metadata).length != 0, \\\"KD130\\\");\\n\\t\\tdeniedReasons[tokenId].push(Draft.Denied(reason, offensive));\\n\\t\\t_eventEmitter().emitDenyProposal(tokenId, metadata, reason, offensive);\\n\\t}\\n\\n\\t/// @dev Overrides transferFrom to emit an event from the common emitter.\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public virtual override {\\n\\t\\tsuper.transferFrom(from, to, tokenId);\\n\\t\\t_eventEmitter().emitTransferCustom(from, to, tokenId);\\n\\t}\\n\\n\\t/// @dev Overrides transferFrom to emit an event from the common emitter.\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public virtual override {\\n\\t\\tsuper.safeTransferFrom(from, to, tokenId);\\n\\t\\t_eventEmitter().emitTransferCustom(from, to, tokenId);\\n\\t}\\n\\n\\t/// @dev Returns ID based on the space metadata, display start timestamp, and\\n\\t///      display end timestamp. These three makes it the unique.\\n\\t/// @param spaceMetadata uint256 of the space metadata\\n\\t/// @param displayStartTimestamp uint256 of the start timestamp for the display\\n\\t/// @param displayEndTimestamp uint256 of the end timestamp for the display\\n\\tfunction adId(\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp\\n\\t) public pure virtual returns (uint256) {\\n\\t\\treturn Ad.id(spaceMetadata, displayStartTimestamp, displayEndTimestamp);\\n\\t}\\n\\n\\t/// @dev Returns the balacne deposited on the proxy contract.\\n\\tfunction balance() public view virtual returns (uint256) {\\n\\t\\treturn address(this).balance;\\n\\t}\\n\\n\\t/// @dev Returns the withdrawal amount.\\n\\tfunction withdrawalAmount() public view virtual returns (uint256) {\\n\\t\\treturn address(this).balance - _biddingTotal - _offeredTotal;\\n\\t}\\n\\n\\t/// @dev Displays the ad content that is approved by the media owner.\\n\\t/// @param spaceMetadata string of the space metadata\\n\\tfunction display(string memory spaceMetadata)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string memory, uint256)\\n\\t{\\n\\t\\tuint256[] memory tokenIds = tokenIdsOf(spaceMetadata);\\n\\t\\tfor (uint256 i = 0; i < tokenIds.length; i++) {\\n\\t\\t\\tAd.Period memory period = periods[tokenIds[i]];\\n\\t\\t\\tif (\\n\\t\\t\\t\\tperiod.displayStartTimestamp <= _blockTimestamp() &&\\n\\t\\t\\t\\tperiod.displayEndTimestamp >= _blockTimestamp()\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn (accepted[tokenIds[i]], tokenIds[i]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn (\\\"\\\", 0);\\n\\t}\\n\\n\\t// function _checkBeforeReceiveToken(uint256 tokenId) internal view virtual {\\n\\t// \\trequire(periods[tokenId].pricing == Ad.Pricing.ENGLISH, \\\"KD124\\\");\\n\\t// \\trequire(!periods[tokenId].sold, \\\"KD121\\\");\\n\\t// \\trequire(periods[tokenId].saleEndTimestamp < _blockTimestamp(), \\\"KD125\\\");\\n\\t// }\\n\\n\\tfunction _refundToProposers(uint256 tokenId, uint256 successfulBidderNo)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < appealed[tokenId].length; i++) {\\n\\t\\t\\tSale.Appeal memory appeal = appealed[tokenId][i];\\n\\t\\t\\t_biddingTotal -= appeal.price;\\n\\t\\t\\tif (i == successfulBidderNo) {\\n\\t\\t\\t\\t_collectFees(appeal.price / 10);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t(bool success, ) = payable(appeal.sender).call{\\n\\t\\t\\t\\t\\tvalue: appeal.price,\\n\\t\\t\\t\\t\\tgas: 10000\\n\\t\\t\\t\\t}(\\\"\\\");\\n\\t\\t\\t\\tif (!success) {\\n\\t\\t\\t\\t\\t_eventEmitter().emitPaymentFailure(appeal.sender, appeal.price);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// function _toSuccessfulBidder(uint256 tokenId, address receiver)\\n\\t// \\tinternal\\n\\t// \\tvirtual\\n\\t// {\\n\\t// \\t_checkBeforeReceiveToken(tokenId);\\n\\t// \\tuint256 price = bidding[tokenId].price;\\n\\t// \\tperiods[tokenId].sold = true;\\n\\t// \\t_biddingTotal -= price;\\n\\t// \\t_dropRight(receiver, tokenId);\\n\\t// \\t_collectFees(price / 10);\\n\\t// \\tdelete bidding[tokenId];\\n\\t// \\t_eventEmitter().emitReceiveToken(\\n\\t// \\t\\ttokenId,\\n\\t// \\t\\tprice,\\n\\t// \\t\\treceiver,\\n\\t// \\t\\t_blockTimestamp()\\n\\t// \\t);\\n\\t// \\t_eventEmitter().emitTransferCustom(address(this), receiver, tokenId);\\n\\t// }\\n\\n\\tfunction _collectFees(uint256 value) internal virtual {\\n\\t\\taddress vault = vaultAddress();\\n\\t\\t(bool success, ) = payable(vault).call{ value: value, gas: 10000 }(\\\"\\\");\\n\\t\\tif (!success) {\\n\\t\\t\\t_eventEmitter().emitPaymentFailure(vault, value);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xa4e0567669348cb34d374551849f5bbc08331d4c457f007eb4259ff88c07e680\",\"license\":\"UNLICENSED\"},\"contracts/accessors/NameAccessor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/INameRegistry.sol\\\";\\n\\n/// @title NameAccessor - manages the endpoints.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ncontract NameAccessor {\\n\\tINameRegistry internal _nameRegistry;\\n\\n\\t/// @dev Sets the address of NameRegistry.\\n\\t/// @param nameRegistry address of the NameRegistry\\n\\tfunction initialize(address nameRegistry) internal {\\n\\t\\t_nameRegistry = INameRegistry(nameRegistry);\\n\\t}\\n\\n\\t/// @dev Prevents calling a function from anyone except the accepted contracts.\\n\\tmodifier onlyAllowedContract() {\\n\\t\\trequire(_nameRegistry.allowedContracts(msg.sender), \\\"KD013\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Throws if not called by MediaFactory.\\n\\tmodifier onlyFactory() {\\n\\t\\trequire(msg.sender == mediaFactoryAddress(), \\\"KD010\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Throws if called by any account other than the owner.\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(owner() == msg.sender, \\\"KD012\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Gets the address of NameRegistry\\n\\tfunction nameRegistryAddress() public view returns (address) {\\n\\t\\treturn address(_nameRegistry);\\n\\t}\\n\\n\\t/// @dev Gets the address of AdPool.\\n\\tfunction adPoolAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"AdPool\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of MediaFactory.\\n\\tfunction mediaFactoryAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"MediaFactory\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of MediaRegistry.\\n\\tfunction mediaRegistryAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"MediaRegistry\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of Vault.\\n\\tfunction vaultAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"Vault\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of EventEmitter.\\n\\tfunction eventEmitterAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"EventEmitter\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the owner address.\\n\\tfunction owner() public view returns (address) {\\n\\t\\treturn _nameRegistry.deployer();\\n\\t}\\n}\\n\",\"keccak256\":\"0x85d5e23e17c1039c5caa13452838ccdb57c5530e78353b5162dda1c5242376f0\",\"license\":\"UNLICENSED\"},\"contracts/base/DistributionRight.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"../accessors/NameAccessor.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/// @title DistributionRight - represents an NFT based on ad an space\\n///        created by a media and its period.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ncontract DistributionRight is ERC721 {\\n\\tfunction _mintRight(\\n\\t\\taddress reciever,\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory metadata\\n\\t) internal virtual {\\n\\t\\t_mint(reciever, tokenId);\\n\\t\\t_tokenURIs[tokenId] = metadata;\\n\\t}\\n\\n\\tfunction _burnRight(uint256 tokenId) internal virtual {\\n\\t\\t_burn(tokenId);\\n\\t\\t_tokenURIs[tokenId] = \\\"\\\";\\n\\t}\\n\\n\\tfunction _dropRight(address receiver, uint256 tokenId) internal virtual {\\n\\t\\t_transfer(address(this), receiver, tokenId);\\n\\t}\\n}\\n\",\"keccak256\":\"0xc3a29eedb24cfac51251f4dc41e4db37e6d57a03b41dc0b4c76f25e9dee4487c\",\"license\":\"UNLICENSED\"},\"contracts/base/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IERC721Metadata.sol\\\";\\nimport \\\"../interfaces/IERC721Receiver.sol\\\";\\nimport \\\"../interfaces/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\ncontract ERC721 is Context, IERC721Enumerable, IERC721Metadata {\\n\\tusing Address for address;\\n\\tusing Strings for uint256;\\n\\n\\t// Token name\\n\\tstring internal _name;\\n\\n\\t// Token symbol\\n\\tstring internal _symbol;\\n\\n\\t// Base URI\\n\\tstring internal _baseURI;\\n\\n\\t// Token URIs\\n\\tmapping(uint256 => string) internal _tokenURIs;\\n\\n\\t// Mapping from token ID to owner address\\n\\tmapping(uint256 => address) internal _owners;\\n\\n\\t// Mapping owner address to token count\\n\\tmapping(address => uint256) internal _balances;\\n\\n\\t// Mapping from token ID to approved address\\n\\tmapping(uint256 => address) internal _tokenApprovals;\\n\\n\\t// Mapping from owner to operator approvals\\n\\tmapping(address => mapping(address => bool)) internal _operatorApprovals;\\n\\n\\t// Mapping from owner to list of owned token IDs\\n\\tmapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n\\t// Mapping from token ID to index of the owner tokens list\\n\\tmapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n\\t// Array with all token ids, used for enumeration\\n\\tuint256[] private _allTokens;\\n\\n\\t// Mapping from token id to position in the allTokens array\\n\\tmapping(uint256 => uint256) private _allTokensIndex;\\n\\n\\t/**\\n\\t * @dev See {IERC165-supportsInterface}.\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId)\\n\\t\\tpublic\\n\\t\\tpure\\n\\t\\tvirtual\\n\\t\\toverride(IERC165)\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn\\n\\t\\t\\tinterfaceId == type(IERC721).interfaceId ||\\n\\t\\t\\tinterfaceId == type(IERC721Metadata).interfaceId;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-balanceOf}.\\n\\t */\\n\\tfunction balanceOf(address owner)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n\\t\\treturn _balances[owner];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-ownerOf}.\\n\\t */\\n\\tfunction ownerOf(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (address)\\n\\t{\\n\\t\\taddress owner = _owners[tokenId];\\n\\t\\trequire(owner != address(0), \\\"KD114\\\");\\n\\t\\treturn owner;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Metadata-name}.\\n\\t */\\n\\tfunction name() public view virtual override returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Metadata-symbol}.\\n\\t */\\n\\tfunction symbol() public view virtual override returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Metadata-tokenURI}.\\n\\t */\\n\\tfunction tokenURI(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\t_exists(tokenId),\\n\\t\\t\\t\\\"ERC721Metadata: URI query for nonexistent token\\\"\\n\\t\\t);\\n\\n\\t\\treturn\\n\\t\\t\\tbytes(_baseURI).length > 0\\n\\t\\t\\t\\t? string(abi.encodePacked(_baseURI, _tokenURIs[tokenId]))\\n\\t\\t\\t\\t: _tokenURIs[tokenId];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-approve}.\\n\\t */\\n\\tfunction approve(address to, uint256 tokenId) public virtual override {\\n\\t\\taddress owner = ownerOf(tokenId);\\n\\t\\trequire(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n\\t\\trequire(\\n\\t\\t\\t_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n\\t\\t\\t\\\"ERC721: approve caller is not owner nor approved for all\\\"\\n\\t\\t);\\n\\n\\t\\t_approve(to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-getApproved}.\\n\\t */\\n\\tfunction getApproved(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (address)\\n\\t{\\n\\t\\trequire(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n\\t\\treturn _tokenApprovals[tokenId];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-setApprovalForAll}.\\n\\t */\\n\\tfunction setApprovalForAll(address operator, bool approved)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t{\\n\\t\\trequire(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n\\t\\t_operatorApprovals[_msgSender()][operator] = approved;\\n\\t\\temit ApprovalForAll(_msgSender(), operator, approved);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-isApprovedForAll}.\\n\\t */\\n\\tfunction isApprovedForAll(address owner, address operator)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn _operatorApprovals[owner][operator];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-transferFrom}.\\n\\t */\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public virtual override {\\n\\t\\t//solhint-disable-next-line max-line-length\\n\\t\\trequire(\\n\\t\\t\\t_isApprovedOrOwner(_msgSender(), tokenId),\\n\\t\\t\\t\\\"ERC721: transfer caller is not owner nor approved\\\"\\n\\t\\t);\\n\\n\\t\\t_transfer(from, to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-safeTransferFrom}.\\n\\t */\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public virtual override {\\n\\t\\tsafeTransferFrom(from, to, tokenId, \\\"\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-safeTransferFrom}.\\n\\t */\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) public virtual override {\\n\\t\\trequire(\\n\\t\\t\\t_isApprovedOrOwner(_msgSender(), tokenId),\\n\\t\\t\\t\\\"ERC721: transfer caller is not owner nor approved\\\"\\n\\t\\t);\\n\\t\\t_safeTransfer(from, to, tokenId, _data);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n\\t * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n\\t *\\n\\t * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n\\t *\\n\\t * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n\\t * implement alternative mechanisms to perform token transfer, such as signature-based.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `from` cannot be the zero address.\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must exist and be owned by `from`.\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _safeTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) internal virtual {\\n\\t\\t_transfer(from, to, tokenId);\\n\\t\\trequire(\\n\\t\\t\\t_checkOnERC721Received(from, to, tokenId, _data),\\n\\t\\t\\t\\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns whether `tokenId` exists.\\n\\t *\\n\\t * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n\\t *\\n\\t * Tokens start existing when they are minted (`_mint`),\\n\\t * and stop existing when they are burned (`_burn`).\\n\\t */\\n\\tfunction _exists(uint256 tokenId) internal view virtual returns (bool) {\\n\\t\\treturn _owners[tokenId] != address(0);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must exist.\\n\\t */\\n\\tfunction _isApprovedOrOwner(address spender, uint256 tokenId)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\trequire(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n\\t\\taddress owner = ownerOf(tokenId);\\n\\t\\treturn (spender == owner ||\\n\\t\\t\\tgetApproved(tokenId) == spender ||\\n\\t\\t\\tisApprovedForAll(owner, spender));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Safely mints `tokenId` and transfers it to `to`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must not exist.\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _safeMint(address to, uint256 tokenId) internal virtual {\\n\\t\\t_safeMint(to, tokenId, \\\"\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n\\t * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n\\t */\\n\\tfunction _safeMint(\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) internal virtual {\\n\\t\\t_mint(to, tokenId);\\n\\t\\trequire(\\n\\t\\t\\t_checkOnERC721Received(address(0), to, tokenId, _data),\\n\\t\\t\\t\\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Mints `tokenId` and transfers it to `to`.\\n\\t *\\n\\t * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must not exist.\\n\\t * - `to` cannot be the zero address.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _mint(address to, uint256 tokenId) internal virtual {\\n\\t\\trequire(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n\\t\\trequire(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n\\t\\t_beforeTokenTransfer(address(0), to, tokenId);\\n\\n\\t\\t_balances[to] += 1;\\n\\t\\t_owners[tokenId] = to;\\n\\n\\t\\temit Transfer(address(0), to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Destroys `tokenId`.\\n\\t * The approval is cleared when the token is burned.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must exist.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _burn(uint256 tokenId) internal virtual {\\n\\t\\taddress owner = ownerOf(tokenId);\\n\\n\\t\\t_beforeTokenTransfer(owner, address(0), tokenId);\\n\\n\\t\\t// Clear approvals\\n\\t\\t_approve(address(0), tokenId);\\n\\n\\t\\t_balances[owner] -= 1;\\n\\t\\tdelete _owners[tokenId];\\n\\n\\t\\temit Transfer(owner, address(0), tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers `tokenId` from `from` to `to`.\\n\\t *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must be owned by `from`.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _transfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) internal virtual {\\n\\t\\trequire(\\n\\t\\t\\townerOf(tokenId) == from,\\n\\t\\t\\t\\\"ERC721: transfer of token that is not own\\\"\\n\\t\\t);\\n\\t\\trequire(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n\\t\\t_beforeTokenTransfer(from, to, tokenId);\\n\\n\\t\\t// Clear approvals from the previous owner\\n\\t\\t_approve(address(0), tokenId);\\n\\n\\t\\t_balances[from] -= 1;\\n\\t\\t_balances[to] += 1;\\n\\t\\t_owners[tokenId] = to;\\n\\n\\t\\temit Transfer(from, to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Approve `to` to operate on `tokenId`\\n\\t *\\n\\t * Emits a {Approval} event.\\n\\t */\\n\\tfunction _approve(address to, uint256 tokenId) internal virtual {\\n\\t\\t_tokenApprovals[tokenId] = to;\\n\\t\\temit Approval(ownerOf(tokenId), to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n\\t * The call is not executed if the target address is not a contract.\\n\\t *\\n\\t * @param from address representing the previous owner of the given token ID\\n\\t * @param to target address that will receive the tokens\\n\\t * @param tokenId uint256 ID of the token to be transferred\\n\\t * @param _data bytes optional data to send along with the call\\n\\t * @return bool whether the call correctly returned the expected magic value\\n\\t */\\n\\tfunction _checkOnERC721Received(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) private returns (bool) {\\n\\t\\tif (to.isContract()) {\\n\\t\\t\\ttry\\n\\t\\t\\t\\tIERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\\n\\t\\t\\treturns (bytes4 retval) {\\n\\t\\t\\t\\treturn retval == IERC721Receiver(to).onERC721Received.selector;\\n\\t\\t\\t} catch (bytes memory reason) {\\n\\t\\t\\t\\tif (reason.length == 0) {\\n\\t\\t\\t\\t\\trevert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tassembly {\\n\\t\\t\\t\\t\\t\\trevert(add(32, reason), mload(reason))\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Hook that is called before any token transfer. This includes minting\\n\\t * and burning.\\n\\t *\\n\\t * Calling conditions:\\n\\t *\\n\\t * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n\\t * transferred to `to`.\\n\\t * - When `from` is zero, `tokenId` will be minted for `to`.\\n\\t * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n\\t * - `from` and `to` are never both zero.\\n\\t *\\n\\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n\\t */\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) internal {\\n\\t\\tif (from == address(0)) {\\n\\t\\t\\t_addTokenToAllTokensEnumeration(tokenId);\\n\\t\\t} else if (from != to) {\\n\\t\\t\\t_removeTokenFromOwnerEnumeration(from, tokenId);\\n\\t\\t}\\n\\t\\tif (to == address(0)) {\\n\\t\\t\\t_removeTokenFromAllTokensEnumeration(tokenId);\\n\\t\\t} else if (to != from) {\\n\\t\\t\\t_addTokenToOwnerEnumeration(to, tokenId);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n\\t */\\n\\tfunction tokenOfOwnerByIndex(address owner, uint256 index)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\tindex < balanceOf(owner),\\n\\t\\t\\t\\\"ERC721Enumerable: owner index out of bounds\\\"\\n\\t\\t);\\n\\t\\treturn _ownedTokens[owner][index];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Enumerable-totalSupply}.\\n\\t */\\n\\tfunction totalSupply() public view virtual override returns (uint256) {\\n\\t\\treturn _allTokens.length;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Enumerable-tokenByIndex}.\\n\\t */\\n\\tfunction tokenByIndex(uint256 index)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\tindex < totalSupply(),\\n\\t\\t\\t\\\"ERC721Enumerable: global index out of bounds\\\"\\n\\t\\t);\\n\\t\\treturn _allTokens[index];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n\\t * @param to address representing the new owner of the given token ID\\n\\t * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n\\t */\\n\\tfunction _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n\\t\\tuint256 length = balanceOf(to);\\n\\t\\t_ownedTokens[to][length] = tokenId;\\n\\t\\t_ownedTokensIndex[tokenId] = length;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to add a token to this extension's token tracking data structures.\\n\\t * @param tokenId uint256 ID of the token to be added to the tokens list\\n\\t */\\n\\tfunction _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n\\t\\t_allTokensIndex[tokenId] = _allTokens.length;\\n\\t\\t_allTokens.push(tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n\\t * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n\\t * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n\\t * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n\\t * @param from address representing the previous owner of the given token ID\\n\\t * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n\\t */\\n\\tfunction _removeTokenFromOwnerEnumeration(address from, uint256 tokenId)\\n\\t\\tprivate\\n\\t{\\n\\t\\t// To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n\\t\\t// then delete the last slot (swap and pop).\\n\\n\\t\\tuint256 lastTokenIndex = balanceOf(from) - 1;\\n\\t\\tuint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n\\t\\t// When the token to delete is the last token, the swap operation is unnecessary\\n\\t\\tif (tokenIndex != lastTokenIndex) {\\n\\t\\t\\tuint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n\\t\\t\\t_ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n\\t\\t\\t_ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\t\\t}\\n\\n\\t\\t// This also deletes the contents at the last position of the array\\n\\t\\tdelete _ownedTokensIndex[tokenId];\\n\\t\\tdelete _ownedTokens[from][lastTokenIndex];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to remove a token from this extension's token tracking data structures.\\n\\t * This has O(1) time complexity, but alters the order of the _allTokens array.\\n\\t * @param tokenId uint256 ID of the token to be removed from the tokens list\\n\\t */\\n\\tfunction _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n\\t\\t// To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n\\t\\t// then delete the last slot (swap and pop).\\n\\n\\t\\tuint256 lastTokenIndex = _allTokens.length - 1;\\n\\t\\tuint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n\\t\\t// When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n\\t\\t// rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n\\t\\t// an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n\\t\\tuint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n\\t\\t_allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n\\t\\t_allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n\\t\\t// This also deletes the contents at the last position of the array\\n\\t\\tdelete _allTokensIndex[tokenId];\\n\\t\\t_allTokens.pop();\\n\\t}\\n}\\n\",\"keccak256\":\"0xc684d399c3f47f7a5490318574aeff7c363925f9610043a3cf91fd3f6e3b6f08\",\"license\":\"UNLICENSED\"},\"contracts/base/PeriodManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"./SpaceManager.sol\\\";\\nimport \\\"../libraries/Schedule.sol\\\";\\n\\n/// @title PeriodManager - manages ad periods defined on media spaces.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\nabstract contract PeriodManager is SpaceManager {\\n\\tfunction _checkOverlapping(\\n\\t\\tstring memory metadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp\\n\\t) internal view virtual {\\n\\t\\tfor (uint256 i = 0; i < _periodKeys[metadata].length; i++) {\\n\\t\\t\\tAd.Period memory existing = periods[_periodKeys[metadata][i]];\\n\\t\\t\\tif (\\n\\t\\t\\t\\tSchedule._isOverlapped(\\n\\t\\t\\t\\t\\tdisplayStartTimestamp,\\n\\t\\t\\t\\t\\tdisplayEndTimestamp,\\n\\t\\t\\t\\t\\texisting.displayStartTimestamp,\\n\\t\\t\\t\\t\\texisting.displayEndTimestamp\\n\\t\\t\\t\\t)\\n\\t\\t\\t) {\\n\\t\\t\\t\\trevert(\\\"KD110\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _savePeriod(\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tuint256 tokenId,\\n\\t\\tAd.Period memory period\\n\\t) internal virtual {\\n\\t\\t_periodKeys[spaceMetadata].push(tokenId);\\n\\t\\tperiods[tokenId] = period;\\n\\t\\t_adPool().addPeriod(tokenId, period);\\n\\t}\\n\\n\\tfunction _deletePeriod(uint256 tokenId) internal virtual {\\n\\t\\tstring memory spaceMetadata = periods[tokenId].spaceMetadata;\\n\\t\\tuint256 index = 0;\\n\\t\\tfor (uint256 i = 1; i < _periodKeys[spaceMetadata].length + 1; i++) {\\n\\t\\t\\tif (_periodKeys[spaceMetadata][i - 1] == tokenId) {\\n\\t\\t\\t\\tindex = i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\trequire(index != 0, \\\"No deletable keys\\\");\\n\\t\\tdelete _periodKeys[spaceMetadata][index - 1];\\n\\t\\tdelete periods[tokenId];\\n\\t\\t_adPool().deletePeriod(tokenId);\\n\\t}\\n\\n\\t/// @dev Returns tokenIds tied with the space metadata\\n\\t/// @param spaceMetadata string of the space metadata\\n\\tfunction tokenIdsOf(string memory spaceMetadata)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256[] memory)\\n\\t{\\n\\t\\treturn _periodKeys[spaceMetadata];\\n\\t}\\n}\\n\",\"keccak256\":\"0x6c809058d2a97f4c4f71aa65c535ae4d7bbd18bbfde08627c779cdef4d138b38\",\"license\":\"UNLICENSED\"},\"contracts/base/PrimarySales.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"./ProposalManager.sol\\\";\\nimport \\\"../common/BlockTimestamp.sol\\\";\\n\\n/// @title PrimarySales - manages how to sell them out.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\nabstract contract PrimarySales is ProposalManager, BlockTimestamp {\\n\\t/// @dev Returns the current price.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction currentPrice(uint256 tokenId) public view virtual returns (uint256) {\\n\\t\\tAd.Period memory period = periods[tokenId];\\n\\t\\tif (period.pricing == Ad.Pricing.RRP) {\\n\\t\\t\\treturn period.minPrice;\\n\\t\\t}\\n\\t\\tif (period.pricing == Ad.Pricing.DUTCH) {\\n\\t\\t\\treturn\\n\\t\\t\\t\\tperiod.startPrice -\\n\\t\\t\\t\\t((period.startPrice - period.minPrice) *\\n\\t\\t\\t\\t\\t(_blockTimestamp() - period.saleStartTimestamp)) /\\n\\t\\t\\t\\t(period.saleEndTimestamp - period.saleStartTimestamp);\\n\\t\\t}\\n\\t\\t// if (period.pricing == Ad.Pricing.ENGLISH) {\\n\\t\\t// \\treturn bidding[tokenId].price;\\n\\t\\t// }\\n\\t\\t// if (period.pricing == Ad.Pricing.OFFER) {\\n\\t\\t// \\treturn offered[tokenId].price;\\n\\t\\t// }\\n\\t\\tif (period.pricing == Ad.Pricing.OPEN) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\trevert(\\\"not exist\\\");\\n\\t}\\n\\n\\tfunction _checkBeforeBuy(uint256 tokenId) internal view virtual {\\n\\t\\trequire(periods[tokenId].pricing == Ad.Pricing.RRP, \\\"KD120\\\");\\n\\t\\trequire(!periods[tokenId].sold, \\\"KD121\\\");\\n\\t\\trequire(periods[tokenId].minPrice == msg.value, \\\"KD122\\\");\\n\\t}\\n\\n\\t// function _checkBeforeBuyBasedOnTime(uint256 tokenId) internal view virtual {\\n\\t// \\trequire(periods[tokenId].pricing == Ad.Pricing.DUTCH, \\\"KD123\\\");\\n\\t// \\trequire(!periods[tokenId].sold, \\\"KD121\\\");\\n\\t// \\trequire(currentPrice(tokenId) <= msg.value, \\\"KD122\\\");\\n\\t// }\\n\\n\\t// function _checkBeforeBid(uint256 tokenId) internal view virtual {\\n\\t// \\trequire(periods[tokenId].pricing == Ad.Pricing.ENGLISH, \\\"KD124\\\");\\n\\t// \\trequire(!periods[tokenId].sold, \\\"KD121\\\");\\n\\t// \\trequire(currentPrice(tokenId) < msg.value, \\\"KD122\\\");\\n\\t// \\trequire(periods[tokenId].saleEndTimestamp >= _blockTimestamp(), \\\"KD129\\\");\\n\\t// }\\n\\n\\tfunction _checkBeforeBidWithProposal(uint256 tokenId) internal view virtual {\\n\\t\\trequire(periods[tokenId].pricing == Ad.Pricing.OPEN, \\\"KD127\\\");\\n\\t\\trequire(!periods[tokenId].sold, \\\"KD121\\\");\\n\\t\\trequire(periods[tokenId].minPrice <= msg.value, \\\"KD122\\\");\\n\\t\\trequire(periods[tokenId].saleEndTimestamp >= _blockTimestamp(), \\\"KD129\\\");\\n\\t}\\n\\n\\tfunction _alreadyBid(uint256 tokenId) internal view virtual returns (bool) {\\n\\t\\treturn appealed[tokenId].length != 0;\\n\\t\\t// return\\n\\t\\t// \\tbidding[tokenId].bidder != address(0) || appealed[tokenId].length != 0;\\n\\t}\\n\\n\\t// function _refundBiddingAmount(uint256 tokenId) internal virtual {\\n\\t// \\tif (\\n\\t// \\t\\tperiods[tokenId].pricing == Ad.Pricing.ENGLISH &&\\n\\t// \\t\\tbidding[tokenId].bidder != address(0)\\n\\t// \\t) {\\n\\t// \\t\\t(bool success, ) = payable(bidding[tokenId].bidder).call{\\n\\t// \\t\\t\\tvalue: bidding[tokenId].price,\\n\\t// \\t\\t\\tgas: 10000\\n\\t// \\t\\t}(\\\"\\\");\\n\\t// \\t\\tif (!success) {\\n\\t// \\t\\t\\t_eventEmitter().emitPaymentFailure(\\n\\t// \\t\\t\\t\\tbidding[tokenId].bidder,\\n\\t// \\t\\t\\t\\tbidding[tokenId].price\\n\\t// \\t\\t\\t);\\n\\t// \\t\\t}\\n\\t// \\t}\\n\\t// }\\n\\n\\t// function _refundOfferedAmount(uint256 tokenId) internal virtual {\\n\\t// \\tif (\\n\\t// \\t\\tperiods[tokenId].pricing == Ad.Pricing.OFFER &&\\n\\t// \\t\\toffered[tokenId].sender != address(0)\\n\\t// \\t) {\\n\\t// \\t\\t(bool success, ) = payable(offered[tokenId].sender).call{\\n\\t// \\t\\t\\tvalue: offered[tokenId].price,\\n\\t// \\t\\t\\tgas: 10000\\n\\t// \\t\\t}(\\\"\\\");\\n\\t// \\t\\tif (!success) {\\n\\t// \\t\\t\\t_eventEmitter().emitPaymentFailure(\\n\\t// \\t\\t\\t\\toffered[tokenId].sender,\\n\\t// \\t\\t\\t\\toffered[tokenId].price\\n\\t// \\t\\t\\t);\\n\\t// \\t\\t}\\n\\t// \\t}\\n\\t// }\\n}\\n\",\"keccak256\":\"0x1f5b818c1e331be4cc2226cea36f9bc666778f8b7dba3acda2f65bf29ff611d8\",\"license\":\"UNLICENSED\"},\"contracts/base/ProposalManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"./PeriodManager.sol\\\";\\n\\n/// @title ProposalManager - manages proposals.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\nabstract contract ProposalManager is PeriodManager {\\n\\tfunction _proposeToRight(uint256 tokenId, string memory metadata)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t{\\n\\t\\tproposed[tokenId] = Draft.Proposal(metadata, msg.sender);\\n\\t}\\n\\n\\tfunction _clearProposal(uint256 tokenId) internal virtual {\\n\\t\\tproposed[tokenId] = Draft.Proposal(\\\"\\\", proposed[tokenId].proposer);\\n\\t}\\n\\n\\tfunction _acceptProposal(uint256 tokenId, string memory metadata)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t{\\n\\t\\taccepted[tokenId] = metadata;\\n\\t\\t_clearProposal(tokenId);\\n\\t}\\n}\\n\",\"keccak256\":\"0xb2e373ae7123596e26be707787d497f572e5164f11cf17f37f00ae4a85b294c5\",\"license\":\"UNLICENSED\"},\"contracts/base/SpaceManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../accessors/NameAccessor.sol\\\";\\nimport \\\"../interfaces/IMediaRegistry.sol\\\";\\nimport \\\"../interfaces/IAdPool.sol\\\";\\nimport \\\"../interfaces/IEventEmitter.sol\\\";\\nimport \\\"./Storage.sol\\\";\\n\\n/// @title SpaceManager - manages ad spaces.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\nabstract contract SpaceManager is NameAccessor, Storage {\\n\\tfunction _newSpace(string memory spaceMetadata) internal virtual {\\n\\t\\trequire(\\n\\t\\t\\t!spaced[spaceMetadata] && !_adPool().spaced(spaceMetadata),\\n\\t\\t\\t\\\"KD100\\\"\\n\\t\\t);\\n\\t\\tspaced[spaceMetadata] = true;\\n\\t\\t_adPool().addSpace(spaceMetadata);\\n\\t\\t_eventEmitter().emitNewSpace(spaceMetadata);\\n\\t}\\n\\n\\t/**\\n\\t * Accessors\\n\\t */\\n\\tfunction _mediaRegistry() internal view virtual returns (IMediaRegistry) {\\n\\t\\treturn IMediaRegistry(mediaRegistryAddress());\\n\\t}\\n\\n\\tfunction _adPool() internal view virtual returns (IAdPool) {\\n\\t\\treturn IAdPool(adPoolAddress());\\n\\t}\\n\\n\\tfunction _eventEmitter() internal view virtual returns (IEventEmitter) {\\n\\t\\treturn IEventEmitter(eventEmitterAddress());\\n\\t}\\n}\\n\",\"keccak256\":\"0x0fba9fd5f94dceff697203b93bfe4e7a5427c88b4c94a09c02c01cc85f4a2d6d\",\"license\":\"UNLICENSED\"},\"contracts/base/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../libraries/Ad.sol\\\";\\nimport \\\"../libraries/Sale.sol\\\";\\nimport \\\"../libraries/Draft.sol\\\";\\n\\n/// @title Storage - saves state values. Note that the order of the state values\\n///                  should not be reordered when upgrading because the slot would be shifted.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\nabstract contract Storage {\\n\\t/// @dev Returns spaceId that is tied with space metadata.\\n\\tmapping(string => bool) public spaced;\\n\\n\\t/// @dev tokenId <- metadata * displayStartTimestamp * displayEndTimestamp\\n\\tmapping(uint256 => Ad.Period) public periods;\\n\\n\\t/// @dev Maps the space metadata with tokenIds of ad periods.\\n\\tmapping(string => uint256[]) internal _periodKeys;\\n\\n\\t// /// @dev Maps a tokenId with bidding info\\n\\t// mapping(uint256 => Sale.Bidding) public bidding;\\n\\n\\t// /// @dev Maps a tokenId with offer info\\n\\t// mapping(uint256 => Sale.Offer) public offered;\\n\\n\\t/// @dev Maps a tokenId with appeal info\\n\\tmapping(uint256 => Sale.Appeal[]) public appealed;\\n\\n\\t/// @dev The total bidding value\\n\\tuint256 internal _biddingTotal;\\n\\n\\t/// @dev The total value offered by users\\n\\tuint256 internal _offeredTotal;\\n\\n\\t/// @dev Maps a tokenId with the proposal content.\\n\\tmapping(uint256 => Draft.Proposal) public proposed;\\n\\n\\t/// @dev Maps a tokenId with denied reasons.\\n\\tmapping(uint256 => Draft.Denied[]) public deniedReasons;\\n\\n\\t/// @dev Maps a tokenId with the content metadata.\\n\\tmapping(uint256 => string) public accepted;\\n}\\n\",\"keccak256\":\"0x13a1c8a89450e45188bbd682fc2ed1fdcf441ccf6c1dc4247c3881951d61ecbb\",\"license\":\"UNLICENSED\"},\"contracts/common/BlockTimestamp.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\n/// @title BlockTimestamp - gets a block timestamp.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\nabstract contract BlockTimestamp {\\n\\t/// @dev Method that exists purely to be overridden for tests\\n\\tfunction _blockTimestamp() internal view virtual returns (uint256) {\\n\\t\\treturn block.timestamp;\\n\\t}\\n}\\n\",\"keccak256\":\"0x417bf100ecc94b19a01559e899f68e19777eae593c783d8280d13bcabc8e43a2\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IAdPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../libraries/Ad.sol\\\";\\n\\n/// @title IAdPool - stores all ads accorss every space.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface IAdPool {\\n\\tfunction spaced(string memory spaceMetadata) external view returns (bool);\\n\\n\\tfunction addSpace(string memory spaceMetadata) external;\\n\\n\\tfunction addPeriod(uint256 tokenId, Ad.Period memory period) external;\\n\\n\\tfunction deletePeriod(uint256 tokenId) external;\\n\\n\\tfunction mediaProxyOf(uint256 tokenId) external view returns (address);\\n}\\n\",\"keccak256\":\"0xd9956cbe2f2d5ba08343229d69b8a7729aac3cca4a1e66d4daa3f27394979f0c\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n\\t/**\\n\\t * @dev Returns true if this contract implements the interface defined by\\n\\t * `interfaceId`. See the corresponding\\n\\t * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n\\t * to learn more about how these ids are created.\\n\\t *\\n\\t * This function call must use less than 30 000 gas.\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x47fb51ba47a6f1dd885afda05a6d11d7f6bb24d594dbfaa4411c5185c202265e\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n\\t/**\\n\\t * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n\\t */\\n\\tevent Transfer(\\n\\t\\taddress indexed from,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 indexed tokenId\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n\\t */\\n\\tevent Approval(\\n\\t\\taddress indexed owner,\\n\\t\\taddress indexed approved,\\n\\t\\tuint256 indexed tokenId\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n\\t */\\n\\tevent ApprovalForAll(\\n\\t\\taddress indexed owner,\\n\\t\\taddress indexed operator,\\n\\t\\tbool approved\\n\\t);\\n\\n\\t/**\\n\\t * @dev Returns the number of tokens in ``owner``'s account.\\n\\t */\\n\\tfunction balanceOf(address owner) external view returns (uint256 balance);\\n\\n\\t/**\\n\\t * @dev Returns the owner of the `tokenId` token.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must exist.\\n\\t */\\n\\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n\\t/**\\n\\t * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n\\t * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `from` cannot be the zero address.\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must exist and be owned by `from`.\\n\\t * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Transfers `tokenId` token from `from` to `to`.\\n\\t *\\n\\t * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `from` cannot be the zero address.\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must be owned by `from`.\\n\\t * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n\\t * The approval is cleared when the token is transferred.\\n\\t *\\n\\t * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The caller must own the token or be an approved operator.\\n\\t * - `tokenId` must exist.\\n\\t *\\n\\t * Emits an {Approval} event.\\n\\t */\\n\\tfunction approve(address to, uint256 tokenId) external;\\n\\n\\t/**\\n\\t * @dev Returns the account approved for `tokenId` token.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must exist.\\n\\t */\\n\\tfunction getApproved(uint256 tokenId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (address operator);\\n\\n\\t/**\\n\\t * @dev Approve or remove `operator` as an operator for the caller.\\n\\t * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The `operator` cannot be the caller.\\n\\t *\\n\\t * Emits an {ApprovalForAll} event.\\n\\t */\\n\\tfunction setApprovalForAll(address operator, bool _approved) external;\\n\\n\\t/**\\n\\t * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n\\t *\\n\\t * See {setApprovalForAll}\\n\\t */\\n\\tfunction isApprovedForAll(address owner, address operator)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (bool);\\n\\n\\t/**\\n\\t * @dev Safely transfers `tokenId` token from `from` to `to`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `from` cannot be the zero address.\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must exist and be owned by `from`.\\n\\t * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes calldata data\\n\\t) external;\\n}\\n\",\"keccak256\":\"0x40ec6e28a9bb9cd5ffb08f4c1c4b54b61d8789be10153318a6c9418f25305f5a\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\t/**\\n\\t * @dev Returns the total amount of tokens stored by the contract.\\n\\t */\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n\\t * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n\\t */\\n\\tfunction tokenOfOwnerByIndex(address owner, uint256 index)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256 tokenId);\\n\\n\\t/**\\n\\t * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n\\t * Use along with {totalSupply} to enumerate all tokens.\\n\\t */\\n\\tfunction tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc09ef36867349fb40ae5ab24846feeeb1028b2f21b1f021f45c3a094eb685566\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\t/**\\n\\t * @dev Returns the token collection name.\\n\\t */\\n\\tfunction name() external view returns (string memory);\\n\\n\\t/**\\n\\t * @dev Returns the token collection symbol.\\n\\t */\\n\\tfunction symbol() external view returns (string memory);\\n\\n\\t/**\\n\\t * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n\\t */\\n\\tfunction tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6976b834147423dc07cf721d8bb7eaa1951d5f846e7c66f516959168cdbcb915\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n\\t/**\\n\\t * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n\\t * by `operator` from `from`, this function is called.\\n\\t *\\n\\t * It must return its Solidity selector to confirm the token transfer.\\n\\t * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n\\t *\\n\\t * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n\\t */\\n\\tfunction onERC721Received(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes calldata data\\n\\t) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x50af35c8123738f546a52aaa20d00a751d27337697cde9d2f7fbb991825b1dc7\",\"license\":\"MIT\"},\"contracts/interfaces/IEventEmitter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../libraries/Ad.sol\\\";\\n\\n/// @title IEventEmitter - emits events.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface IEventEmitter {\\n\\tfunction emitNewSpace(string memory metadata) external;\\n\\n\\tfunction emitDeleteSpace(string memory metadata) external;\\n\\n\\tfunction emitNewPeriod(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tstring memory tokenMetadata,\\n\\t\\tuint256 saleStartTimestamp,\\n\\t\\tuint256 saleEndTimestamp,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\tAd.Pricing pricing,\\n\\t\\tuint256 minPrice\\n\\t) external;\\n\\n\\tfunction emitDeletePeriod(uint256 tokenId) external;\\n\\n\\tfunction emitBuy(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 msgValue,\\n\\t\\taddress msgSender,\\n\\t\\tuint256 blockTimestamp\\n\\t) external;\\n\\n\\tfunction emitBid(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 msgValue,\\n\\t\\taddress msgSender,\\n\\t\\tuint256 blockTimestamp\\n\\t) external;\\n\\n\\tfunction emitBidWithProposal(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 msgValue,\\n\\t\\taddress msgSender,\\n\\t\\tstring memory metadata,\\n\\t\\tuint256 blockTimestamp\\n\\t) external;\\n\\n\\tfunction emitSelectProposal(uint256 tokenId, address successfulBidder)\\n\\t\\texternal;\\n\\n\\tfunction emitReceiveToken(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 price,\\n\\t\\taddress buyer,\\n\\t\\tuint256 blockTimestamp\\n\\t) external;\\n\\n\\tfunction emitOfferPeriod(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\taddress sender,\\n\\t\\tuint256 price\\n\\t) external;\\n\\n\\tfunction emitCancelOffer(uint256 tokenId) external;\\n\\n\\tfunction emitAcceptOffer(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tstring memory tokenMetadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\tuint256 price\\n\\t) external;\\n\\n\\tfunction emitWithdraw(uint256 amount) external;\\n\\n\\tfunction emitPropose(uint256 tokenId, string memory metadata) external;\\n\\n\\tfunction emitAcceptProposal(uint256 tokenId, string memory metadata) external;\\n\\n\\tfunction emitDenyProposal(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory metadata,\\n\\t\\tstring memory reason,\\n\\t\\tbool offensive\\n\\t) external;\\n\\n\\tfunction emitTransferCustom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) external;\\n\\n\\tfunction emitNewMedia(\\n\\t\\taddress proxy,\\n\\t\\taddress mediaEOA,\\n\\t\\tstring memory applicationMetadata,\\n\\t\\tstring memory updatableMetadata,\\n\\t\\tuint256 saltNonce\\n\\t) external;\\n\\n\\tfunction emitUpdateMedia(\\n\\t\\taddress proxy,\\n\\t\\taddress mediaEOA,\\n\\t\\tstring memory accountMetadata\\n\\t) external;\\n\\n\\tfunction emitPaymentFailure(address receiver, uint256 price) external;\\n}\\n\",\"keccak256\":\"0xbb3ab5a35f8c4509706450632e244a5d183350722625c605e095849972b23b74\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IMediaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../libraries/Ad.sol\\\";\\n\\n/// @title MediaRegistry - registers a list of media accounts.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface IMediaRegistry {\\n\\tstruct Account {\\n\\t\\taddress proxy;\\n\\t\\taddress mediaEOA;\\n\\t\\tstring applicationMetadata;\\n\\t\\tstring updatableMetadata;\\n\\t}\\n\\n\\tfunction allAccounts(address proxy)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\taddress,\\n\\t\\t\\taddress,\\n\\t\\t\\tstring memory,\\n\\t\\t\\tstring memory\\n\\t\\t);\\n\\n\\t/// @dev Adds media account.\\n\\t/// @param proxy address of the proxy contract\\n\\t/// @param applicationMetadata string of constant metadata for the defailts of the account\\n\\t/// @param updatableMetadata string of constant metadata for the defailts of the account\\n\\t/// @param mediaEOA address of the media account\\n\\tfunction addMedia(\\n\\t\\taddress proxy,\\n\\t\\tstring memory applicationMetadata,\\n\\t\\tstring memory updatableMetadata,\\n\\t\\taddress mediaEOA\\n\\t) external;\\n\\n\\t/// @dev Updates media account.\\n\\t/// @param metadata string of the account metadata\\n\\t/// @param mediaEOA address of the media account\\n\\tfunction updateMedia(address mediaEOA, string memory metadata) external;\\n\\n\\tfunction updateApplicationMetadata(address proxy, string memory metadata)\\n\\t\\texternal;\\n\\n\\t/// @dev Returns whether the account has created or not.\\n\\t/// @param proxy address of the proxy contract that represents an account.\\n\\tfunction created(address proxy) external view returns (bool);\\n\\n\\t/// @dev Returns the owner of the account.\\n\\t/// @param proxy address of the proxy contract that represents an account.\\n\\tfunction ownerOf(address proxy) external view returns (address);\\n}\\n\",\"keccak256\":\"0x63655aa8531480b3da0c4b3f6cd63d72c3ca678661fa52dd90e5ab1a89b43131\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/INameRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\n/// @title INameRegistry - saves a set of addresses used in the system.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface INameRegistry {\\n\\t/// @dev Sets the address associated with the key name.\\n\\t///      If the address is the contract, not an EOA, it is\\n\\t///      saved as the allowed contract list.\\n\\t/// @param key bytes32 of the key\\n\\t/// @param value address of the value\\n\\tfunction set(bytes32 key, address value) external;\\n\\n\\t/// @dev Gets the address associated with the key name.\\n\\t/// @param key bytes32 of the key\\n\\tfunction get(bytes32 key) external view returns (address);\\n\\n\\t/// @dev Returns whether or not the address is the one that we deployed.\\n\\t/// @param caller address of the msg.sender\\n\\tfunction allowedContracts(address caller) external returns (bool);\\n\\n\\t/// @dev Gets the deployer of NameRegistry.\\n\\tfunction deployer() external view returns (address);\\n}\\n\",\"keccak256\":\"0xb4612b34aa95a45ed84877f60adc23f5f8eb941a00a2644dc29ecea26c1c032f\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Ad.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nlibrary Ad {\\n\\tuint256 private constant _ID_LENGTH = 100000000000000000000000000000000;\\n\\t// 0.RRP     : Recommended Retail Price\\n\\t// 1.DUTCH   : Dutch Auction\\n\\t// 2.ENGLISH : English Acction\\n\\t// 3.OFFER   : Offered by Others\\n\\t// 4.OPEN    : Open Bid by revealing the content\\n\\tenum Pricing {\\n\\t\\tRRP,\\n\\t\\tDUTCH,\\n\\t\\tENGLISH,\\n\\t\\tOFFER,\\n\\t\\tOPEN\\n\\t}\\n\\tstruct Period {\\n\\t\\taddress mediaProxy;\\n\\t\\tstring spaceMetadata;\\n\\t\\tstring tokenMetadata;\\n\\t\\tuint256 saleStartTimestamp;\\n\\t\\tuint256 saleEndTimestamp;\\n\\t\\tuint256 displayStartTimestamp;\\n\\t\\tuint256 displayEndTimestamp;\\n\\t\\tPricing pricing;\\n\\t\\tuint256 minPrice;\\n\\t\\tuint256 startPrice;\\n\\t\\tbool sold;\\n\\t}\\n\\n\\tfunction id(\\n\\t\\tstring memory metadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp\\n\\t) public pure returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\tuint256(\\n\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\tabi.encodePacked(metadata, displayStartTimestamp, displayEndTimestamp)\\n\\t\\t\\t\\t)\\n\\t\\t\\t) % _ID_LENGTH;\\n\\t}\\n}\\n\",\"keccak256\":\"0x98b8f7d36adbd4e0b75ef9c5a0ec7045e0661b9015a90beffa30004f35ff7039\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Draft.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nlibrary Draft {\\n\\tstruct Denied {\\n\\t\\tstring reason;\\n\\t\\tbool offensive;\\n\\t}\\n\\tstruct Proposal {\\n\\t\\tstring content;\\n\\t\\taddress proposer;\\n\\t}\\n}\\n\",\"keccak256\":\"0x73a65000bc31e3160bb4919408b5b3d5be6151f98672f7f1d82aa6c8df7127fc\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Sale.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"./Ad.sol\\\";\\n\\nlibrary Sale {\\n\\tstruct Bidding {\\n\\t\\tuint256 tokenId;\\n\\t\\taddress bidder;\\n\\t\\tuint256 price;\\n\\t}\\n\\tstruct Offer {\\n\\t\\tstring spaceMetadata;\\n\\t\\tuint256 displayStartTimestamp;\\n\\t\\tuint256 displayEndTimestamp;\\n\\t\\taddress sender;\\n\\t\\tuint256 price;\\n\\t}\\n\\tstruct Appeal {\\n\\t\\tuint256 tokenId;\\n\\t\\taddress sender;\\n\\t\\tuint256 price;\\n\\t\\tstring content;\\n\\t}\\n\\n\\tfunction _startPrice(Ad.Period memory period)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tif (period.pricing == Ad.Pricing.RRP) {\\n\\t\\t\\treturn period.minPrice;\\n\\t\\t} else if (period.pricing == Ad.Pricing.DUTCH) {\\n\\t\\t\\treturn period.minPrice * 10;\\n\\t\\t} else if (period.pricing == Ad.Pricing.ENGLISH) {\\n\\t\\t\\treturn period.minPrice;\\n\\t\\t} else if (period.pricing == Ad.Pricing.OFFER) {\\n\\t\\t\\treturn period.minPrice;\\n\\t\\t} else if (period.pricing == Ad.Pricing.OPEN) {\\n\\t\\t\\treturn period.minPrice;\\n\\t\\t} else {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xa47117fb666229d07c56667002b65cfc371e30c265ca6e3f113d9c908144c8a9\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Schedule.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nlibrary Schedule {\\n\\tfunction _isOverlapped(\\n\\t\\tuint256 newFromTimestamp,\\n\\t\\tuint256 newToTimestamp,\\n\\t\\tuint256 currentFromTimestamp,\\n\\t\\tuint256 currentToTimestamp\\n\\t) internal pure returns (bool) {\\n\\t\\treturn\\n\\t\\t\\t!(_isPast(newToTimestamp, currentFromTimestamp) ||\\n\\t\\t\\t\\t_isFuture(newFromTimestamp, currentToTimestamp));\\n\\t}\\n\\n\\tfunction _isPast(uint256 newToTimestamp, uint256 currentFromTimestamp)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn newToTimestamp < currentFromTimestamp;\\n\\t}\\n\\n\\tfunction _isFuture(uint256 newFromTimestamp, uint256 currentToTimestamp)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn currentToTimestamp < newFromTimestamp;\\n\\t}\\n}\\n\",\"keccak256\":\"0x0073afdac9f47643e4a0db2b3600f5274dfc1e8c511ca20e44965c7ce67ec881\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060016016556159e280620000266000396000f3fe6080604052600436106102185760003560e01c806301ffc9a71461021d57806306fdde0314610252578063077f224a14610274578063081812fc14610296578063095ea7b3146102c357806313c1f278146102e3578063179bcff71461030357806318160ddd1461032357806323b872dd1461034257806327b7a2f5146103625780632bc4bc68146103805780632f745c59146103a057806332b18f6d146103c05780633ccfd60b146103e057806342842e0e146103f5578063430bf08a146104155780634b455a511461042a5780634f6ccce71461044a57806353c147761461046a57806358ba1bb81461049857806360c5cc3a146104c65780636352211e146104e657806365045a651461050657806365d13a90146105415780636a58767e1461056f57806370a08231146105845780637a3c4c17146105a45780637ccacd49146105c4578063899c9989146105d75780638da5cb5b146105f75780638f6059d61461060c57806395d89b4114610621578063a22cb46514610636578063b69ef8a814610656578063b88d4fde14610669578063c531c23614610689578063c87b56dd146106a9578063c9cd71b5146106c9578063d028bd66146106de578063d4f6b5ec1461070b578063d96a094a1461072b578063e6e268f41461073e578063e985e9c514610753578063ea4a110414610773578063f0726291146107aa578063f19b8273146107bf578063f2286c95146107df575b600080fd5b34801561022957600080fd5b5061023d610238366004614bb7565b61080f565b60405190151581526020015b60405180910390f35b34801561025e57600080fd5b50610267610846565b6040516102499190614c2c565b34801561028057600080fd5b5061029461028f366004614cff565b6108d8565b005b3480156102a257600080fd5b506102b66102b1366004614d76565b61095b565b6040516102499190614d8f565b3480156102cf57600080fd5b506102946102de366004614da3565b6109e8565b3480156102ef57600080fd5b506102946102fe366004614ddd565b610af4565b34801561030f57600080fd5b5061029461031e366004614e2c565b610d34565b34801561032f57600080fd5b50600a545b604051908152602001610249565b34801561034e57600080fd5b5061029461035d366004614e7b565b610eb2565b34801561036e57600080fd5b50600c546001600160a01b03166102b6565b34801561038c57600080fd5b5061029461039b366004614ebc565b610f2b565b3480156103ac57600080fd5b506103346103bb366004614da3565b610fe1565b3480156103cc57600080fd5b506102946103db366004614ef0565b611077565b3480156103ec57600080fd5b506102946113af565b34801561040157600080fd5b50610294610410366004614e7b565b61152a565b34801561042157600080fd5b506102b6611535565b34801561043657600080fd5b50610294610445366004614d76565b6115e9565b34801561045657600080fd5b50610334610465366004614d76565b611821565b34801561047657600080fd5b5061048a610485366004614ebc565b6118b4565b604051610249929190614f12565b3480156104a457600080fd5b506104b86104b3366004614d76565b611c09565b604051610249929190614f34565b3480156104d257600080fd5b506102946104e1366004614d76565b611cb6565b3480156104f257600080fd5b506102b6610501366004614d76565b611ebc565b34801561051257600080fd5b5061023d610521366004614ebc565b8051602081830181018051600d8252928201919093012091525460ff1681565b34801561054d57600080fd5b5061056161055c366004614ef0565b611ef1565b604051610249929190614f5e565b34801561057b57600080fd5b506102b6611fbd565b34801561059057600080fd5b5061033461059f366004614f82565b611ff4565b3480156105b057600080fd5b506103346105bf366004614d76565b61207b565b6102946105d2366004614f9f565b612352565b3480156105e357600080fd5b506102946105f2366004614fcf565b61257c565b34801561060357600080fd5b506102b6612919565b34801561061857600080fd5b506102b661295e565b34801561062d57600080fd5b50610267612994565b34801561064257600080fd5b50610294610651366004615071565b6129a3565b34801561066257600080fd5b5047610334565b34801561067557600080fd5b506102946106843660046150aa565b612a64565b34801561069557600080fd5b506103346106a4366004615129565b612a9c565b3480156106b557600080fd5b506102676106c4366004614d76565b612b32565b3480156106d557600080fd5b506102b6612c8e565b3480156106ea57600080fd5b506106fe6106f9366004614ebc565b612cbe565b6040516102499190615176565b34801561071757600080fd5b50610294610726366004614f9f565b612d2e565b610294610739366004614d76565b612d9d565b34801561074a57600080fd5b50610334612f47565b34801561075f57600080fd5b5061023d61076e3660046151ba565b612f64565b34801561077f57600080fd5b5061079361078e366004614d76565b612f92565b6040516102499b9a99989796959493929190615220565b3480156107b657600080fd5b506102b6613109565b3480156107cb57600080fd5b506102676107da366004614d76565b61313f565b3480156107eb57600080fd5b506107ff6107fa366004614ef0565b6131d9565b60405161024994939291906152a8565b60006001600160e01b031982166380ac58cd60e01b148061084057506001600160e01b03198216635b5e139f60e01b145b92915050565b606060008054610855906152df565b80601f0160208091040260200160405190810160405280929190818152602001828054610881906152df565b80156108ce5780601f106108a3576101008083540402835291602001916108ce565b820191906000526020600020905b8154815290600101906020018083116108b157829003601f168201915b5050505050905090565b82516108eb906000906020860190614a75565b50826040516020016108fd919061531a565b60405160208183030381529060405260019080519060200190610921929190614a75565b508151610935906002906020850190614a75565b50600c80546001600160a01b0319166001600160a01b038316179055505050565b505050565b6000610966826132b5565b6109cc5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006109f382611ebc565b9050806001600160a01b0316836001600160a01b03161415610a615760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016109c3565b336001600160a01b0382161480610a7d5750610a7d8133612f64565b610aea5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b60648201526084016109c3565b61095683836132d2565b33610afd613340565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401610b289190614d8f565b60206040518083038186803b158015610b4057600080fd5b505afa158015610b54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b78919061534a565b6001600160a01b031614610b9e5760405162461bcd60e51b81526004016109c390615367565b60008381526013602052604081208054610bb7906152df565b80601f0160208091040260200160405190810160405280929190818152602001828054610be3906152df565b8015610c305780601f10610c0557610100808354040283529160200191610c30565b820191906000526020600020905b815481529060010190602001808311610c1357829003601f168201915b50505050509050805160001415610c595760405162461bcd60e51b81526004016109c390615386565b600084815260146020908152604080832081518083019092528682528515158284015280546001810182559084529282902081518051929460020290910192610ca792849290910190614a75565b50602091909101516001909101805460ff1916911515919091179055610ccb61334a565b6001600160a01b0316633ebf7371858386866040518563ffffffff1660e01b8152600401610cfc94939291906153a5565b600060405180830381600087803b158015610d1657600080fd5b505af1158015610d2a573d6000803e3d6000fd5b5050505050505050565b33610d3d613340565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401610d689190614d8f565b60206040518083038186803b158015610d8057600080fd5b505afa158015610d94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db8919061534a565b6001600160a01b031614610dde5760405162461bcd60e51b81526004016109c390615367565b610de6613340565b6001600160a01b031663179bcff783836040518363ffffffff1660e01b8152600401610e139291906153e4565b600060405180830381600087803b158015610e2d57600080fd5b505af1158015610e41573d6000803e3d6000fd5b50505050610e4d61334a565b6001600160a01b031663262360133084846040518463ffffffff1660e01b8152600401610e7c93929190615408565b600060405180830381600087803b158015610e9657600080fd5b505af1158015610eaa573d6000803e3d6000fd5b505050505050565b610ebd838383613354565b610ec561334a565b6001600160a01b031663465bcf058484846040518463ffffffff1660e01b8152600401610ef49392919061543d565b600060405180830381600087803b158015610f0e57600080fd5b505af1158015610f22573d6000803e3d6000fd5b50505050505050565b33610f34613340565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401610f5f9190614d8f565b60206040518083038186803b158015610f7757600080fd5b505afa158015610f8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610faf919061534a565b6001600160a01b031614610fd55760405162461bcd60e51b81526004016109c390615367565b610fde81613385565b50565b6000610fec83611ff4565b821061104e5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016109c3565b506001600160a01b03919091166000908152600860209081526040808320938352929052205490565b33611080613340565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016110ab9190614d8f565b60206040518083038186803b1580156110c357600080fd5b505afa1580156110d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fb919061534a565b6001600160a01b0316146111215760405162461bcd60e51b81526004016109c390615367565b600082815260106020526040902054811180159061117a5750600082815260106020526040812080548390811061115a5761115a615461565b60009182526020909120600160049092020101546001600160a01b031614155b6111965760405162461bcd60e51b81526004016109c390615477565b426000838152600e6020526040902060040154106111c65760405162461bcd60e51b81526004016109c390615496565b60008281526010602052604081208054839081106111e6576111e6615461565b9060005260206000209060040201604051806080016040529081600082015481526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160028201548152602001600382018054611252906152df565b80601f016020809104026020016040519081016040528092919081815260200182805461127e906152df565b80156112cb5780601f106112a0576101008083540402835291602001916112cb565b820191906000526020600020905b8154815290600101906020018083116112ae57829003601f168201915b50505050508152505090506112e4816020015184613533565b6112ee838361353e565b600083815260106020526040812061130591614af9565b61130d61334a565b6020820151604051630249d31960e51b8152600481018690526001600160a01b03918216602482015291169063493a632090604401600060405180830381600087803b15801561135c57600080fd5b505af1158015611370573d6000803e3d6000fd5b5050505061137c61334a565b6001600160a01b031663465bcf05308360200151866040518463ffffffff1660e01b8152600401610ef49392919061543d565b336113b8613340565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016113e39190614d8f565b60206040518083038186803b1580156113fb57600080fd5b505afa15801561140f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611433919061534a565b6001600160a01b0316146114595760405162461bcd60e51b81526004016109c390615367565b6000611463612f47565b604051909150600090339061271090849084818181858888f193505050503d80600081146114ad576040519150601f19603f3d011682016040523d82523d6000602084013e6114b2565b606091505b5050905080156114f1576114c461334a565b6001600160a01b031663279862cb836040518263ffffffff1660e01b8152600401610e7c91815260200190565b6114f961334a565b6001600160a01b031663ec720b9b33846040518363ffffffff1660e01b8152600401610e7c9291906154b5565b5050565b610ebd838383613790565b600c546040516415985d5b1d60da1b60208201526000916001600160a01b031690638eaa6ac0906025015b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161159491815260200190565b60206040518083038186803b1580156115ac57600080fd5b505afa1580156115c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e4919061534a565b905090565b336115f2613340565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b815260040161161d9190614d8f565b60206040518083038186803b15801561163557600080fd5b505afa158015611649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166d919061534a565b6001600160a01b0316146116935760405162461bcd60e51b81526004016109c390615367565b6000818152600e60205260409020546001600160a01b03166116c75760405162461bcd60e51b81526004016109c390615477565b306116d182611ebc565b6001600160a01b0316146116f75760405162461bcd60e51b81526004016109c3906154ce565b6000818152601060205260409020541561173b5760405162461bcd60e51b8152602060048201526005602482015264096886264760db1b60448201526064016109c3565b611744816137ab565b61174d816137dc565b61175561334a565b6001600160a01b031663ccb55a98826040518263ffffffff1660e01b815260040161178291815260200190565b600060405180830381600087803b15801561179c57600080fd5b505af11580156117b0573d6000803e3d6000fd5b505050506117bc61334a565b6001600160a01b031663465bcf05306000846040518463ffffffff1660e01b81526004016117ec9392919061543d565b600060405180830381600087803b15801561180657600080fd5b505af115801561181a573d6000803e3d6000fd5b5050505050565b600061182c600a5490565b821061188f5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016109c3565b600a82815481106118a2576118a2615461565b90600052602060002001549050919050565b60606000806118c284612cbe565b905060005b8151811015611beb576000600e60008484815181106118e8576118e8615461565b60200260200101518152602001908152602001600020604051806101600160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600182018054611949906152df565b80601f0160208091040260200160405190810160405280929190818152602001828054611975906152df565b80156119c25780601f10611997576101008083540402835291602001916119c2565b820191906000526020600020905b8154815290600101906020018083116119a557829003601f168201915b505050505081526020016002820180546119db906152df565b80601f0160208091040260200160405190810160405280929190818152602001828054611a07906152df565b8015611a545780601f10611a2957610100808354040283529160200191611a54565b820191906000526020600020905b815481529060010190602001808311611a3757829003601f168201915b50505091835250506003820154602082015260048083015460408301526005830154606083015260068301546080830152600783015460a09092019160ff1690811115611aa357611aa36151e8565b6004811115611ab457611ab46151e8565b81526008820154602082015260098201546040820152600a9091015460ff1615156060909101529050428160a0015111158015611af55750428160c0015110155b15611bd85760156000848481518110611b1057611b10615461565b60200260200101518152602001908152602001600020838381518110611b3857611b38615461565b6020026020010151818054611b4c906152df565b80601f0160208091040260200160405190810160405280929190818152602001828054611b78906152df565b8015611bc55780601f10611b9a57610100808354040283529160200191611bc5565b820191906000526020600020905b815481529060010190602001808311611ba857829003601f168201915b5050505050915094509450505050915091565b5080611be381615503565b9150506118c7565b50600060405180602001604052806000815250909250925050915091565b601360205260009081526040902080548190611c24906152df565b80601f0160208091040260200160405190810160405280929190818152602001828054611c50906152df565b8015611c9d5780601f10611c7257610100808354040283529160200191611c9d565b820191906000526020600020905b815481529060010190602001808311611c8057829003601f168201915b505050600190930154919250506001600160a01b031682565b33611cbf613340565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401611cea9190614d8f565b60206040518083038186803b158015611d0257600080fd5b505afa158015611d16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3a919061534a565b6001600160a01b031614611d605760405162461bcd60e51b81526004016109c390615367565b60008181526013602052604081208054611d79906152df565b80601f0160208091040260200160405190810160405280929190818152602001828054611da5906152df565b8015611df25780601f10611dc757610100808354040283529160200191611df2565b820191906000526020600020905b815481529060010190602001808311611dd557829003601f168201915b50505050509050805160001415611e1b5760405162461bcd60e51b81526004016109c390615386565b6000828152601360205260409020600101546001600160a01b0316611e3f83611ebc565b6001600160a01b031614611e7d5760405162461bcd60e51b81526020600482015260056024820152644b4431333160d81b60448201526064016109c3565b611e878282613a53565b611e8f61334a565b6001600160a01b031663746f1b2083836040518363ffffffff1660e01b8152600401610e7c92919061551e565b6000818152600460205260408120546001600160a01b0316806108405760405162461bcd60e51b81526004016109c390615477565b60146020528160005260406000208181548110611f0d57600080fd5b906000526020600020906002020160009150915050806000018054611f31906152df565b80601f0160208091040260200160405190810160405280929190818152602001828054611f5d906152df565b8015611faa5780601f10611f7f57610100808354040283529160200191611faa565b820191906000526020600020905b815481529060010190602001808311611f8d57829003601f168201915b5050506001909301549192505060ff1682565b600c546040516c4d65646961526567697374727960981b60208201526000916001600160a01b031690638eaa6ac090602d01611560565b60006001600160a01b03821661205f5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016109c3565b506001600160a01b031660009081526005602052604090205490565b6000818152600e602090815260408083208151610160810190925280546001600160a01b031682526001810180548594840191906120b8906152df565b80601f01602080910402602001604051908101604052809291908181526020018280546120e4906152df565b80156121315780601f1061210657610100808354040283529160200191612131565b820191906000526020600020905b81548152906001019060200180831161211457829003601f168201915b5050505050815260200160028201805461214a906152df565b80601f0160208091040260200160405190810160405280929190818152602001828054612176906152df565b80156121c35780601f10612198576101008083540402835291602001916121c3565b820191906000526020600020905b8154815290600101906020018083116121a657829003601f168201915b50505091835250506003820154602082015260048083015460408301526005830154606083015260068301546080830152600783015460a09092019160ff1690811115612212576122126151e8565b6004811115612223576122236151e8565b81526008820154602082015260098201546040820152600a9091015460ff161515606090910152905060008160e001516004811115612264576122646151e8565b141561227557610100015192915050565b60018160e00151600481111561228d5761228d6151e8565b14156122f757806060015181608001516122a79190615537565b60608201516122b69042615537565b8261010001518361012001516122cc9190615537565b6122d6919061554e565b6122e0919061556d565b8161012001516122f09190615537565b9392505050565b60048160e00151600481111561230f5761230f6151e8565b141561231e5750600092915050565b60405162461bcd60e51b81526020600482015260096024820152681b9bdd08195e1a5cdd60ba1b60448201526064016109c3565b3361235b613340565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016123869190614d8f565b60206040518083038186803b15801561239e57600080fd5b505afa1580156123b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d6919061534a565b6001600160a01b031614156123fd5760405162461bcd60e51b81526004016109c39061558f565b600260165414156124505760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109c3565b600260165561245e82613a7c565b346011600082825461247091906155ae565b909155505060008281526010602090815260408083208151608081018352868152338185019081523493820193845260608201878152835460018082018655948852968690208351600490980201968755905192860180546001600160a01b0319166001600160a01b03909416939093179092559151600285015551805191939261250392600385019290910190614a75565b50505061250e61334a565b6001600160a01b0316630d2657bf83343385426040518663ffffffff1660e01b81526004016125419594939291906155c6565b600060405180830381600087803b15801561255b57600080fd5b505af115801561256f573d6000803e3d6000fd5b5050600160165550505050565b33612585613340565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016125b09190614d8f565b60206040518083038186803b1580156125c857600080fd5b505afa1580156125dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612600919061534a565b6001600160a01b0316146126265760405162461bcd60e51b81526004016109c390615367565b42851161265d5760405162461bcd60e51b81526020600482015260056024820152644b4431313160d81b60448201526064016109c3565b8385106126945760405162461bcd60e51b815260206004820152600560248201526425a218989960d91b60448201526064016109c3565b8284106126cb5760405162461bcd60e51b81526020600482015260056024820152644b4431313360d81b60448201526064016109c3565b600d876040516126db9190615605565b9081526040519081900360200190205460ff166126fb576126fb87613385565b612706878585613b6d565b6040516303fb4aab60e41b8152600090739F397D94EC32D43EeC60dCF9A38a44322D54d42A90633fb4aab090612744908b9089908990600401615621565b60206040518083038186803b15801561275c57600080fd5b505af4158015612770573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127949190615646565b90506000604051806101600160405280306001600160a01b031681526020018a81526020018981526020016127c64290565b81526020018881526020018781526020018681526020018560048111156127ef576127ef6151e8565b81526020018481526020016000815260200160001515815250905061281381613e24565b610120820152612824898383613ef8565b61282f30838a614049565b61283761334a565b6001600160a01b0316637bab635a838b8b428c8c8c8c8c6040518a63ffffffff1660e01b81526004016128729998979695949392919061565f565b600060405180830381600087803b15801561288c57600080fd5b505af11580156128a0573d6000803e3d6000fd5b505050506128ac61334a565b6001600160a01b031663465bcf05600030856040518463ffffffff1660e01b81526004016128dc9392919061543d565b600060405180830381600087803b1580156128f657600080fd5b505af115801561290a573d6000803e3d6000fd5b50505050505050505050505050565b600c5460408051631abe729160e31b815290516000926001600160a01b03169163d5f39488916004808301926020929190829003018186803b1580156115ac57600080fd5b600c546040516b4d65646961466163746f727960a01b60208201526000916001600160a01b031690638eaa6ac090602c01611560565b606060018054610855906152df565b6001600160a01b0382163314156129f85760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b60448201526064016109c3565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b612a6e3383614072565b612a8a5760405162461bcd60e51b81526004016109c3906156ca565b612a9684848484614134565b50505050565b6040516303fb4aab60e41b8152600090739F397D94EC32D43EeC60dCF9A38a44322D54d42A90633fb4aab090612ada90879087908790600401615621565b60206040518083038186803b158015612af257600080fd5b505af4158015612b06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b2a9190615646565b949350505050565b6060612b3d826132b5565b612ba15760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016109c3565b600060028054612bb0906152df565b905011612c535760008281526003602052604090208054612bd0906152df565b80601f0160208091040260200160405190810160405280929190818152602001828054612bfc906152df565b8015612c495780601f10612c1e57610100808354040283529160200191612c49565b820191906000526020600020905b815481529060010190602001808311612c2c57829003601f168201915b5050505050610840565b600260036000848152602001908152602001600020604051602001612c799291906157b5565b60405160208183030381529060405292915050565b600c54604051651059141bdbdb60d21b60208201526000916001600160a01b031690638eaa6ac090602601611560565b6060600f82604051612cd09190615605565b9081526040805191829003602090810183208054808302850183019093528284529190830182828015612d2257602002820191906000526020600020905b815481526020019060010190808311612d0e575b50505050509050919050565b33612d3883611ebc565b6001600160a01b031614612d5e5760405162461bcd60e51b81526004016109c390615367565b612d688282614167565b612d7061334a565b6001600160a01b0316635bcefb5383836040518363ffffffff1660e01b8152600401610e7c92919061551e565b33612da6613340565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401612dd19190614d8f565b60206040518083038186803b158015612de957600080fd5b505afa158015612dfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e21919061534a565b6001600160a01b03161415612e485760405162461bcd60e51b81526004016109c39061558f565b612e51816141cd565b6000818152600e60205260409020600a01805460ff19166001179055612e773382613533565b612e8a612e85600a3461556d565b61428a565b612e9261334a565b6001600160a01b0316635dd995b5823433426040516001600160e01b031960e087901b168152600481019490945260248401929092526001600160a01b031660448301526064820152608401600060405180830381600087803b158015612ef857600080fd5b505af1158015612f0c573d6000803e3d6000fd5b50505050612f1861334a565b6001600160a01b031663465bcf053033846040518463ffffffff1660e01b81526004016117ec9392919061543d565b600060125460115447612f5a9190615537565b6115e49190615537565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b600e60205260009081526040902080546001820180546001600160a01b039092169291612fbe906152df565b80601f0160208091040260200160405190810160405280929190818152602001828054612fea906152df565b80156130375780601f1061300c57610100808354040283529160200191613037565b820191906000526020600020905b81548152906001019060200180831161301a57829003601f168201915b50505050509080600201805461304c906152df565b80601f0160208091040260200160405190810160405280929190818152602001828054613078906152df565b80156130c55780601f1061309a576101008083540402835291602001916130c5565b820191906000526020600020905b8154815290600101906020018083116130a857829003601f168201915b50505060038401546004850154600586015460068701546007880154600889015460098a0154600a909a015498999598949750929550909360ff918216939091168b565b600c546040516b22bb32b73a22b6b4ba3a32b960a11b60208201526000916001600160a01b031690638eaa6ac090602c01611560565b60156020526000908152604090208054613158906152df565b80601f0160208091040260200160405190810160405280929190818152602001828054613184906152df565b80156131d15780601f106131a6576101008083540402835291602001916131d1565b820191906000526020600020905b8154815290600101906020018083116131b457829003601f168201915b505050505081565b601060205281600052604060002081815481106131f557600080fd5b600091825260209091206004909102018054600182015460028301546003840180549396506001600160a01b0390921694509291613232906152df565b80601f016020809104026020016040519081016040528092919081815260200182805461325e906152df565b80156132ab5780601f10613280576101008083540402835291602001916132ab565b820191906000526020600020905b81548152906001019060200180831161328e57829003601f168201915b5050505050905084565b6000908152600460205260409020546001600160a01b0316151590565b600081815260066020526040902080546001600160a01b0319166001600160a01b038416908117909155819061330782611ebc565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006115e4611fbd565b60006115e4613109565b61335e3382614072565b61337a5760405162461bcd60e51b81526004016109c3906156ca565b61095683838361432b565b600d816040516133959190615605565b9081526040519081900360200190205460ff1615801561343557506133b86144c4565b6001600160a01b03166365045a65826040518263ffffffff1660e01b81526004016133e39190614c2c565b60206040518083038186803b1580156133fb57600080fd5b505afa15801561340f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061343391906157ca565b155b6134695760405162461bcd60e51b815260206004820152600560248201526404b443130360dc1b60448201526064016109c3565b6001600d8260405161347b9190615605565b908152604051908190036020019020805491151560ff199092169190911790556134a36144c4565b6001600160a01b031663b8926f2c826040518263ffffffff1660e01b81526004016134ce9190614c2c565b600060405180830381600087803b1580156134e857600080fd5b505af11580156134fc573d6000803e3d6000fd5b5050505061350861334a565b6001600160a01b03166378689c64826040518263ffffffff1660e01b81526004016117ec9190614c2c565b61152630838361432b565b60005b60008381526010602052604090205481101561095657600083815260106020526040812080548390811061357757613577615461565b9060005260206000209060040201604051806080016040529081600082015481526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600282015481526020016003820180546135e3906152df565b80601f016020809104026020016040519081016040528092919081815260200182805461360f906152df565b801561365c5780601f106136315761010080835404028352916020019161365c565b820191906000526020600020905b81548152906001019060200180831161363f57829003601f168201915b505050505081525050905080604001516011600082825461367d9190615537565b9091555050818314156136a35761369e600a8260400151612e85919061556d565b61377d565b600081602001516001600160a01b0316826040015161271090604051600060405180830381858888f193505050503d80600081146136fd576040519150601f19603f3d011682016040523d82523d6000602084013e613702565b606091505b505090508061377b5761371361334a565b6001600160a01b031663ec720b9b836020015184604001516040518363ffffffff1660e01b81526004016137489291906154b5565b600060405180830381600087803b15801561376257600080fd5b505af1158015613776573d6000803e3d6000fd5b505050505b505b508061378881615503565b915050613541565b61095683838360405180602001604052806000815250612a64565b6137b4816144ce565b6040805160208082018084526000808452858152600390925292902090516115269290614a75565b6000818152600e6020526040812060010180546137f8906152df565b80601f0160208091040260200160405190810160405280929190818152602001828054613824906152df565b80156138715780601f1061384657610100808354040283529160200191613871565b820191906000526020600020905b81548152906001019060200180831161385457829003601f168201915b50505050509050600080600190505b600f836040516138909190615605565b908152604051908190036020019020546138ab9060016155ae565b8110156139145783600f846040516138c39190615605565b9081526040519081900360200190206138dd600184615537565b815481106138ed576138ed615461565b90600052602060002001541415613902578091505b8061390c81615503565b915050613880565b50806139565760405162461bcd60e51b81526020600482015260116024820152704e6f2064656c657461626c65206b65797360781b60448201526064016109c3565b600f826040516139669190615605565b908152604051908190036020019020613980600183615537565b8154811061399057613990615461565b60009182526020808320909101829055848252600e90526040812080546001600160a01b0319168155906139c76001830182614b1a565b6139d5600283016000614b1a565b5060006003820181905560048201819055600582018190556006820181905560078201805460ff19908116909155600883018290556009830191909155600a90910180549091169055613a266144c4565b6001600160a01b0316634b455a51846040518263ffffffff1660e01b8152600401610ef491815260200190565b60008281526015602090815260409091208251613a7292840190614a75565b5061152682614563565b60046000828152600e602052604090206007015460ff166004811115613aa457613aa46151e8565b14613ad95760405162461bcd60e51b81526020600482015260056024820152644b4431323760d81b60448201526064016109c3565b6000818152600e60205260409020600a015460ff1615613b0b5760405162461bcd60e51b81526004016109c3906154ce565b6000818152600e6020526040902060080154341015613b3c5760405162461bcd60e51b81526004016109c3906157e7565b426000828152600e60205260409020600401541015610fde5760405162461bcd60e51b81526004016109c390615496565b60005b600f84604051613b809190615605565b90815260405190819003602001902054811015612a96576000600e6000600f87604051613bad9190615605565b90815260200160405180910390208481548110613bcc57613bcc615461565b90600052602060002001548152602001908152602001600020604051806101600160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600182018054613c30906152df565b80601f0160208091040260200160405190810160405280929190818152602001828054613c5c906152df565b8015613ca95780601f10613c7e57610100808354040283529160200191613ca9565b820191906000526020600020905b815481529060010190602001808311613c8c57829003601f168201915b50505050508152602001600282018054613cc2906152df565b80601f0160208091040260200160405190810160405280929190818152602001828054613cee906152df565b8015613d3b5780601f10613d1057610100808354040283529160200191613d3b565b820191906000526020600020905b815481529060010190602001808311613d1e57829003601f168201915b50505091835250506003820154602082015260048083015460408301526005830154606083015260068301546080830152600783015460a09092019160ff1690811115613d8a57613d8a6151e8565b6004811115613d9b57613d9b6151e8565b81526008820154602082015260098201546040820152600a9091015460ff16151560609091015260a081015160c0820151919250613ddc91869186916145de565b15613e115760405162461bcd60e51b815260206004820152600560248201526404b443131360dc1b60448201526064016109c3565b5080613e1c81615503565b915050613b70565b6000808260e001516004811115613e3d57613e3d6151e8565b1415613e4c5750610100015190565b60018260e001516004811115613e6457613e646151e8565b1415613e7b5761010082015161084090600a61554e565b60028260e001516004811115613e9357613e936151e8565b1415613ea25750610100015190565b60038260e001516004811115613eba57613eba6151e8565b1415613ec95750610100015190565b60048260e001516004811115613ee157613ee16151e8565b1415613ef05750610100015190565b506000919050565b600f83604051613f089190615605565b90815260408051602092819003830190208054600180820183556000928352848320909101869055858252600e8452919020835181546001600160a01b0319166001600160a01b0390911617815583830151805185949293613f6f93908501920190614a75565b5060408201518051613f8b916002840191602090910190614a75565b50606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff02191690836004811115613fde57613fde6151e8565b02179055506101008201516008820155610120820151600982015561014090910151600a909101805460ff191691151591909117905561401c6144c4565b6001600160a01b031663979c249183836040518363ffffffff1660e01b8152600401610ef4929190615806565b61405383836145f7565b60008281526003602090815260409091208251612a9692840190614a75565b600061407d826132b5565b6140de5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016109c3565b60006140e983611ebc565b9050806001600160a01b0316846001600160a01b031614806141245750836001600160a01b03166141198461095b565b6001600160a01b0316145b80612b2a5750612b2a8185612f64565b61413f84848461432b565b61414b84848484614723565b612a965760405162461bcd60e51b81526004016109c3906158d4565b6040805180820182528281523360208083019190915260008581526013825292909220815180519293919261419f9284920190614a75565b5060209190910151600190910180546001600160a01b0319166001600160a01b039092169190911790555050565b6000818152600e602052604081206007015460ff1660048111156141f3576141f36151e8565b146142285760405162461bcd60e51b815260206004820152600560248201526404b443132360dc1b60448201526064016109c3565b6000818152600e60205260409020600a015460ff161561425a5760405162461bcd60e51b81526004016109c3906154ce565b6000818152600e60205260409020600801543414610fde5760405162461bcd60e51b81526004016109c3906157e7565b6000614294611535565b90506000816001600160a01b03168361271090604051600060405180830381858888f193505050503d80600081146142e8576040519150601f19603f3d011682016040523d82523d6000602084013e6142ed565b606091505b5050905080610956576142fe61334a565b6001600160a01b031663ec720b9b83856040518363ffffffff1660e01b8152600401610ef49291906154b5565b826001600160a01b031661433e82611ebc565b6001600160a01b0316146143a65760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016109c3565b6001600160a01b0382166144085760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016109c3565b61441383838361482d565b61441e6000826132d2565b6001600160a01b0383166000908152600560205260408120805460019290614447908490615537565b90915550506001600160a01b03821660009081526005602052604081208054600192906144759084906155ae565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b03868116918217909255915184939187169160008051602061598d83398151915291a4505050565b60006115e4612c8e565b60006144d982611ebc565b90506144e78160008461482d565b6144f26000836132d2565b6001600160a01b038116600090815260056020526040812080546001929061451b908490615537565b909155505060008281526004602052604080822080546001600160a01b0319169055518391906001600160a01b0384169060008051602061598d833981519152908390a45050565b60408051606081018252600081830181815282528381526013602081815293822060018101546001600160a01b03168585015291859052835281518051929391926145b19284920190614a75565b5060209190910151600190910180546001600160a01b0319166001600160a01b0390921691909117905550565b6000838311806145ed57508482105b1595945050505050565b6001600160a01b03821661464d5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016109c3565b614656816132b5565b156146a25760405162461bcd60e51b815260206004820152601c60248201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b60448201526064016109c3565b6146ae6000838361482d565b6001600160a01b03821660009081526005602052604081208054600192906146d79084906155ae565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b038616908117909155905183929060008051602061598d833981519152908290a45050565b60006001600160a01b0384163b1561482557604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290614767903390899088908890600401615926565b602060405180830381600087803b15801561478157600080fd5b505af19250505080156147b1575060408051601f3d908101601f191682019092526147ae91810190615959565b60015b61480b573d8080156147df576040519150601f19603f3d011682016040523d82523d6000602084013e6147e4565b606091505b5080516148035760405162461bcd60e51b81526004016109c3906158d4565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612b2a565b506001612b2a565b6001600160a01b0383166148885761488381600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b6148ab565b816001600160a01b0316836001600160a01b0316146148ab576148ab83826148e5565b6001600160a01b0382166148c25761095681614982565b826001600160a01b0316826001600160a01b031614610956576109568282614a31565b600060016148f284611ff4565b6148fc9190615537565b60008381526009602052604090205490915080821461494f576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a5460009061499490600190615537565b6000838152600b6020526040812054600a80549394509092849081106149bc576149bc615461565b9060005260206000200154905080600a83815481106149dd576149dd615461565b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a805480614a1557614a15615976565b6001900381819060005260206000200160009055905550505050565b6000614a3c83611ff4565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b828054614a81906152df565b90600052602060002090601f016020900481019282614aa35760008555614ae9565b82601f10614abc57805160ff1916838001178555614ae9565b82800160010185558215614ae9579182015b82811115614ae9578251825591602001919060010190614ace565b50614af5929150614b50565b5090565b5080546000825560040290600052602060002090810190610fde9190614b65565b508054614b26906152df565b6000825580601f10614b36575050565b601f016020900490600052602060002090810190610fde91905b5b80821115614af55760008155600101614b51565b80821115614af55760008082556001820180546001600160a01b031916905560028201819055614b986003830182614b1a565b50600401614b65565b6001600160e01b031981168114610fde57600080fd5b600060208284031215614bc957600080fd5b81356122f081614ba1565b60005b83811015614bef578181015183820152602001614bd7565b83811115612a965750506000910152565b60008151808452614c18816020860160208601614bd4565b601f01601f19169290920160200192915050565b6020815260006122f06020830184614c00565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b0380841115614c6f57614c6f614c3f565b604051601f8501601f19908116603f01168101908282118183101715614c9757614c97614c3f565b81604052809350858152868686011115614cb057600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112614cdb57600080fd5b6122f083833560208501614c55565b6001600160a01b0381168114610fde57600080fd5b600080600060608486031215614d1457600080fd5b83356001600160401b0380821115614d2b57600080fd5b614d3787838801614cca565b94506020860135915080821115614d4d57600080fd5b50614d5a86828701614cca565b9250506040840135614d6b81614cea565b809150509250925092565b600060208284031215614d8857600080fd5b5035919050565b6001600160a01b0391909116815260200190565b60008060408385031215614db657600080fd5b8235614dc181614cea565b946020939093013593505050565b8015158114610fde57600080fd5b600080600060608486031215614df257600080fd5b8335925060208401356001600160401b03811115614e0f57600080fd5b614e1b86828701614cca565b9250506040840135614d6b81614dcf565b60008060408385031215614e3f57600080fd5b8235614e4a81614cea565b915060208301356001600160401b03811115614e6557600080fd5b614e7185828601614cca565b9150509250929050565b600080600060608486031215614e9057600080fd5b8335614e9b81614cea565b92506020840135614eab81614cea565b929592945050506040919091013590565b600060208284031215614ece57600080fd5b81356001600160401b03811115614ee457600080fd5b612b2a84828501614cca565b60008060408385031215614f0357600080fd5b50508035926020909101359150565b604081526000614f256040830185614c00565b90508260208301529392505050565b604081526000614f476040830185614c00565b905060018060a01b03831660208301529392505050565b604081526000614f716040830185614c00565b905082151560208301529392505050565b600060208284031215614f9457600080fd5b81356122f081614cea565b60008060408385031215614fb257600080fd5b8235915060208301356001600160401b03811115614e6557600080fd5b600080600080600080600060e0888a031215614fea57600080fd5b87356001600160401b038082111561500157600080fd5b61500d8b838c01614cca565b985060208a013591508082111561502357600080fd5b506150308a828b01614cca565b96505060408801359450606088013593506080880135925060a08801356005811061505a57600080fd5b8092505060c0880135905092959891949750929550565b6000806040838503121561508457600080fd5b823561508f81614cea565b9150602083013561509f81614dcf565b809150509250929050565b600080600080608085870312156150c057600080fd5b84356150cb81614cea565b935060208501356150db81614cea565b92506040850135915060608501356001600160401b038111156150fd57600080fd5b8501601f8101871361510e57600080fd5b61511d87823560208401614c55565b91505092959194509250565b60008060006060848603121561513e57600080fd5b83356001600160401b0381111561515457600080fd5b61516086828701614cca565b9660208601359650604090950135949350505050565b6020808252825182820181905260009190848201906040850190845b818110156151ae57835183529284019291840191600101615192565b50909695505050505050565b600080604083850312156151cd57600080fd5b82356151d881614cea565b9150602083013561509f81614cea565b634e487b7160e01b600052602160045260246000fd5b6005811061521c57634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b038c168152610160602082018190526000906152458382018e614c00565b90508281036040840152615259818d614c00565b9150508960608301528860808301528760a08301528660c083015261528160e08301876151fe565b84610100830152836101208301528215156101408301529c9b505050505050505050505050565b84815260018060a01b03841660208201528260408201526080606082015260006152d56080830184614c00565b9695505050505050565b600181811c908216806152f357607f821691505b6020821081141561531457634e487b7160e01b600052602260045260246000fd5b50919050565b674b616c6569646f5f60c01b81526000825161533d816008850160208701614bd4565b9190910160080192915050565b60006020828403121561535c57600080fd5b81516122f081614cea565b60208082526005908201526425a218189960d91b604082015260600190565b60208082526005908201526404b443133360dc1b604082015260600190565b8481526080602082015260006153be6080830186614c00565b82810360408401526153d08186614c00565b915050821515606083015295945050505050565b6001600160a01b0383168152604060208201819052600090612b2a90830184614c00565b6001600160a01b0384811682528316602082015260606040820181905260009061543490830184614c00565b95945050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052603260045260246000fd5b60208082526005908201526412d10c4c4d60da1b604082015260600190565b6020808252600590820152644b4431323960d81b604082015260600190565b6001600160a01b03929092168252602082015260400190565b6020808252600590820152644b4431323160d81b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000600019821415615517576155176154ed565b5060010190565b828152604060208201526000612b2a6040830184614c00565b600082821015615549576155496154ed565b500390565b6000816000190483118215151615615568576155686154ed565b500290565b60008261558a57634e487b7160e01b600052601260045260246000fd5b500490565b60208082526005908201526412d10c0c4d60da1b604082015260600190565b600082198211156155c1576155c16154ed565b500190565b85815284602082015260018060a01b038416604082015260a0606082015260006155f360a0830185614c00565b90508260808301529695505050505050565b60008251615617818460208701614bd4565b9190910192915050565b6060815260006156346060830186614c00565b60208301949094525060400152919050565b60006020828403121561565857600080fd5b5051919050565b60006101208b83528060208401526156798184018c614c00565b9050828103604084015261568d818b614c00565b9150508760608301528660808301528560a08301528460c08301526156b560e08301856151fe565b826101008301529a9950505050505050505050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b8054600090600181811c908083168061573557607f831692505b602080841082141561575757634e487b7160e01b600052602260045260246000fd5b81801561576b576001811461577c576157a9565b60ff198616895284890196506157a9565b60008881526020902060005b868110156157a15781548b820152908501908301615788565b505084890196505b50505050505092915050565b6000612b2a6157c4838661571b565b8461571b565b6000602082840312156157dc57600080fd5b81516122f081614dcf565b60208082526005908201526425a218991960d91b604082015260600190565b828152604060208201526158266040820183516001600160a01b03169052565b600060208301516101608060608501526158446101a0850183614c00565b91506040850151603f198584030160808601526158618382614c00565b925050606085015160a0850152608085015160c085015260a085015160e085015260c0850151610100818187015260e087015191506101206158a5818801846151fe565b908701516101408781019190915290870151928601929092525084015180151561018085015250949350505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906152d590830184614c00565b60006020828403121561596b57600080fd5b81516122f081614ba1565b634e487b7160e01b600052603160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220db510ea1f48388e8729080a491ce510eff257bb95d88ded9bdf8f3ad0c50218964736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106102185760003560e01c806301ffc9a71461021d57806306fdde0314610252578063077f224a14610274578063081812fc14610296578063095ea7b3146102c357806313c1f278146102e3578063179bcff71461030357806318160ddd1461032357806323b872dd1461034257806327b7a2f5146103625780632bc4bc68146103805780632f745c59146103a057806332b18f6d146103c05780633ccfd60b146103e057806342842e0e146103f5578063430bf08a146104155780634b455a511461042a5780634f6ccce71461044a57806353c147761461046a57806358ba1bb81461049857806360c5cc3a146104c65780636352211e146104e657806365045a651461050657806365d13a90146105415780636a58767e1461056f57806370a08231146105845780637a3c4c17146105a45780637ccacd49146105c4578063899c9989146105d75780638da5cb5b146105f75780638f6059d61461060c57806395d89b4114610621578063a22cb46514610636578063b69ef8a814610656578063b88d4fde14610669578063c531c23614610689578063c87b56dd146106a9578063c9cd71b5146106c9578063d028bd66146106de578063d4f6b5ec1461070b578063d96a094a1461072b578063e6e268f41461073e578063e985e9c514610753578063ea4a110414610773578063f0726291146107aa578063f19b8273146107bf578063f2286c95146107df575b600080fd5b34801561022957600080fd5b5061023d610238366004614bb7565b61080f565b60405190151581526020015b60405180910390f35b34801561025e57600080fd5b50610267610846565b6040516102499190614c2c565b34801561028057600080fd5b5061029461028f366004614cff565b6108d8565b005b3480156102a257600080fd5b506102b66102b1366004614d76565b61095b565b6040516102499190614d8f565b3480156102cf57600080fd5b506102946102de366004614da3565b6109e8565b3480156102ef57600080fd5b506102946102fe366004614ddd565b610af4565b34801561030f57600080fd5b5061029461031e366004614e2c565b610d34565b34801561032f57600080fd5b50600a545b604051908152602001610249565b34801561034e57600080fd5b5061029461035d366004614e7b565b610eb2565b34801561036e57600080fd5b50600c546001600160a01b03166102b6565b34801561038c57600080fd5b5061029461039b366004614ebc565b610f2b565b3480156103ac57600080fd5b506103346103bb366004614da3565b610fe1565b3480156103cc57600080fd5b506102946103db366004614ef0565b611077565b3480156103ec57600080fd5b506102946113af565b34801561040157600080fd5b50610294610410366004614e7b565b61152a565b34801561042157600080fd5b506102b6611535565b34801561043657600080fd5b50610294610445366004614d76565b6115e9565b34801561045657600080fd5b50610334610465366004614d76565b611821565b34801561047657600080fd5b5061048a610485366004614ebc565b6118b4565b604051610249929190614f12565b3480156104a457600080fd5b506104b86104b3366004614d76565b611c09565b604051610249929190614f34565b3480156104d257600080fd5b506102946104e1366004614d76565b611cb6565b3480156104f257600080fd5b506102b6610501366004614d76565b611ebc565b34801561051257600080fd5b5061023d610521366004614ebc565b8051602081830181018051600d8252928201919093012091525460ff1681565b34801561054d57600080fd5b5061056161055c366004614ef0565b611ef1565b604051610249929190614f5e565b34801561057b57600080fd5b506102b6611fbd565b34801561059057600080fd5b5061033461059f366004614f82565b611ff4565b3480156105b057600080fd5b506103346105bf366004614d76565b61207b565b6102946105d2366004614f9f565b612352565b3480156105e357600080fd5b506102946105f2366004614fcf565b61257c565b34801561060357600080fd5b506102b6612919565b34801561061857600080fd5b506102b661295e565b34801561062d57600080fd5b50610267612994565b34801561064257600080fd5b50610294610651366004615071565b6129a3565b34801561066257600080fd5b5047610334565b34801561067557600080fd5b506102946106843660046150aa565b612a64565b34801561069557600080fd5b506103346106a4366004615129565b612a9c565b3480156106b557600080fd5b506102676106c4366004614d76565b612b32565b3480156106d557600080fd5b506102b6612c8e565b3480156106ea57600080fd5b506106fe6106f9366004614ebc565b612cbe565b6040516102499190615176565b34801561071757600080fd5b50610294610726366004614f9f565b612d2e565b610294610739366004614d76565b612d9d565b34801561074a57600080fd5b50610334612f47565b34801561075f57600080fd5b5061023d61076e3660046151ba565b612f64565b34801561077f57600080fd5b5061079361078e366004614d76565b612f92565b6040516102499b9a99989796959493929190615220565b3480156107b657600080fd5b506102b6613109565b3480156107cb57600080fd5b506102676107da366004614d76565b61313f565b3480156107eb57600080fd5b506107ff6107fa366004614ef0565b6131d9565b60405161024994939291906152a8565b60006001600160e01b031982166380ac58cd60e01b148061084057506001600160e01b03198216635b5e139f60e01b145b92915050565b606060008054610855906152df565b80601f0160208091040260200160405190810160405280929190818152602001828054610881906152df565b80156108ce5780601f106108a3576101008083540402835291602001916108ce565b820191906000526020600020905b8154815290600101906020018083116108b157829003601f168201915b5050505050905090565b82516108eb906000906020860190614a75565b50826040516020016108fd919061531a565b60405160208183030381529060405260019080519060200190610921929190614a75565b508151610935906002906020850190614a75565b50600c80546001600160a01b0319166001600160a01b038316179055505050565b505050565b6000610966826132b5565b6109cc5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006109f382611ebc565b9050806001600160a01b0316836001600160a01b03161415610a615760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016109c3565b336001600160a01b0382161480610a7d5750610a7d8133612f64565b610aea5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b60648201526084016109c3565b61095683836132d2565b33610afd613340565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401610b289190614d8f565b60206040518083038186803b158015610b4057600080fd5b505afa158015610b54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b78919061534a565b6001600160a01b031614610b9e5760405162461bcd60e51b81526004016109c390615367565b60008381526013602052604081208054610bb7906152df565b80601f0160208091040260200160405190810160405280929190818152602001828054610be3906152df565b8015610c305780601f10610c0557610100808354040283529160200191610c30565b820191906000526020600020905b815481529060010190602001808311610c1357829003601f168201915b50505050509050805160001415610c595760405162461bcd60e51b81526004016109c390615386565b600084815260146020908152604080832081518083019092528682528515158284015280546001810182559084529282902081518051929460020290910192610ca792849290910190614a75565b50602091909101516001909101805460ff1916911515919091179055610ccb61334a565b6001600160a01b0316633ebf7371858386866040518563ffffffff1660e01b8152600401610cfc94939291906153a5565b600060405180830381600087803b158015610d1657600080fd5b505af1158015610d2a573d6000803e3d6000fd5b5050505050505050565b33610d3d613340565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401610d689190614d8f565b60206040518083038186803b158015610d8057600080fd5b505afa158015610d94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db8919061534a565b6001600160a01b031614610dde5760405162461bcd60e51b81526004016109c390615367565b610de6613340565b6001600160a01b031663179bcff783836040518363ffffffff1660e01b8152600401610e139291906153e4565b600060405180830381600087803b158015610e2d57600080fd5b505af1158015610e41573d6000803e3d6000fd5b50505050610e4d61334a565b6001600160a01b031663262360133084846040518463ffffffff1660e01b8152600401610e7c93929190615408565b600060405180830381600087803b158015610e9657600080fd5b505af1158015610eaa573d6000803e3d6000fd5b505050505050565b610ebd838383613354565b610ec561334a565b6001600160a01b031663465bcf058484846040518463ffffffff1660e01b8152600401610ef49392919061543d565b600060405180830381600087803b158015610f0e57600080fd5b505af1158015610f22573d6000803e3d6000fd5b50505050505050565b33610f34613340565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401610f5f9190614d8f565b60206040518083038186803b158015610f7757600080fd5b505afa158015610f8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610faf919061534a565b6001600160a01b031614610fd55760405162461bcd60e51b81526004016109c390615367565b610fde81613385565b50565b6000610fec83611ff4565b821061104e5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016109c3565b506001600160a01b03919091166000908152600860209081526040808320938352929052205490565b33611080613340565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016110ab9190614d8f565b60206040518083038186803b1580156110c357600080fd5b505afa1580156110d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fb919061534a565b6001600160a01b0316146111215760405162461bcd60e51b81526004016109c390615367565b600082815260106020526040902054811180159061117a5750600082815260106020526040812080548390811061115a5761115a615461565b60009182526020909120600160049092020101546001600160a01b031614155b6111965760405162461bcd60e51b81526004016109c390615477565b426000838152600e6020526040902060040154106111c65760405162461bcd60e51b81526004016109c390615496565b60008281526010602052604081208054839081106111e6576111e6615461565b9060005260206000209060040201604051806080016040529081600082015481526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160028201548152602001600382018054611252906152df565b80601f016020809104026020016040519081016040528092919081815260200182805461127e906152df565b80156112cb5780601f106112a0576101008083540402835291602001916112cb565b820191906000526020600020905b8154815290600101906020018083116112ae57829003601f168201915b50505050508152505090506112e4816020015184613533565b6112ee838361353e565b600083815260106020526040812061130591614af9565b61130d61334a565b6020820151604051630249d31960e51b8152600481018690526001600160a01b03918216602482015291169063493a632090604401600060405180830381600087803b15801561135c57600080fd5b505af1158015611370573d6000803e3d6000fd5b5050505061137c61334a565b6001600160a01b031663465bcf05308360200151866040518463ffffffff1660e01b8152600401610ef49392919061543d565b336113b8613340565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016113e39190614d8f565b60206040518083038186803b1580156113fb57600080fd5b505afa15801561140f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611433919061534a565b6001600160a01b0316146114595760405162461bcd60e51b81526004016109c390615367565b6000611463612f47565b604051909150600090339061271090849084818181858888f193505050503d80600081146114ad576040519150601f19603f3d011682016040523d82523d6000602084013e6114b2565b606091505b5050905080156114f1576114c461334a565b6001600160a01b031663279862cb836040518263ffffffff1660e01b8152600401610e7c91815260200190565b6114f961334a565b6001600160a01b031663ec720b9b33846040518363ffffffff1660e01b8152600401610e7c9291906154b5565b5050565b610ebd838383613790565b600c546040516415985d5b1d60da1b60208201526000916001600160a01b031690638eaa6ac0906025015b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161159491815260200190565b60206040518083038186803b1580156115ac57600080fd5b505afa1580156115c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e4919061534a565b905090565b336115f2613340565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b815260040161161d9190614d8f565b60206040518083038186803b15801561163557600080fd5b505afa158015611649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166d919061534a565b6001600160a01b0316146116935760405162461bcd60e51b81526004016109c390615367565b6000818152600e60205260409020546001600160a01b03166116c75760405162461bcd60e51b81526004016109c390615477565b306116d182611ebc565b6001600160a01b0316146116f75760405162461bcd60e51b81526004016109c3906154ce565b6000818152601060205260409020541561173b5760405162461bcd60e51b8152602060048201526005602482015264096886264760db1b60448201526064016109c3565b611744816137ab565b61174d816137dc565b61175561334a565b6001600160a01b031663ccb55a98826040518263ffffffff1660e01b815260040161178291815260200190565b600060405180830381600087803b15801561179c57600080fd5b505af11580156117b0573d6000803e3d6000fd5b505050506117bc61334a565b6001600160a01b031663465bcf05306000846040518463ffffffff1660e01b81526004016117ec9392919061543d565b600060405180830381600087803b15801561180657600080fd5b505af115801561181a573d6000803e3d6000fd5b5050505050565b600061182c600a5490565b821061188f5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016109c3565b600a82815481106118a2576118a2615461565b90600052602060002001549050919050565b60606000806118c284612cbe565b905060005b8151811015611beb576000600e60008484815181106118e8576118e8615461565b60200260200101518152602001908152602001600020604051806101600160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600182018054611949906152df565b80601f0160208091040260200160405190810160405280929190818152602001828054611975906152df565b80156119c25780601f10611997576101008083540402835291602001916119c2565b820191906000526020600020905b8154815290600101906020018083116119a557829003601f168201915b505050505081526020016002820180546119db906152df565b80601f0160208091040260200160405190810160405280929190818152602001828054611a07906152df565b8015611a545780601f10611a2957610100808354040283529160200191611a54565b820191906000526020600020905b815481529060010190602001808311611a3757829003601f168201915b50505091835250506003820154602082015260048083015460408301526005830154606083015260068301546080830152600783015460a09092019160ff1690811115611aa357611aa36151e8565b6004811115611ab457611ab46151e8565b81526008820154602082015260098201546040820152600a9091015460ff1615156060909101529050428160a0015111158015611af55750428160c0015110155b15611bd85760156000848481518110611b1057611b10615461565b60200260200101518152602001908152602001600020838381518110611b3857611b38615461565b6020026020010151818054611b4c906152df565b80601f0160208091040260200160405190810160405280929190818152602001828054611b78906152df565b8015611bc55780601f10611b9a57610100808354040283529160200191611bc5565b820191906000526020600020905b815481529060010190602001808311611ba857829003601f168201915b5050505050915094509450505050915091565b5080611be381615503565b9150506118c7565b50600060405180602001604052806000815250909250925050915091565b601360205260009081526040902080548190611c24906152df565b80601f0160208091040260200160405190810160405280929190818152602001828054611c50906152df565b8015611c9d5780601f10611c7257610100808354040283529160200191611c9d565b820191906000526020600020905b815481529060010190602001808311611c8057829003601f168201915b505050600190930154919250506001600160a01b031682565b33611cbf613340565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401611cea9190614d8f565b60206040518083038186803b158015611d0257600080fd5b505afa158015611d16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3a919061534a565b6001600160a01b031614611d605760405162461bcd60e51b81526004016109c390615367565b60008181526013602052604081208054611d79906152df565b80601f0160208091040260200160405190810160405280929190818152602001828054611da5906152df565b8015611df25780601f10611dc757610100808354040283529160200191611df2565b820191906000526020600020905b815481529060010190602001808311611dd557829003601f168201915b50505050509050805160001415611e1b5760405162461bcd60e51b81526004016109c390615386565b6000828152601360205260409020600101546001600160a01b0316611e3f83611ebc565b6001600160a01b031614611e7d5760405162461bcd60e51b81526020600482015260056024820152644b4431333160d81b60448201526064016109c3565b611e878282613a53565b611e8f61334a565b6001600160a01b031663746f1b2083836040518363ffffffff1660e01b8152600401610e7c92919061551e565b6000818152600460205260408120546001600160a01b0316806108405760405162461bcd60e51b81526004016109c390615477565b60146020528160005260406000208181548110611f0d57600080fd5b906000526020600020906002020160009150915050806000018054611f31906152df565b80601f0160208091040260200160405190810160405280929190818152602001828054611f5d906152df565b8015611faa5780601f10611f7f57610100808354040283529160200191611faa565b820191906000526020600020905b815481529060010190602001808311611f8d57829003601f168201915b5050506001909301549192505060ff1682565b600c546040516c4d65646961526567697374727960981b60208201526000916001600160a01b031690638eaa6ac090602d01611560565b60006001600160a01b03821661205f5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016109c3565b506001600160a01b031660009081526005602052604090205490565b6000818152600e602090815260408083208151610160810190925280546001600160a01b031682526001810180548594840191906120b8906152df565b80601f01602080910402602001604051908101604052809291908181526020018280546120e4906152df565b80156121315780601f1061210657610100808354040283529160200191612131565b820191906000526020600020905b81548152906001019060200180831161211457829003601f168201915b5050505050815260200160028201805461214a906152df565b80601f0160208091040260200160405190810160405280929190818152602001828054612176906152df565b80156121c35780601f10612198576101008083540402835291602001916121c3565b820191906000526020600020905b8154815290600101906020018083116121a657829003601f168201915b50505091835250506003820154602082015260048083015460408301526005830154606083015260068301546080830152600783015460a09092019160ff1690811115612212576122126151e8565b6004811115612223576122236151e8565b81526008820154602082015260098201546040820152600a9091015460ff161515606090910152905060008160e001516004811115612264576122646151e8565b141561227557610100015192915050565b60018160e00151600481111561228d5761228d6151e8565b14156122f757806060015181608001516122a79190615537565b60608201516122b69042615537565b8261010001518361012001516122cc9190615537565b6122d6919061554e565b6122e0919061556d565b8161012001516122f09190615537565b9392505050565b60048160e00151600481111561230f5761230f6151e8565b141561231e5750600092915050565b60405162461bcd60e51b81526020600482015260096024820152681b9bdd08195e1a5cdd60ba1b60448201526064016109c3565b3361235b613340565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016123869190614d8f565b60206040518083038186803b15801561239e57600080fd5b505afa1580156123b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d6919061534a565b6001600160a01b031614156123fd5760405162461bcd60e51b81526004016109c39061558f565b600260165414156124505760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109c3565b600260165561245e82613a7c565b346011600082825461247091906155ae565b909155505060008281526010602090815260408083208151608081018352868152338185019081523493820193845260608201878152835460018082018655948852968690208351600490980201968755905192860180546001600160a01b0319166001600160a01b03909416939093179092559151600285015551805191939261250392600385019290910190614a75565b50505061250e61334a565b6001600160a01b0316630d2657bf83343385426040518663ffffffff1660e01b81526004016125419594939291906155c6565b600060405180830381600087803b15801561255b57600080fd5b505af115801561256f573d6000803e3d6000fd5b5050600160165550505050565b33612585613340565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016125b09190614d8f565b60206040518083038186803b1580156125c857600080fd5b505afa1580156125dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612600919061534a565b6001600160a01b0316146126265760405162461bcd60e51b81526004016109c390615367565b42851161265d5760405162461bcd60e51b81526020600482015260056024820152644b4431313160d81b60448201526064016109c3565b8385106126945760405162461bcd60e51b815260206004820152600560248201526425a218989960d91b60448201526064016109c3565b8284106126cb5760405162461bcd60e51b81526020600482015260056024820152644b4431313360d81b60448201526064016109c3565b600d876040516126db9190615605565b9081526040519081900360200190205460ff166126fb576126fb87613385565b612706878585613b6d565b6040516303fb4aab60e41b815260009073__$a79fa16630ef50be54c6520a39abca49df$__90633fb4aab090612744908b9089908990600401615621565b60206040518083038186803b15801561275c57600080fd5b505af4158015612770573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127949190615646565b90506000604051806101600160405280306001600160a01b031681526020018a81526020018981526020016127c64290565b81526020018881526020018781526020018681526020018560048111156127ef576127ef6151e8565b81526020018481526020016000815260200160001515815250905061281381613e24565b610120820152612824898383613ef8565b61282f30838a614049565b61283761334a565b6001600160a01b0316637bab635a838b8b428c8c8c8c8c6040518a63ffffffff1660e01b81526004016128729998979695949392919061565f565b600060405180830381600087803b15801561288c57600080fd5b505af11580156128a0573d6000803e3d6000fd5b505050506128ac61334a565b6001600160a01b031663465bcf05600030856040518463ffffffff1660e01b81526004016128dc9392919061543d565b600060405180830381600087803b1580156128f657600080fd5b505af115801561290a573d6000803e3d6000fd5b50505050505050505050505050565b600c5460408051631abe729160e31b815290516000926001600160a01b03169163d5f39488916004808301926020929190829003018186803b1580156115ac57600080fd5b600c546040516b4d65646961466163746f727960a01b60208201526000916001600160a01b031690638eaa6ac090602c01611560565b606060018054610855906152df565b6001600160a01b0382163314156129f85760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b60448201526064016109c3565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b612a6e3383614072565b612a8a5760405162461bcd60e51b81526004016109c3906156ca565b612a9684848484614134565b50505050565b6040516303fb4aab60e41b815260009073__$a79fa16630ef50be54c6520a39abca49df$__90633fb4aab090612ada90879087908790600401615621565b60206040518083038186803b158015612af257600080fd5b505af4158015612b06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b2a9190615646565b949350505050565b6060612b3d826132b5565b612ba15760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016109c3565b600060028054612bb0906152df565b905011612c535760008281526003602052604090208054612bd0906152df565b80601f0160208091040260200160405190810160405280929190818152602001828054612bfc906152df565b8015612c495780601f10612c1e57610100808354040283529160200191612c49565b820191906000526020600020905b815481529060010190602001808311612c2c57829003601f168201915b5050505050610840565b600260036000848152602001908152602001600020604051602001612c799291906157b5565b60405160208183030381529060405292915050565b600c54604051651059141bdbdb60d21b60208201526000916001600160a01b031690638eaa6ac090602601611560565b6060600f82604051612cd09190615605565b9081526040805191829003602090810183208054808302850183019093528284529190830182828015612d2257602002820191906000526020600020905b815481526020019060010190808311612d0e575b50505050509050919050565b33612d3883611ebc565b6001600160a01b031614612d5e5760405162461bcd60e51b81526004016109c390615367565b612d688282614167565b612d7061334a565b6001600160a01b0316635bcefb5383836040518363ffffffff1660e01b8152600401610e7c92919061551e565b33612da6613340565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401612dd19190614d8f565b60206040518083038186803b158015612de957600080fd5b505afa158015612dfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e21919061534a565b6001600160a01b03161415612e485760405162461bcd60e51b81526004016109c39061558f565b612e51816141cd565b6000818152600e60205260409020600a01805460ff19166001179055612e773382613533565b612e8a612e85600a3461556d565b61428a565b612e9261334a565b6001600160a01b0316635dd995b5823433426040516001600160e01b031960e087901b168152600481019490945260248401929092526001600160a01b031660448301526064820152608401600060405180830381600087803b158015612ef857600080fd5b505af1158015612f0c573d6000803e3d6000fd5b50505050612f1861334a565b6001600160a01b031663465bcf053033846040518463ffffffff1660e01b81526004016117ec9392919061543d565b600060125460115447612f5a9190615537565b6115e49190615537565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b600e60205260009081526040902080546001820180546001600160a01b039092169291612fbe906152df565b80601f0160208091040260200160405190810160405280929190818152602001828054612fea906152df565b80156130375780601f1061300c57610100808354040283529160200191613037565b820191906000526020600020905b81548152906001019060200180831161301a57829003601f168201915b50505050509080600201805461304c906152df565b80601f0160208091040260200160405190810160405280929190818152602001828054613078906152df565b80156130c55780601f1061309a576101008083540402835291602001916130c5565b820191906000526020600020905b8154815290600101906020018083116130a857829003601f168201915b50505060038401546004850154600586015460068701546007880154600889015460098a0154600a909a015498999598949750929550909360ff918216939091168b565b600c546040516b22bb32b73a22b6b4ba3a32b960a11b60208201526000916001600160a01b031690638eaa6ac090602c01611560565b60156020526000908152604090208054613158906152df565b80601f0160208091040260200160405190810160405280929190818152602001828054613184906152df565b80156131d15780601f106131a6576101008083540402835291602001916131d1565b820191906000526020600020905b8154815290600101906020018083116131b457829003601f168201915b505050505081565b601060205281600052604060002081815481106131f557600080fd5b600091825260209091206004909102018054600182015460028301546003840180549396506001600160a01b0390921694509291613232906152df565b80601f016020809104026020016040519081016040528092919081815260200182805461325e906152df565b80156132ab5780601f10613280576101008083540402835291602001916132ab565b820191906000526020600020905b81548152906001019060200180831161328e57829003601f168201915b5050505050905084565b6000908152600460205260409020546001600160a01b0316151590565b600081815260066020526040902080546001600160a01b0319166001600160a01b038416908117909155819061330782611ebc565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006115e4611fbd565b60006115e4613109565b61335e3382614072565b61337a5760405162461bcd60e51b81526004016109c3906156ca565b61095683838361432b565b600d816040516133959190615605565b9081526040519081900360200190205460ff1615801561343557506133b86144c4565b6001600160a01b03166365045a65826040518263ffffffff1660e01b81526004016133e39190614c2c565b60206040518083038186803b1580156133fb57600080fd5b505afa15801561340f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061343391906157ca565b155b6134695760405162461bcd60e51b815260206004820152600560248201526404b443130360dc1b60448201526064016109c3565b6001600d8260405161347b9190615605565b908152604051908190036020019020805491151560ff199092169190911790556134a36144c4565b6001600160a01b031663b8926f2c826040518263ffffffff1660e01b81526004016134ce9190614c2c565b600060405180830381600087803b1580156134e857600080fd5b505af11580156134fc573d6000803e3d6000fd5b5050505061350861334a565b6001600160a01b03166378689c64826040518263ffffffff1660e01b81526004016117ec9190614c2c565b61152630838361432b565b60005b60008381526010602052604090205481101561095657600083815260106020526040812080548390811061357757613577615461565b9060005260206000209060040201604051806080016040529081600082015481526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600282015481526020016003820180546135e3906152df565b80601f016020809104026020016040519081016040528092919081815260200182805461360f906152df565b801561365c5780601f106136315761010080835404028352916020019161365c565b820191906000526020600020905b81548152906001019060200180831161363f57829003601f168201915b505050505081525050905080604001516011600082825461367d9190615537565b9091555050818314156136a35761369e600a8260400151612e85919061556d565b61377d565b600081602001516001600160a01b0316826040015161271090604051600060405180830381858888f193505050503d80600081146136fd576040519150601f19603f3d011682016040523d82523d6000602084013e613702565b606091505b505090508061377b5761371361334a565b6001600160a01b031663ec720b9b836020015184604001516040518363ffffffff1660e01b81526004016137489291906154b5565b600060405180830381600087803b15801561376257600080fd5b505af1158015613776573d6000803e3d6000fd5b505050505b505b508061378881615503565b915050613541565b61095683838360405180602001604052806000815250612a64565b6137b4816144ce565b6040805160208082018084526000808452858152600390925292902090516115269290614a75565b6000818152600e6020526040812060010180546137f8906152df565b80601f0160208091040260200160405190810160405280929190818152602001828054613824906152df565b80156138715780601f1061384657610100808354040283529160200191613871565b820191906000526020600020905b81548152906001019060200180831161385457829003601f168201915b50505050509050600080600190505b600f836040516138909190615605565b908152604051908190036020019020546138ab9060016155ae565b8110156139145783600f846040516138c39190615605565b9081526040519081900360200190206138dd600184615537565b815481106138ed576138ed615461565b90600052602060002001541415613902578091505b8061390c81615503565b915050613880565b50806139565760405162461bcd60e51b81526020600482015260116024820152704e6f2064656c657461626c65206b65797360781b60448201526064016109c3565b600f826040516139669190615605565b908152604051908190036020019020613980600183615537565b8154811061399057613990615461565b60009182526020808320909101829055848252600e90526040812080546001600160a01b0319168155906139c76001830182614b1a565b6139d5600283016000614b1a565b5060006003820181905560048201819055600582018190556006820181905560078201805460ff19908116909155600883018290556009830191909155600a90910180549091169055613a266144c4565b6001600160a01b0316634b455a51846040518263ffffffff1660e01b8152600401610ef491815260200190565b60008281526015602090815260409091208251613a7292840190614a75565b5061152682614563565b60046000828152600e602052604090206007015460ff166004811115613aa457613aa46151e8565b14613ad95760405162461bcd60e51b81526020600482015260056024820152644b4431323760d81b60448201526064016109c3565b6000818152600e60205260409020600a015460ff1615613b0b5760405162461bcd60e51b81526004016109c3906154ce565b6000818152600e6020526040902060080154341015613b3c5760405162461bcd60e51b81526004016109c3906157e7565b426000828152600e60205260409020600401541015610fde5760405162461bcd60e51b81526004016109c390615496565b60005b600f84604051613b809190615605565b90815260405190819003602001902054811015612a96576000600e6000600f87604051613bad9190615605565b90815260200160405180910390208481548110613bcc57613bcc615461565b90600052602060002001548152602001908152602001600020604051806101600160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600182018054613c30906152df565b80601f0160208091040260200160405190810160405280929190818152602001828054613c5c906152df565b8015613ca95780601f10613c7e57610100808354040283529160200191613ca9565b820191906000526020600020905b815481529060010190602001808311613c8c57829003601f168201915b50505050508152602001600282018054613cc2906152df565b80601f0160208091040260200160405190810160405280929190818152602001828054613cee906152df565b8015613d3b5780601f10613d1057610100808354040283529160200191613d3b565b820191906000526020600020905b815481529060010190602001808311613d1e57829003601f168201915b50505091835250506003820154602082015260048083015460408301526005830154606083015260068301546080830152600783015460a09092019160ff1690811115613d8a57613d8a6151e8565b6004811115613d9b57613d9b6151e8565b81526008820154602082015260098201546040820152600a9091015460ff16151560609091015260a081015160c0820151919250613ddc91869186916145de565b15613e115760405162461bcd60e51b815260206004820152600560248201526404b443131360dc1b60448201526064016109c3565b5080613e1c81615503565b915050613b70565b6000808260e001516004811115613e3d57613e3d6151e8565b1415613e4c5750610100015190565b60018260e001516004811115613e6457613e646151e8565b1415613e7b5761010082015161084090600a61554e565b60028260e001516004811115613e9357613e936151e8565b1415613ea25750610100015190565b60038260e001516004811115613eba57613eba6151e8565b1415613ec95750610100015190565b60048260e001516004811115613ee157613ee16151e8565b1415613ef05750610100015190565b506000919050565b600f83604051613f089190615605565b90815260408051602092819003830190208054600180820183556000928352848320909101869055858252600e8452919020835181546001600160a01b0319166001600160a01b0390911617815583830151805185949293613f6f93908501920190614a75565b5060408201518051613f8b916002840191602090910190614a75565b50606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff02191690836004811115613fde57613fde6151e8565b02179055506101008201516008820155610120820151600982015561014090910151600a909101805460ff191691151591909117905561401c6144c4565b6001600160a01b031663979c249183836040518363ffffffff1660e01b8152600401610ef4929190615806565b61405383836145f7565b60008281526003602090815260409091208251612a9692840190614a75565b600061407d826132b5565b6140de5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016109c3565b60006140e983611ebc565b9050806001600160a01b0316846001600160a01b031614806141245750836001600160a01b03166141198461095b565b6001600160a01b0316145b80612b2a5750612b2a8185612f64565b61413f84848461432b565b61414b84848484614723565b612a965760405162461bcd60e51b81526004016109c3906158d4565b6040805180820182528281523360208083019190915260008581526013825292909220815180519293919261419f9284920190614a75565b5060209190910151600190910180546001600160a01b0319166001600160a01b039092169190911790555050565b6000818152600e602052604081206007015460ff1660048111156141f3576141f36151e8565b146142285760405162461bcd60e51b815260206004820152600560248201526404b443132360dc1b60448201526064016109c3565b6000818152600e60205260409020600a015460ff161561425a5760405162461bcd60e51b81526004016109c3906154ce565b6000818152600e60205260409020600801543414610fde5760405162461bcd60e51b81526004016109c3906157e7565b6000614294611535565b90506000816001600160a01b03168361271090604051600060405180830381858888f193505050503d80600081146142e8576040519150601f19603f3d011682016040523d82523d6000602084013e6142ed565b606091505b5050905080610956576142fe61334a565b6001600160a01b031663ec720b9b83856040518363ffffffff1660e01b8152600401610ef49291906154b5565b826001600160a01b031661433e82611ebc565b6001600160a01b0316146143a65760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016109c3565b6001600160a01b0382166144085760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016109c3565b61441383838361482d565b61441e6000826132d2565b6001600160a01b0383166000908152600560205260408120805460019290614447908490615537565b90915550506001600160a01b03821660009081526005602052604081208054600192906144759084906155ae565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b03868116918217909255915184939187169160008051602061598d83398151915291a4505050565b60006115e4612c8e565b60006144d982611ebc565b90506144e78160008461482d565b6144f26000836132d2565b6001600160a01b038116600090815260056020526040812080546001929061451b908490615537565b909155505060008281526004602052604080822080546001600160a01b0319169055518391906001600160a01b0384169060008051602061598d833981519152908390a45050565b60408051606081018252600081830181815282528381526013602081815293822060018101546001600160a01b03168585015291859052835281518051929391926145b19284920190614a75565b5060209190910151600190910180546001600160a01b0319166001600160a01b0390921691909117905550565b6000838311806145ed57508482105b1595945050505050565b6001600160a01b03821661464d5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016109c3565b614656816132b5565b156146a25760405162461bcd60e51b815260206004820152601c60248201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b60448201526064016109c3565b6146ae6000838361482d565b6001600160a01b03821660009081526005602052604081208054600192906146d79084906155ae565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b038616908117909155905183929060008051602061598d833981519152908290a45050565b60006001600160a01b0384163b1561482557604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290614767903390899088908890600401615926565b602060405180830381600087803b15801561478157600080fd5b505af19250505080156147b1575060408051601f3d908101601f191682019092526147ae91810190615959565b60015b61480b573d8080156147df576040519150601f19603f3d011682016040523d82523d6000602084013e6147e4565b606091505b5080516148035760405162461bcd60e51b81526004016109c3906158d4565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612b2a565b506001612b2a565b6001600160a01b0383166148885761488381600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b6148ab565b816001600160a01b0316836001600160a01b0316146148ab576148ab83826148e5565b6001600160a01b0382166148c25761095681614982565b826001600160a01b0316826001600160a01b031614610956576109568282614a31565b600060016148f284611ff4565b6148fc9190615537565b60008381526009602052604090205490915080821461494f576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a5460009061499490600190615537565b6000838152600b6020526040812054600a80549394509092849081106149bc576149bc615461565b9060005260206000200154905080600a83815481106149dd576149dd615461565b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a805480614a1557614a15615976565b6001900381819060005260206000200160009055905550505050565b6000614a3c83611ff4565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b828054614a81906152df565b90600052602060002090601f016020900481019282614aa35760008555614ae9565b82601f10614abc57805160ff1916838001178555614ae9565b82800160010185558215614ae9579182015b82811115614ae9578251825591602001919060010190614ace565b50614af5929150614b50565b5090565b5080546000825560040290600052602060002090810190610fde9190614b65565b508054614b26906152df565b6000825580601f10614b36575050565b601f016020900490600052602060002090810190610fde91905b5b80821115614af55760008155600101614b51565b80821115614af55760008082556001820180546001600160a01b031916905560028201819055614b986003830182614b1a565b50600401614b65565b6001600160e01b031981168114610fde57600080fd5b600060208284031215614bc957600080fd5b81356122f081614ba1565b60005b83811015614bef578181015183820152602001614bd7565b83811115612a965750506000910152565b60008151808452614c18816020860160208601614bd4565b601f01601f19169290920160200192915050565b6020815260006122f06020830184614c00565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b0380841115614c6f57614c6f614c3f565b604051601f8501601f19908116603f01168101908282118183101715614c9757614c97614c3f565b81604052809350858152868686011115614cb057600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112614cdb57600080fd5b6122f083833560208501614c55565b6001600160a01b0381168114610fde57600080fd5b600080600060608486031215614d1457600080fd5b83356001600160401b0380821115614d2b57600080fd5b614d3787838801614cca565b94506020860135915080821115614d4d57600080fd5b50614d5a86828701614cca565b9250506040840135614d6b81614cea565b809150509250925092565b600060208284031215614d8857600080fd5b5035919050565b6001600160a01b0391909116815260200190565b60008060408385031215614db657600080fd5b8235614dc181614cea565b946020939093013593505050565b8015158114610fde57600080fd5b600080600060608486031215614df257600080fd5b8335925060208401356001600160401b03811115614e0f57600080fd5b614e1b86828701614cca565b9250506040840135614d6b81614dcf565b60008060408385031215614e3f57600080fd5b8235614e4a81614cea565b915060208301356001600160401b03811115614e6557600080fd5b614e7185828601614cca565b9150509250929050565b600080600060608486031215614e9057600080fd5b8335614e9b81614cea565b92506020840135614eab81614cea565b929592945050506040919091013590565b600060208284031215614ece57600080fd5b81356001600160401b03811115614ee457600080fd5b612b2a84828501614cca565b60008060408385031215614f0357600080fd5b50508035926020909101359150565b604081526000614f256040830185614c00565b90508260208301529392505050565b604081526000614f476040830185614c00565b905060018060a01b03831660208301529392505050565b604081526000614f716040830185614c00565b905082151560208301529392505050565b600060208284031215614f9457600080fd5b81356122f081614cea565b60008060408385031215614fb257600080fd5b8235915060208301356001600160401b03811115614e6557600080fd5b600080600080600080600060e0888a031215614fea57600080fd5b87356001600160401b038082111561500157600080fd5b61500d8b838c01614cca565b985060208a013591508082111561502357600080fd5b506150308a828b01614cca565b96505060408801359450606088013593506080880135925060a08801356005811061505a57600080fd5b8092505060c0880135905092959891949750929550565b6000806040838503121561508457600080fd5b823561508f81614cea565b9150602083013561509f81614dcf565b809150509250929050565b600080600080608085870312156150c057600080fd5b84356150cb81614cea565b935060208501356150db81614cea565b92506040850135915060608501356001600160401b038111156150fd57600080fd5b8501601f8101871361510e57600080fd5b61511d87823560208401614c55565b91505092959194509250565b60008060006060848603121561513e57600080fd5b83356001600160401b0381111561515457600080fd5b61516086828701614cca565b9660208601359650604090950135949350505050565b6020808252825182820181905260009190848201906040850190845b818110156151ae57835183529284019291840191600101615192565b50909695505050505050565b600080604083850312156151cd57600080fd5b82356151d881614cea565b9150602083013561509f81614cea565b634e487b7160e01b600052602160045260246000fd5b6005811061521c57634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b038c168152610160602082018190526000906152458382018e614c00565b90508281036040840152615259818d614c00565b9150508960608301528860808301528760a08301528660c083015261528160e08301876151fe565b84610100830152836101208301528215156101408301529c9b505050505050505050505050565b84815260018060a01b03841660208201528260408201526080606082015260006152d56080830184614c00565b9695505050505050565b600181811c908216806152f357607f821691505b6020821081141561531457634e487b7160e01b600052602260045260246000fd5b50919050565b674b616c6569646f5f60c01b81526000825161533d816008850160208701614bd4565b9190910160080192915050565b60006020828403121561535c57600080fd5b81516122f081614cea565b60208082526005908201526425a218189960d91b604082015260600190565b60208082526005908201526404b443133360dc1b604082015260600190565b8481526080602082015260006153be6080830186614c00565b82810360408401526153d08186614c00565b915050821515606083015295945050505050565b6001600160a01b0383168152604060208201819052600090612b2a90830184614c00565b6001600160a01b0384811682528316602082015260606040820181905260009061543490830184614c00565b95945050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052603260045260246000fd5b60208082526005908201526412d10c4c4d60da1b604082015260600190565b6020808252600590820152644b4431323960d81b604082015260600190565b6001600160a01b03929092168252602082015260400190565b6020808252600590820152644b4431323160d81b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000600019821415615517576155176154ed565b5060010190565b828152604060208201526000612b2a6040830184614c00565b600082821015615549576155496154ed565b500390565b6000816000190483118215151615615568576155686154ed565b500290565b60008261558a57634e487b7160e01b600052601260045260246000fd5b500490565b60208082526005908201526412d10c0c4d60da1b604082015260600190565b600082198211156155c1576155c16154ed565b500190565b85815284602082015260018060a01b038416604082015260a0606082015260006155f360a0830185614c00565b90508260808301529695505050505050565b60008251615617818460208701614bd4565b9190910192915050565b6060815260006156346060830186614c00565b60208301949094525060400152919050565b60006020828403121561565857600080fd5b5051919050565b60006101208b83528060208401526156798184018c614c00565b9050828103604084015261568d818b614c00565b9150508760608301528660808301528560a08301528460c08301526156b560e08301856151fe565b826101008301529a9950505050505050505050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b8054600090600181811c908083168061573557607f831692505b602080841082141561575757634e487b7160e01b600052602260045260246000fd5b81801561576b576001811461577c576157a9565b60ff198616895284890196506157a9565b60008881526020902060005b868110156157a15781548b820152908501908301615788565b505084890196505b50505050505092915050565b6000612b2a6157c4838661571b565b8461571b565b6000602082840312156157dc57600080fd5b81516122f081614dcf565b60208082526005908201526425a218991960d91b604082015260600190565b828152604060208201526158266040820183516001600160a01b03169052565b600060208301516101608060608501526158446101a0850183614c00565b91506040850151603f198584030160808601526158618382614c00565b925050606085015160a0850152608085015160c085015260a085015160e085015260c0850151610100818187015260e087015191506101206158a5818801846151fe565b908701516101408781019190915290870151928601929092525084015180151561018085015250949350505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906152d590830184614c00565b60006020828403121561596b57600080fd5b81516122f081614ba1565b634e487b7160e01b600052603160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220db510ea1f48388e8729080a491ce510eff257bb95d88ded9bdf8f3ad0c50218964736f6c63430008090033",
  "libraries": {
    "Ad": "0x9F397D94EC32D43EeC60dCF9A38a44322D54d42A"
  },
  "devdoc": {
    "author": "Shumpei Koike - <shumpei.koike@bridges.inc>",
    "kind": "dev",
    "methods": {
      "acceptProposal(uint256)": {
        "details": "Accepts the proposal.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "adId(string,uint256,uint256)": {
        "details": "Returns ID based on the space metadata, display start timestamp, and      display end timestamp. These three makes it the unique.",
        "params": {
          "displayEndTimestamp": "uint256 of the end timestamp for the display",
          "displayStartTimestamp": "uint256 of the start timestamp for the display",
          "spaceMetadata": "uint256 of the space metadata"
        }
      },
      "adPoolAddress()": {
        "details": "Gets the address of AdPool."
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balance()": {
        "details": "Returns the balacne deposited on the proxy contract."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "bidWithProposal(uint256,string)": {
        "details": "Bids to participate in an auction.      It is defined as an Open Bid.",
        "params": {
          "proposalMetadata": "string of the metadata hash",
          "tokenId": "uint256 of the token ID"
        }
      },
      "buy(uint256)": {
        "details": "Buys the token that is defined as the specific period on an ad space.      The price of the token is fixed.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "currentPrice(uint256)": {
        "details": "Returns the current price.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "deletePeriod(uint256)": {
        "details": "Deletes a period and its token.      If there is any users locking the fund for the sale, the amount would be transfered      to the user when deleting the period.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "denyProposal(uint256,string,bool)": {
        "details": "Denies the submitted proposal, mentioning what is the problem.",
        "params": {
          "offensive": "bool if the content would offend somebody",
          "reason": "string of the reason why it is rejected",
          "tokenId": "uint256 of the token ID"
        }
      },
      "display(string)": {
        "details": "Displays the ad content that is approved by the media owner.",
        "params": {
          "spaceMetadata": "string of the space metadata"
        }
      },
      "eventEmitterAddress()": {
        "details": "Gets the address of EventEmitter."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "initialize(string,string,address)": {
        "details": "Initialize the instance.",
        "params": {
          "baseURI": "string of the base URI",
          "nameRegistry": "address of NameRegistry",
          "title": "string of the title of the instance"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mediaFactoryAddress()": {
        "details": "Gets the address of MediaFactory."
      },
      "mediaRegistryAddress()": {
        "details": "Gets the address of MediaRegistry."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "nameRegistryAddress()": {
        "details": "Gets the address of NameRegistry"
      },
      "newPeriod(string,string,uint256,uint256,uint256,uint8,uint256)": {
        "details": "Create a new period for a space. This function requires some params      to decide which kinds of pricing way and how much price to get started.",
        "params": {
          "displayEndTimestamp": "uint256 of the end timestamp for the display",
          "displayStartTimestamp": "uint256 of the start timestamp for the display",
          "minPrice": "uint256 of the minimum price to sell it out",
          "pricing": "uint256 of the pricing way",
          "saleEndTimestamp": "uint256 of the end timestamp for the sale",
          "spaceMetadata": "string of the space metadata",
          "tokenMetadata": "string of the token metadata"
        }
      },
      "newSpace(string)": {
        "details": "Creates a new space for the media account.",
        "params": {
          "spaceMetadata": "string of the space metadata"
        }
      },
      "owner()": {
        "details": "Gets the owner address."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "propose(uint256,string)": {
        "details": "Proposes the metadata to the token you bought.      Users can propose many times as long as it is accepted.",
        "params": {
          "metadata": "string of the proposal metadata",
          "tokenId": "uint256 of the token ID"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Overrides transferFrom to emit an event from the common emitter."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "selectProposal(uint256,uint256)": {
        "details": "Selects the best proposal bidded with.",
        "params": {
          "index": "uint256 of the index number",
          "tokenId": "uint256 of the token ID"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenIdsOf(string)": {
        "details": "Returns tokenIds tied with the space metadata",
        "params": {
          "spaceMetadata": "string of the space metadata"
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Overrides transferFrom to emit an event from the common emitter."
      },
      "updateMedia(address,string)": {
        "details": "Updates the media EOA and the metadata.",
        "params": {
          "newMediaEOA": "address of a new EOA",
          "newMetadata": "string of a new metadata"
        }
      },
      "vaultAddress()": {
        "details": "Gets the address of Vault."
      },
      "withdraw()": {
        "details": "Withdraws the fund deposited to the proxy contract.      If you put 0 as the amount, you can withdraw as much as possible."
      },
      "withdrawalAmount()": {
        "details": "Returns the withdrawal amount."
      }
    },
    "title": "AdManager - manages ad spaces and its periods to sell them to users.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2091,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2093,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2095,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_baseURI",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2099,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2103,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_owners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2107,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2111,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2117,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2123,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2127,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2130,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_allTokens",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2134,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1762,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_nameRegistry",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(INameRegistry)4285"
      },
      {
        "astId": 3662,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "spaced",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 3668,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "periods",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(Period)4320_storage)"
      },
      {
        "astId": 3674,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_periodKeys",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3681,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "appealed",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_array(t_struct(Appeal)4458_storage)dyn_storage)"
      },
      {
        "astId": 3684,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_biddingTotal",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 3687,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_offeredTotal",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 3693,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "proposed",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_struct(Proposal)4359_storage)"
      },
      {
        "astId": 3700,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "deniedReasons",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_array(t_struct(Denied)4354_storage)dyn_storage)"
      },
      {
        "astId": 3705,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "accepted",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 114,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_status",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Appeal)4458_storage)dyn_storage": {
        "base": "t_struct(Appeal)4458_storage",
        "encoding": "dynamic_array",
        "label": "struct Sale.Appeal[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Denied)4354_storage)dyn_storage": {
        "base": "t_struct(Denied)4354_storage",
        "encoding": "dynamic_array",
        "label": "struct Draft.Denied[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(INameRegistry)4285": {
        "encoding": "inplace",
        "label": "contract INameRegistry",
        "numberOfBytes": "20"
      },
      "t_enum(Pricing)4296": {
        "encoding": "inplace",
        "label": "enum Ad.Pricing",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(Appeal)4458_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Sale.Appeal[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Appeal)4458_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_struct(Denied)4354_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Draft.Denied[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Denied)4354_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Period)4320_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Ad.Period)",
        "numberOfBytes": "32",
        "value": "t_struct(Period)4320_storage"
      },
      "t_mapping(t_uint256,t_struct(Proposal)4359_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Draft.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)4359_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Appeal)4458_storage": {
        "encoding": "inplace",
        "label": "struct Sale.Appeal",
        "members": [
          {
            "astId": 4451,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4453,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "sender",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4455,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4457,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "content",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Denied)4354_storage": {
        "encoding": "inplace",
        "label": "struct Draft.Denied",
        "members": [
          {
            "astId": 4351,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "reason",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4353,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "offensive",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Period)4320_storage": {
        "encoding": "inplace",
        "label": "struct Ad.Period",
        "members": [
          {
            "astId": 4298,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "mediaProxy",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4300,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "spaceMetadata",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4302,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "tokenMetadata",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 4304,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "saleStartTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4306,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "saleEndTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4308,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "displayStartTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4310,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "displayEndTimestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4313,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "pricing",
            "offset": 0,
            "slot": "7",
            "type": "t_enum(Pricing)4296"
          },
          {
            "astId": 4315,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "minPrice",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 4317,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "startPrice",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 4319,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "sold",
            "offset": 0,
            "slot": "10",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(Proposal)4359_storage": {
        "encoding": "inplace",
        "label": "struct Draft.Proposal",
        "members": [
          {
            "astId": 4356,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "content",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4358,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "proposer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}