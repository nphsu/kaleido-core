{
  "address": "0xA3e4fadad91698daDdB9C5b5bc2a628eC1Dde1D0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenMetadata",
          "type": "string"
        }
      ],
      "name": "acceptOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "acceptProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "spaceMetadata",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "displayStartTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "displayEndTimestamp",
          "type": "uint256"
        }
      ],
      "name": "adId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "proposalMetadata",
          "type": "string"
        }
      ],
      "name": "bidWithProposal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buyBasedOnTime",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "currentPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "deletePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "offensive",
          "type": "bool"
        }
      ],
      "name": "denyProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "spaceMetadata",
          "type": "string"
        }
      ],
      "name": "display",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "englishAuctionAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eventEmitterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenMetadata",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "mediaEOA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nameRegistry",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mediaFactoryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mediaRegistryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nameRegistryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "spaceMetadata",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenMetadata",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "saleEndTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "displayStartTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "displayEndTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum Ad.Pricing",
          "name": "pricing",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        }
      ],
      "name": "newPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "spaceMetadata",
          "type": "string"
        }
      ],
      "name": "newSpace",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offerBidAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "spaceMetadata",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "displayStartTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "displayEndTimestamp",
          "type": "uint256"
        }
      ],
      "name": "offerPeriod",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openBidAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalReviewAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "propose",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "pushToSuccessfulBidder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "receiveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "selectProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newMediaEOA",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "newMetadata",
          "type": "string"
        }
      ],
      "name": "updateMedia",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x95faf508822d5eca2e96da752e304daee3489348db2770361228efad1ade281d",
  "receipt": {
    "to": null,
    "from": "0xCdfc500F7f0FCe1278aECb0340b523cD55b3EBbb",
    "contractAddress": "0xA3e4fadad91698daDdB9C5b5bc2a628eC1Dde1D0",
    "transactionIndex": 0,
    "gasUsed": "5101944",
    "logsBloom": "0x
    "blockHash": "0x87086954e19e6db7ac0d6c493470d3c4379704bfcfd956a5821493353d9062c7",
    "transactionHash": "0x95faf508822d5eca2e96da752e304daee3489348db2770361228efad1ade281d",
    "logs": [],
    "blockNumber": 9760104,
    "cumulativeGasUsed": "5101944",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "289fa2710193a113c0b3ec7823c19cab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenMetadata\",\"type\":\"string\"}],\"name\":\"acceptOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"acceptProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"spaceMetadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"displayStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"displayEndTimestamp\",\"type\":\"uint256\"}],\"name\":\"adId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proposalMetadata\",\"type\":\"string\"}],\"name\":\"bidWithProposal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyBasedOnTime\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"deletePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"offensive\",\"type\":\"bool\"}],\"name\":\"denyProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"spaceMetadata\",\"type\":\"string\"}],\"name\":\"display\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"englishAuctionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventEmitterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenMetadata\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"mediaEOA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nameRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mediaFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mediaRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"spaceMetadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenMetadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"saleEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"displayStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"displayEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum Ad.Pricing\",\"name\":\"pricing\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"}],\"name\":\"newPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"spaceMetadata\",\"type\":\"string\"}],\"name\":\"newSpace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offerBidAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"spaceMetadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"displayStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"displayEndTimestamp\",\"type\":\"uint256\"}],\"name\":\"offerPeriod\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openBidAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalReviewAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"pushToSuccessfulBidder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"receiveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"selectProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMediaEOA\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newMetadata\",\"type\":\"string\"}],\"name\":\"updateMedia\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Shumpei Koike - <shumpei.koike@bridges.inc>\",\"kind\":\"dev\",\"methods\":{\"acceptOffer(uint256,string)\":{\"details\":\"Accepts an offer by the Media.\",\"params\":{\"tokenId\":\"uint256 of the token ID\",\"tokenMetadata\":\"string of the NFT token metadata\"}},\"acceptProposal(uint256)\":{\"details\":\"Accepts the proposal.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"adId(string,uint256,uint256)\":{\"details\":\"Returns ID based on the space metadata, display start timestamp, and      display end timestamp. These three makes it the unique.\",\"params\":{\"displayEndTimestamp\":\"uint256 of the end timestamp for the display\",\"displayStartTimestamp\":\"uint256 of the start timestamp for the display\",\"spaceMetadata\":\"uint256 of the space metadata\"}},\"adPoolAddress()\":{\"details\":\"Gets the address of AdPool.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balance()\":{\"details\":\"Returns the balacne deposited on the proxy contract.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"bid(uint256)\":{\"details\":\"Bids to participate in an auction.      It is defined as an English Auction.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"bidWithProposal(uint256,string)\":{\"details\":\"Bids to participate in an auction.      It is defined as an Open Bid.\",\"params\":{\"proposalMetadata\":\"string of the metadata hash\",\"tokenId\":\"uint256 of the token ID\"}},\"buy(uint256)\":{\"details\":\"Buys the token that is defined as the specific period on an ad space.      The price of the token is fixed.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"buyBasedOnTime(uint256)\":{\"details\":\"Buys the token that is defined as the specific period on an ad space.      The price is decreasing as time goes by, that is defined as an Dutch Auction.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"cancelOffer(uint256)\":{\"details\":\"Cancels an offer.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"currentPrice(uint256)\":{\"details\":\"Returns the current price.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"deletePeriod(uint256)\":{\"details\":\"Deletes a period and its token.      If there is any users locking the fund for the sale, the amount would be transfered      to the user when deleting the period.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"denyProposal(uint256,string,bool)\":{\"details\":\"Denies the submitted proposal, mentioning what is the problem.\",\"params\":{\"offensive\":\"bool if the content would offend somebody\",\"reason\":\"string of the reason why it is rejected\",\"tokenId\":\"uint256 of the token ID\"}},\"display(string)\":{\"details\":\"Displays the ad content that is approved by the media owner.\",\"params\":{\"spaceMetadata\":\"string of the space metadata\"}},\"englishAuctionAddress()\":{\"details\":\"Gets the address of EnglishAuction.\"},\"eventEmitterAddress()\":{\"details\":\"Gets the address of EventEmitter.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"initialize(string,string,string,address,address)\":{\"details\":\"Initialize the instance.\",\"params\":{\"baseURI\":\"string of the base URI\",\"mediaEOA\":\"address of the media owner\",\"nameRegistry\":\"address of NameRegistry\",\"title\":\"string of the title of the instance\",\"tokenMetadata\":\"string of the token metadata\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mediaFactoryAddress()\":{\"details\":\"Gets the address of MediaFactory.\"},\"mediaRegistryAddress()\":{\"details\":\"Gets the address of MediaRegistry.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"nameRegistryAddress()\":{\"details\":\"Gets the address of NameRegistry\"},\"newPeriod(string,string,uint256,uint256,uint256,uint8,uint256)\":{\"details\":\"Create a new period for a space. This function requires some params      to decide which kinds of pricing way and how much price to get started.\",\"params\":{\"displayEndTimestamp\":\"uint256 of the end timestamp for the display\",\"displayStartTimestamp\":\"uint256 of the start timestamp for the display\",\"minPrice\":\"uint256 of the minimum price to sell it out\",\"pricing\":\"uint256 of the pricing way\",\"saleEndTimestamp\":\"uint256 of the end timestamp for the sale\",\"spaceMetadata\":\"string of the space metadata\",\"tokenMetadata\":\"string of the token metadata\"}},\"newSpace(string)\":{\"details\":\"Creates a new space for the media account.\",\"params\":{\"spaceMetadata\":\"string of the space metadata\"}},\"offerBidAddress()\":{\"details\":\"Gets the address of OfferBid.\"},\"offerPeriod(string,uint256,uint256)\":{\"details\":\"Offers to buy a period that the sender requests.\",\"params\":{\"displayEndTimestamp\":\"uint256 of the end timestamp for the display\",\"displayStartTimestamp\":\"uint256 of the start timestamp for the display\",\"spaceMetadata\":\"string of the space metadata\"}},\"openBidAddress()\":{\"details\":\"Gets the address of OpenBid.\"},\"owner()\":{\"details\":\"Gets the owner address.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"proposalReviewAddress()\":{\"details\":\"Gets the address of ProposalReview.\"},\"propose(uint256,string)\":{\"details\":\"Proposes the metadata to the token you bought.      Users can propose many times as long as it is accepted.\",\"params\":{\"metadata\":\"string of the proposal metadata\",\"tokenId\":\"uint256 of the token ID\"}},\"pushToSuccessfulBidder(uint256)\":{\"details\":\"Receives the token you bidded if you are the successful bidder.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"receiveToken(uint256)\":{\"details\":\"Receives the token you bidded if you are the successful bidder.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Overrides transferFrom to emit an event from the common emitter.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"selectProposal(uint256,uint256)\":{\"details\":\"Selects the best proposal bidded with.\",\"params\":{\"index\":\"uint256 of the index number\",\"tokenId\":\"uint256 of the token ID\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Overrides transferFrom to emit an event from the common emitter.\"},\"updateMedia(address,string)\":{\"details\":\"Updates the media EOA and the metadata.\",\"params\":{\"newMediaEOA\":\"address of a new EOA\",\"newMetadata\":\"string of a new metadata\"}},\"vaultAddress()\":{\"details\":\"Gets the address of Vault.\"},\"withdraw()\":{\"details\":\"Withdraws the fund deposited to the proxy contract.      If you put 0 as the amount, you can withdraw as much as possible.\"},\"withdrawalAmount()\":{\"details\":\"Returns the withdrawal amount.\"}},\"title\":\"MediaFacade - manages ad spaces and its periods to sell them to users.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MediaFacade.sol\":\"MediaFacade\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"contracts/MediaFacade.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./base/DistributionRight.sol\\\";\\nimport \\\"./base/Storage.sol\\\";\\nimport \\\"./libraries/Purchase.sol\\\";\\nimport \\\"./libraries/Sale.sol\\\";\\nimport \\\"./common/BlockTimestamp.sol\\\";\\nimport \\\"./accessors/NameAccessor.sol\\\";\\nimport \\\"./interfaces/IMediaRegistry.sol\\\";\\nimport \\\"./interfaces/IAdPool.sol\\\";\\nimport \\\"./interfaces/IEnglishAuction.sol\\\";\\nimport \\\"./interfaces/IEventEmitter.sol\\\";\\nimport \\\"./interfaces/IOpenBid.sol\\\";\\nimport \\\"./interfaces/IOfferBid.sol\\\";\\nimport \\\"./interfaces/IProposalReview.sol\\\";\\n\\n/// @title MediaFacade - manages ad spaces and its periods to sell them to users.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ncontract MediaFacade is\\n\\tDistributionRight,\\n\\tReentrancyGuard,\\n\\tNameAccessor,\\n\\tBlockTimestamp,\\n\\tStorage\\n{\\n\\t/// @dev Can call it by only the media\\n\\tmodifier onlyMedia() {\\n\\t\\trequire(_mediaRegistry().ownerOf(address(this)) == msg.sender, \\\"KD012\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Prevents the media from calling by yourself\\n\\tmodifier exceptYourself() {\\n\\t\\trequire(_mediaRegistry().ownerOf(address(this)) != msg.sender, \\\"KD014\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Called by the successful bidder\\n\\tmodifier onlySuccessfulBidder(uint256 tokenId) {\\n\\t\\trequire(_english().bidding(tokenId).bidder == msg.sender, \\\"KD126\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Can call it only once\\n\\tmodifier initializer() {\\n\\t\\trequire(address(_nameRegistry) == address(0x0), \\\"AR000\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Initialize the instance.\\n\\t/// @param title string of the title of the instance\\n\\t/// @param baseURI string of the base URI\\n\\t/// @param tokenMetadata string of the token metadata\\n\\t/// @param mediaEOA address of the media owner\\n\\t/// @param nameRegistry address of NameRegistry\\n\\tfunction initialize(\\n\\t\\tstring memory title,\\n\\t\\tstring memory baseURI,\\n\\t\\tstring memory tokenMetadata,\\n\\t\\taddress mediaEOA,\\n\\t\\taddress nameRegistry\\n\\t) external virtual initializer {\\n\\t\\t_name = title;\\n\\t\\t_symbol = string(abi.encodePacked(\\\"Kaleido_\\\", title));\\n\\t\\t_baseURI = baseURI;\\n\\t\\t_mintRight(mediaEOA, 0, tokenMetadata);\\n\\t\\tinitialize(nameRegistry);\\n\\t}\\n\\n\\t/// @dev Updates the media EOA and the metadata.\\n\\t/// @param newMediaEOA address of a new EOA\\n\\t/// @param newMetadata string of a new metadata\\n\\tfunction updateMedia(address newMediaEOA, string memory newMetadata)\\n\\t\\texternal\\n\\t\\tvirtual\\n\\t\\tonlyMedia\\n\\t{\\n\\t\\t_mediaRegistry().updateMedia(newMediaEOA, newMetadata);\\n\\t\\t_eventEmitter().emitUpdateMedia(address(this), newMediaEOA, newMetadata);\\n\\t}\\n\\n\\t/// @dev Creates a new space for the media account.\\n\\t/// @param spaceMetadata string of the space metadata\\n\\tfunction newSpace(string memory spaceMetadata) external virtual onlyMedia {\\n\\t\\t_adPool().addSpace(spaceMetadata);\\n\\t}\\n\\n\\t/// @dev Create a new period for a space. This function requires some params\\n\\t///      to decide which kinds of pricing way and how much price to get started.\\n\\t/// @param spaceMetadata string of the space metadata\\n\\t/// @param tokenMetadata string of the token metadata\\n\\t/// @param saleEndTimestamp uint256 of the end timestamp for the sale\\n\\t/// @param displayStartTimestamp uint256 of the start timestamp for the display\\n\\t/// @param displayEndTimestamp uint256 of the end timestamp for the display\\n\\t/// @param pricing uint256 of the pricing way\\n\\t/// @param minPrice uint256 of the minimum price to sell it out\\n\\tfunction newPeriod(\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tstring memory tokenMetadata,\\n\\t\\tuint256 saleEndTimestamp,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\tAd.Pricing pricing,\\n\\t\\tuint256 minPrice\\n\\t) external virtual onlyMedia {\\n\\t\\tuint256 tokenId = _adPool().addPeriod(\\n\\t\\t\\taddress(this),\\n\\t\\t\\tspaceMetadata,\\n\\t\\t\\ttokenMetadata,\\n\\t\\t\\tsaleEndTimestamp,\\n\\t\\t\\tdisplayStartTimestamp,\\n\\t\\t\\tdisplayEndTimestamp,\\n\\t\\t\\tpricing,\\n\\t\\t\\tminPrice\\n\\t\\t);\\n\\t\\t_mintRight(address(this), tokenId, tokenMetadata);\\n\\t\\t_eventEmitter().emitTransferCustom(address(0), address(this), tokenId);\\n\\t}\\n\\n\\t/// @dev Deletes a period and its token.\\n\\t///      If there is any users locking the fund for the sale, the amount would be transfered\\n\\t///      to the user when deleting the period.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction deletePeriod(uint256 tokenId) external virtual onlyMedia {\\n\\t\\trequire(_adPool().allPeriods(tokenId).mediaProxy != address(0), \\\"KD114\\\");\\n\\t\\trequire(ownerOf(tokenId) == address(this), \\\"KD121\\\");\\n\\t\\trequire(!_alreadyBid(tokenId), \\\"KD128\\\");\\n\\t\\t_burnRight(tokenId);\\n\\t\\t_adPool().deletePeriod(tokenId);\\n\\t\\t_eventEmitter().emitTransferCustom(address(this), address(0), tokenId);\\n\\t}\\n\\n\\t/// @dev Buys the token that is defined as the specific period on an ad space.\\n\\t///      The price of the token is fixed.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction buy(uint256 tokenId) external payable virtual exceptYourself {\\n\\t\\tPurchase.checkBeforeBuy(_adPool().allPeriods(tokenId), msg.value);\\n\\t\\t_adPool().sold(tokenId);\\n\\t\\t_dropRight(msg.sender, tokenId);\\n\\t\\t_collectFees(msg.value / 10);\\n\\t\\t_eventEmitter().emitBuy(tokenId, msg.value, msg.sender, _blockTimestamp());\\n\\t\\t_eventEmitter().emitTransferCustom(address(this), msg.sender, tokenId);\\n\\t}\\n\\n\\t/// @dev Buys the token that is defined as the specific period on an ad space.\\n\\t///      The price is decreasing as time goes by, that is defined as an Dutch Auction.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction buyBasedOnTime(uint256 tokenId)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\tvirtual\\n\\t\\texceptYourself\\n\\t{\\n\\t\\tPurchase.checkBeforeBuyBasedOnTime(\\n\\t\\t\\t_adPool().allPeriods(tokenId),\\n\\t\\t\\tcurrentPrice(tokenId),\\n\\t\\t\\tmsg.value\\n\\t\\t);\\n\\t\\t_adPool().sold(tokenId);\\n\\t\\t_dropRight(msg.sender, tokenId);\\n\\t\\t_collectFees(msg.value / 10);\\n\\t\\t_eventEmitter().emitBuy(tokenId, msg.value, msg.sender, _blockTimestamp());\\n\\t\\t_eventEmitter().emitTransferCustom(address(this), msg.sender, tokenId);\\n\\t}\\n\\n\\t/// @dev Bids to participate in an auction.\\n\\t///      It is defined as an English Auction.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction bid(uint256 tokenId)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\tvirtual\\n\\t\\texceptYourself\\n\\t\\tnonReentrant\\n\\t{\\n\\t\\tPurchase.checkBeforeBid(\\n\\t\\t\\t_adPool().allPeriods(tokenId),\\n\\t\\t\\tcurrentPrice(tokenId),\\n\\t\\t\\t_blockTimestamp(),\\n\\t\\t\\tmsg.value\\n\\t\\t);\\n\\t\\tuint256 refunded = _refundBiddingAmount(tokenId);\\n\\t\\t_english().bid(tokenId, msg.sender, msg.value);\\n\\t\\t_processingTotal += (msg.value - refunded);\\n\\t}\\n\\n\\t/// @dev Bids to participate in an auction.\\n\\t///      It is defined as an Open Bid.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param proposalMetadata string of the metadata hash\\n\\tfunction bidWithProposal(uint256 tokenId, string memory proposalMetadata)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\tvirtual\\n\\t\\texceptYourself\\n\\t\\tnonReentrant\\n\\t{\\n\\t\\tPurchase.checkBeforeBidWithProposal(\\n\\t\\t\\t_adPool().allPeriods(tokenId),\\n\\t\\t\\t_blockTimestamp(),\\n\\t\\t\\tmsg.value\\n\\t\\t);\\n\\t\\t_processingTotal += msg.value;\\n\\t\\t_openBid().bid(tokenId, proposalMetadata, msg.sender, msg.value);\\n\\t}\\n\\n\\t/// @dev Selects the best proposal bidded with.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param index uint256 of the index number\\n\\tfunction selectProposal(uint256 tokenId, uint256 index)\\n\\t\\texternal\\n\\t\\tvirtual\\n\\t\\tonlyMedia\\n\\t{\\n\\t\\t_refundToProposers(tokenId, index);\\n\\t\\taddress successfulBidder = _openBid().selectProposal(tokenId, index);\\n\\t\\t_dropRight(successfulBidder, tokenId);\\n\\t\\t_eventEmitter().emitTransferCustom(\\n\\t\\t\\taddress(this),\\n\\t\\t\\tsuccessfulBidder,\\n\\t\\t\\ttokenId\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _refundToProposers(uint256 tokenId, uint256 index) internal virtual {\\n\\t\\tSale.OpenBid[] memory _biddings = _openBid().biddingList(tokenId);\\n\\n\\t\\tfor (uint256 i = 0; i < _biddings.length; i++) {\\n\\t\\t\\tSale.OpenBid memory target = _biddings[i];\\n\\t\\t\\t_processingTotal -= target.price;\\n\\t\\t\\tif (i == index) {\\n\\t\\t\\t\\t_collectFees(target.price / 10);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t(bool success, ) = payable(target.sender).call{\\n\\t\\t\\t\\t\\tvalue: target.price,\\n\\t\\t\\t\\t\\tgas: 10000\\n\\t\\t\\t\\t}(\\\"\\\");\\n\\t\\t\\t\\tif (!success) {\\n\\t\\t\\t\\t\\t_eventEmitter().emitPaymentFailure(target.sender, target.price);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _refundBiddingAmount(uint256 tokenId)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t\\treturns (uint256 refunded)\\n\\t{\\n\\t\\tAd.Period memory period = _adPool().allPeriods(tokenId);\\n\\t\\tSale.Bidding memory _bidding = _english().bidding(tokenId);\\n\\t\\tif (period.pricing == Ad.Pricing.ENGLISH && _bidding.bidder != address(0)) {\\n\\t\\t\\t(bool success, ) = payable(_bidding.bidder).call{\\n\\t\\t\\t\\tvalue: _bidding.price,\\n\\t\\t\\t\\tgas: 10000\\n\\t\\t\\t}(\\\"\\\");\\n\\t\\t\\trefunded = _bidding.price;\\n\\t\\t\\tif (!success) {\\n\\t\\t\\t\\t_eventEmitter().emitPaymentFailure(_bidding.bidder, _bidding.price);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev Receives the token you bidded if you are the successful bidder.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction receiveToken(uint256 tokenId)\\n\\t\\texternal\\n\\t\\tvirtual\\n\\t\\tonlySuccessfulBidder(tokenId)\\n\\t{\\n\\t\\t_toSuccessfulBidder(tokenId, msg.sender);\\n\\t}\\n\\n\\t/// @dev Receives the token you bidded if you are the successful bidder.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction pushToSuccessfulBidder(uint256 tokenId) external virtual onlyMedia {\\n\\t\\t_toSuccessfulBidder(tokenId, _english().bidding(tokenId).bidder);\\n\\t}\\n\\n\\t/// @dev Offers to buy a period that the sender requests.\\n\\t/// @param spaceMetadata string of the space metadata\\n\\t/// @param displayStartTimestamp uint256 of the start timestamp for the display\\n\\t/// @param displayEndTimestamp uint256 of the end timestamp for the display\\n\\tfunction offerPeriod(\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp\\n\\t) external payable virtual exceptYourself {\\n\\t\\t_offerBid().offer(\\n\\t\\t\\tspaceMetadata,\\n\\t\\t\\tdisplayStartTimestamp,\\n\\t\\t\\tdisplayEndTimestamp,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tmsg.value\\n\\t\\t);\\n\\t\\t_processingTotal += msg.value;\\n\\t}\\n\\n\\t/// @dev Cancels an offer.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction cancelOffer(uint256 tokenId) external virtual exceptYourself {\\n\\t\\tuint256 offeredPrice = _refundOfferedAmount(tokenId);\\n\\t\\t_offerBid().cancel(tokenId, msg.sender);\\n\\t\\t_processingTotal -= offeredPrice;\\n\\t}\\n\\n\\tfunction _refundOfferedAmount(uint256 tokenId)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t\\treturns (uint256 offeredPrice)\\n\\t{\\n\\t\\tAd.Period memory period = _adPool().allPeriods(tokenId);\\n\\t\\tSale.Offer memory _offered = _offerBid().offered(tokenId);\\n\\t\\tif (period.pricing == Ad.Pricing.OFFER && _offered.sender != address(0)) {\\n\\t\\t\\t(bool success, ) = payable(_offered.sender).call{\\n\\t\\t\\t\\tvalue: _offered.price,\\n\\t\\t\\t\\tgas: 10000\\n\\t\\t\\t}(\\\"\\\");\\n\\t\\t\\tofferedPrice = _offered.price;\\n\\t\\t\\tif (!success) {\\n\\t\\t\\t\\t_eventEmitter().emitPaymentFailure(_offered.sender, _offered.price);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev Accepts an offer by the Media.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param tokenMetadata string of the NFT token metadata\\n\\tfunction acceptOffer(uint256 tokenId, string memory tokenMetadata)\\n\\t\\texternal\\n\\t\\tvirtual\\n\\t\\tonlyMedia\\n\\t{\\n\\t\\tSale.Offer memory target = _offerBid().accept(tokenId);\\n\\t\\t_adPool().acceptOffer(tokenId, tokenMetadata, target);\\n\\t\\t_mintRight(target.sender, tokenId, tokenMetadata);\\n\\t\\t_collectFees(target.price / 10);\\n\\t\\t_processingTotal -= target.price;\\n\\t\\t_eventEmitter().emitTransferCustom(address(0), address(this), tokenId);\\n\\t}\\n\\n\\t/// @dev Withdraws the fund deposited to the proxy contract.\\n\\t///      If you put 0 as the amount, you can withdraw as much as possible.\\n\\tfunction withdraw() external virtual onlyMedia {\\n\\t\\tuint256 withdrawal = withdrawalAmount();\\n\\t\\t(bool success, ) = payable(msg.sender).call{\\n\\t\\t\\tvalue: withdrawal,\\n\\t\\t\\tgas: 10000\\n\\t\\t}(\\\"\\\");\\n\\t\\tif (success) {\\n\\t\\t\\t_eventEmitter().emitWithdraw(withdrawal);\\n\\t\\t} else {\\n\\t\\t\\t_eventEmitter().emitPaymentFailure(msg.sender, withdrawal);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev Proposes the metadata to the token you bought.\\n\\t///      Users can propose many times as long as it is accepted.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param metadata string of the proposal metadata\\n\\tfunction propose(uint256 tokenId, string memory metadata) external virtual {\\n\\t\\trequire(ownerOf(tokenId) == msg.sender, \\\"KD012\\\");\\n\\t\\t_review().propose(tokenId, metadata, msg.sender);\\n\\t}\\n\\n\\t/// @dev Accepts the proposal.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction acceptProposal(uint256 tokenId) external virtual onlyMedia {\\n\\t\\t// require(ownerOf(tokenId) == proposed[tokenId].proposer, \\\"KD131\\\");\\n\\t\\trequire(ownerOf(tokenId) == _review().proposer(tokenId), \\\"KD131\\\");\\n\\t\\t_review().accept(tokenId);\\n\\t}\\n\\n\\t/// @dev Denies the submitted proposal, mentioning what is the problem.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param reason string of the reason why it is rejected\\n\\t/// @param offensive bool if the content would offend somebody\\n\\tfunction denyProposal(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory reason,\\n\\t\\tbool offensive\\n\\t) external virtual onlyMedia {\\n\\t\\t_review().denyProposal(tokenId, reason, offensive);\\n\\t}\\n\\n\\t/// @dev Overrides transferFrom to emit an event from the common emitter.\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public virtual override {\\n\\t\\tsuper.transferFrom(from, to, tokenId);\\n\\t\\t_eventEmitter().emitTransferCustom(from, to, tokenId);\\n\\t}\\n\\n\\t/// @dev Overrides transferFrom to emit an event from the common emitter.\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public virtual override {\\n\\t\\tsuper.safeTransferFrom(from, to, tokenId);\\n\\t\\t_eventEmitter().emitTransferCustom(from, to, tokenId);\\n\\t}\\n\\n\\t/// @dev Returns ID based on the space metadata, display start timestamp, and\\n\\t///      display end timestamp. These three makes it the unique.\\n\\t/// @param spaceMetadata uint256 of the space metadata\\n\\t/// @param displayStartTimestamp uint256 of the start timestamp for the display\\n\\t/// @param displayEndTimestamp uint256 of the end timestamp for the display\\n\\tfunction adId(\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp\\n\\t) public pure virtual returns (uint256) {\\n\\t\\treturn Ad.id(spaceMetadata, displayStartTimestamp, displayEndTimestamp);\\n\\t}\\n\\n\\t/// @dev Returns the balacne deposited on the proxy contract.\\n\\tfunction balance() public view virtual returns (uint256) {\\n\\t\\treturn address(this).balance;\\n\\t}\\n\\n\\t/// @dev Returns the withdrawal amount.\\n\\tfunction withdrawalAmount() public view virtual returns (uint256) {\\n\\t\\treturn address(this).balance - _processingTotal;\\n\\t}\\n\\n\\t/// @dev Displays the ad content that is approved by the media owner.\\n\\t/// @param spaceMetadata string of the space metadata\\n\\tfunction display(string memory spaceMetadata)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string memory, uint256)\\n\\t{\\n\\t\\tuint256[] memory tokenIds = _adPool().tokenIdsOf(spaceMetadata);\\n\\t\\tfor (uint256 i = 0; i < tokenIds.length; i++) {\\n\\t\\t\\tif (tokenIds[i] != 0) {\\n\\t\\t\\t\\tAd.Period memory period = _adPool().allPeriods(tokenIds[i]);\\n\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\tperiod.displayStartTimestamp <= _blockTimestamp() &&\\n\\t\\t\\t\\t\\tperiod.displayEndTimestamp >= _blockTimestamp()\\n\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\tstring memory content = _review().acceptedContent(tokenIds[i]);\\n\\t\\t\\t\\t\\treturn (content, tokenIds[i]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn (\\\"\\\", 0);\\n\\t}\\n\\n\\tfunction _toSuccessfulBidder(uint256 tokenId, address receiver)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t{\\n\\t\\t(address bidder, uint256 price) = _english().receiveToken(tokenId);\\n\\t\\t_adPool().sold(tokenId);\\n\\t\\t_processingTotal -= price;\\n\\t\\t_dropRight(bidder, tokenId);\\n\\t\\t_collectFees(price / 10);\\n\\t\\t_eventEmitter().emitTransferCustom(address(this), receiver, tokenId);\\n\\t}\\n\\n\\tfunction _collectFees(uint256 value) internal virtual {\\n\\t\\taddress vault = vaultAddress();\\n\\t\\t(bool success, ) = payable(vault).call{ value: value, gas: 10000 }(\\\"\\\");\\n\\t\\tif (!success) {\\n\\t\\t\\t_eventEmitter().emitPaymentFailure(vault, value);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev Returns the current price.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction currentPrice(uint256 tokenId) public view virtual returns (uint256) {\\n\\t\\tAd.Period memory period = _adPool().allPeriods(tokenId);\\n\\t\\tif (period.pricing == Ad.Pricing.RRP) {\\n\\t\\t\\treturn period.minPrice;\\n\\t\\t}\\n\\t\\tif (period.pricing == Ad.Pricing.DUTCH) {\\n\\t\\t\\treturn\\n\\t\\t\\t\\tperiod.startPrice -\\n\\t\\t\\t\\t((period.startPrice - period.minPrice) *\\n\\t\\t\\t\\t\\t(_blockTimestamp() - period.saleStartTimestamp)) /\\n\\t\\t\\t\\t(period.saleEndTimestamp - period.saleStartTimestamp);\\n\\t\\t}\\n\\t\\tif (period.pricing == Ad.Pricing.ENGLISH) {\\n\\t\\t\\treturn _english().currentPrice(tokenId);\\n\\t\\t}\\n\\t\\tif (period.pricing == Ad.Pricing.OFFER) {\\n\\t\\t\\treturn _offerBid().currentPrice(tokenId);\\n\\t\\t}\\n\\t\\tif (period.pricing == Ad.Pricing.OPEN) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\trevert(\\\"not exist\\\");\\n\\t}\\n\\n\\tfunction _alreadyBid(uint256 tokenId) internal view virtual returns (bool) {\\n\\t\\treturn\\n\\t\\t\\t_english().bidding(tokenId).bidder != address(0) ||\\n\\t\\t\\t_openBid().biddingList(tokenId).length != 0;\\n\\t}\\n\\n\\t/**\\n\\t * Accessors\\n\\t */\\n\\tfunction _mediaRegistry() internal view virtual returns (IMediaRegistry) {\\n\\t\\treturn IMediaRegistry(mediaRegistryAddress());\\n\\t}\\n\\n\\tfunction _adPool() internal view virtual returns (IAdPool) {\\n\\t\\treturn IAdPool(adPoolAddress());\\n\\t}\\n\\n\\tfunction _eventEmitter() internal view virtual returns (IEventEmitter) {\\n\\t\\treturn IEventEmitter(eventEmitterAddress());\\n\\t}\\n\\n\\tfunction _english() internal view virtual returns (IEnglishAuction) {\\n\\t\\treturn IEnglishAuction(englishAuctionAddress());\\n\\t}\\n\\n\\tfunction _openBid() internal view virtual returns (IOpenBid) {\\n\\t\\treturn IOpenBid(openBidAddress());\\n\\t}\\n\\n\\tfunction _offerBid() internal view virtual returns (IOfferBid) {\\n\\t\\treturn IOfferBid(offerBidAddress());\\n\\t}\\n\\n\\tfunction _review() internal view virtual returns (IProposalReview) {\\n\\t\\treturn IProposalReview(proposalReviewAddress());\\n\\t}\\n}\\n\",\"keccak256\":\"0x7df01a30e18ce7f0444d05fac93e1c088c37d86addc06a059899834603207626\",\"license\":\"UNLICENSED\"},\"contracts/accessors/NameAccessor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/INameRegistry.sol\\\";\\n\\n/// @title NameAccessor - manages the endpoints.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ncontract NameAccessor {\\n\\tINameRegistry internal _nameRegistry;\\n\\n\\t/// @dev Sets the address of NameRegistry.\\n\\t/// @param nameRegistry address of the NameRegistry\\n\\tfunction initialize(address nameRegistry) internal {\\n\\t\\t_nameRegistry = INameRegistry(nameRegistry);\\n\\t}\\n\\n\\t/// @dev Prevents calling a function from anyone except the accepted contracts.\\n\\tmodifier onlyAllowedContract() {\\n\\t\\trequire(_nameRegistry.allowedContracts(msg.sender), \\\"KD013\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Throws if not called by MediaFactory.\\n\\tmodifier onlyFactory() {\\n\\t\\trequire(msg.sender == mediaFactoryAddress(), \\\"KD010\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Throws if called by any account other than the owner.\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(owner() == msg.sender, \\\"KD012\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Gets the address of NameRegistry\\n\\tfunction nameRegistryAddress() public view returns (address) {\\n\\t\\treturn address(_nameRegistry);\\n\\t}\\n\\n\\t/// @dev Gets the address of AdPool.\\n\\tfunction adPoolAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"AdPool\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of MediaFactory.\\n\\tfunction mediaFactoryAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"MediaFactory\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of MediaRegistry.\\n\\tfunction mediaRegistryAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"MediaRegistry\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of Vault.\\n\\tfunction vaultAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"Vault\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of EventEmitter.\\n\\tfunction eventEmitterAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"EventEmitter\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of EnglishAuction.\\n\\tfunction englishAuctionAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"EnglishAuction\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of OpenBid.\\n\\tfunction openBidAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"OpenBid\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of OfferBid.\\n\\tfunction offerBidAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"OfferBid\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of ProposalReview.\\n\\tfunction proposalReviewAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"ProposalReview\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the owner address.\\n\\tfunction owner() public view returns (address) {\\n\\t\\treturn _nameRegistry.deployer();\\n\\t}\\n}\\n\",\"keccak256\":\"0x92a0809b892e7b89f6a5d845aca491a2eda6bd56a5cbe69db31809f9e7c15b2a\",\"license\":\"UNLICENSED\"},\"contracts/base/DistributionRight.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"../accessors/NameAccessor.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/// @title DistributionRight - represents an NFT based on ad an space\\n///        created by a media and its period.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ncontract DistributionRight is ERC721 {\\n\\tfunction _mintRight(\\n\\t\\taddress reciever,\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory metadata\\n\\t) internal virtual {\\n\\t\\t_mint(reciever, tokenId);\\n\\t\\t_tokenURIs[tokenId] = metadata;\\n\\t}\\n\\n\\tfunction _burnRight(uint256 tokenId) internal virtual {\\n\\t\\t_burn(tokenId);\\n\\t\\t_tokenURIs[tokenId] = \\\"\\\";\\n\\t}\\n\\n\\tfunction _dropRight(address receiver, uint256 tokenId) internal virtual {\\n\\t\\t_transfer(address(this), receiver, tokenId);\\n\\t}\\n}\\n\",\"keccak256\":\"0xc3a29eedb24cfac51251f4dc41e4db37e6d57a03b41dc0b4c76f25e9dee4487c\",\"license\":\"UNLICENSED\"},\"contracts/base/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/IERC721Metadata.sol\\\";\\nimport \\\"../interfaces/IERC721Receiver.sol\\\";\\nimport \\\"../interfaces/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\ncontract ERC721 is Context, IERC721Enumerable, IERC721Metadata {\\n\\tusing Address for address;\\n\\tusing Strings for uint256;\\n\\n\\t// Token name\\n\\tstring internal _name;\\n\\n\\t// Token symbol\\n\\tstring internal _symbol;\\n\\n\\t// Base URI\\n\\tstring internal _baseURI;\\n\\n\\t// Token URIs\\n\\tmapping(uint256 => string) internal _tokenURIs;\\n\\n\\t// Mapping from token ID to owner address\\n\\tmapping(uint256 => address) internal _owners;\\n\\n\\t// Mapping owner address to token count\\n\\tmapping(address => uint256) internal _balances;\\n\\n\\t// Mapping from token ID to approved address\\n\\tmapping(uint256 => address) internal _tokenApprovals;\\n\\n\\t// Mapping from owner to operator approvals\\n\\tmapping(address => mapping(address => bool)) internal _operatorApprovals;\\n\\n\\t// Mapping from owner to list of owned token IDs\\n\\tmapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n\\t// Mapping from token ID to index of the owner tokens list\\n\\tmapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n\\t// Array with all token ids, used for enumeration\\n\\tuint256[] private _allTokens;\\n\\n\\t// Mapping from token id to position in the allTokens array\\n\\tmapping(uint256 => uint256) private _allTokensIndex;\\n\\n\\t/**\\n\\t * @dev See {IERC165-supportsInterface}.\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId)\\n\\t\\tpublic\\n\\t\\tpure\\n\\t\\tvirtual\\n\\t\\toverride(IERC165)\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn\\n\\t\\t\\tinterfaceId == type(IERC721).interfaceId ||\\n\\t\\t\\tinterfaceId == type(IERC721Metadata).interfaceId;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-balanceOf}.\\n\\t */\\n\\tfunction balanceOf(address owner)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n\\t\\treturn _balances[owner];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-ownerOf}.\\n\\t */\\n\\tfunction ownerOf(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (address)\\n\\t{\\n\\t\\taddress owner = _owners[tokenId];\\n\\t\\trequire(owner != address(0), \\\"KD114\\\");\\n\\t\\treturn owner;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Metadata-name}.\\n\\t */\\n\\tfunction name() public view virtual override returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Metadata-symbol}.\\n\\t */\\n\\tfunction symbol() public view virtual override returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Metadata-tokenURI}.\\n\\t */\\n\\tfunction tokenURI(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\t_exists(tokenId),\\n\\t\\t\\t\\\"ERC721Metadata: URI query for nonexistent token\\\"\\n\\t\\t);\\n\\n\\t\\treturn\\n\\t\\t\\tbytes(_baseURI).length > 0\\n\\t\\t\\t\\t? string(abi.encodePacked(_baseURI, _tokenURIs[tokenId]))\\n\\t\\t\\t\\t: _tokenURIs[tokenId];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-approve}.\\n\\t */\\n\\tfunction approve(address to, uint256 tokenId) public virtual override {\\n\\t\\taddress owner = ownerOf(tokenId);\\n\\t\\trequire(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n\\t\\trequire(\\n\\t\\t\\t_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n\\t\\t\\t\\\"ERC721: approve caller is not owner nor approved for all\\\"\\n\\t\\t);\\n\\n\\t\\t_approve(to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-getApproved}.\\n\\t */\\n\\tfunction getApproved(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (address)\\n\\t{\\n\\t\\trequire(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n\\t\\treturn _tokenApprovals[tokenId];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-setApprovalForAll}.\\n\\t */\\n\\tfunction setApprovalForAll(address operator, bool approved)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t{\\n\\t\\trequire(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n\\t\\t_operatorApprovals[_msgSender()][operator] = approved;\\n\\t\\temit ApprovalForAll(_msgSender(), operator, approved);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-isApprovedForAll}.\\n\\t */\\n\\tfunction isApprovedForAll(address owner, address operator)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn _operatorApprovals[owner][operator];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-transferFrom}.\\n\\t */\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public virtual override {\\n\\t\\t//solhint-disable-next-line max-line-length\\n\\t\\trequire(\\n\\t\\t\\t_isApprovedOrOwner(_msgSender(), tokenId),\\n\\t\\t\\t\\\"ERC721: transfer caller is not owner nor approved\\\"\\n\\t\\t);\\n\\n\\t\\t_transfer(from, to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-safeTransferFrom}.\\n\\t */\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public virtual override {\\n\\t\\tsafeTransferFrom(from, to, tokenId, \\\"\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-safeTransferFrom}.\\n\\t */\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) public virtual override {\\n\\t\\trequire(\\n\\t\\t\\t_isApprovedOrOwner(_msgSender(), tokenId),\\n\\t\\t\\t\\\"ERC721: transfer caller is not owner nor approved\\\"\\n\\t\\t);\\n\\t\\t_safeTransfer(from, to, tokenId, _data);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n\\t * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n\\t *\\n\\t * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n\\t *\\n\\t * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n\\t * implement alternative mechanisms to perform token transfer, such as signature-based.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `from` cannot be the zero address.\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must exist and be owned by `from`.\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _safeTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) internal virtual {\\n\\t\\t_transfer(from, to, tokenId);\\n\\t\\trequire(\\n\\t\\t\\t_checkOnERC721Received(from, to, tokenId, _data),\\n\\t\\t\\t\\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns whether `tokenId` exists.\\n\\t *\\n\\t * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n\\t *\\n\\t * Tokens start existing when they are minted (`_mint`),\\n\\t * and stop existing when they are burned (`_burn`).\\n\\t */\\n\\tfunction _exists(uint256 tokenId) internal view virtual returns (bool) {\\n\\t\\treturn _owners[tokenId] != address(0);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must exist.\\n\\t */\\n\\tfunction _isApprovedOrOwner(address spender, uint256 tokenId)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\trequire(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n\\t\\taddress owner = ownerOf(tokenId);\\n\\t\\treturn (spender == owner ||\\n\\t\\t\\tgetApproved(tokenId) == spender ||\\n\\t\\t\\tisApprovedForAll(owner, spender));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Safely mints `tokenId` and transfers it to `to`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must not exist.\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _safeMint(address to, uint256 tokenId) internal virtual {\\n\\t\\t_safeMint(to, tokenId, \\\"\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n\\t * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n\\t */\\n\\tfunction _safeMint(\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) internal virtual {\\n\\t\\t_mint(to, tokenId);\\n\\t\\trequire(\\n\\t\\t\\t_checkOnERC721Received(address(0), to, tokenId, _data),\\n\\t\\t\\t\\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Mints `tokenId` and transfers it to `to`.\\n\\t *\\n\\t * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must not exist.\\n\\t * - `to` cannot be the zero address.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _mint(address to, uint256 tokenId) internal virtual {\\n\\t\\trequire(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n\\t\\trequire(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n\\t\\t_beforeTokenTransfer(address(0), to, tokenId);\\n\\n\\t\\t_balances[to] += 1;\\n\\t\\t_owners[tokenId] = to;\\n\\n\\t\\temit Transfer(address(0), to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Destroys `tokenId`.\\n\\t * The approval is cleared when the token is burned.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must exist.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _burn(uint256 tokenId) internal virtual {\\n\\t\\taddress owner = ownerOf(tokenId);\\n\\n\\t\\t_beforeTokenTransfer(owner, address(0), tokenId);\\n\\n\\t\\t// Clear approvals\\n\\t\\t_approve(address(0), tokenId);\\n\\n\\t\\t_balances[owner] -= 1;\\n\\t\\tdelete _owners[tokenId];\\n\\n\\t\\temit Transfer(owner, address(0), tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers `tokenId` from `from` to `to`.\\n\\t *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must be owned by `from`.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _transfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) internal virtual {\\n\\t\\trequire(\\n\\t\\t\\townerOf(tokenId) == from,\\n\\t\\t\\t\\\"ERC721: transfer of token that is not own\\\"\\n\\t\\t);\\n\\t\\trequire(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n\\t\\t_beforeTokenTransfer(from, to, tokenId);\\n\\n\\t\\t// Clear approvals from the previous owner\\n\\t\\t_approve(address(0), tokenId);\\n\\n\\t\\t_balances[from] -= 1;\\n\\t\\t_balances[to] += 1;\\n\\t\\t_owners[tokenId] = to;\\n\\n\\t\\temit Transfer(from, to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Approve `to` to operate on `tokenId`\\n\\t *\\n\\t * Emits a {Approval} event.\\n\\t */\\n\\tfunction _approve(address to, uint256 tokenId) internal virtual {\\n\\t\\t_tokenApprovals[tokenId] = to;\\n\\t\\temit Approval(ownerOf(tokenId), to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n\\t * The call is not executed if the target address is not a contract.\\n\\t *\\n\\t * @param from address representing the previous owner of the given token ID\\n\\t * @param to target address that will receive the tokens\\n\\t * @param tokenId uint256 ID of the token to be transferred\\n\\t * @param _data bytes optional data to send along with the call\\n\\t * @return bool whether the call correctly returned the expected magic value\\n\\t */\\n\\tfunction _checkOnERC721Received(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) private returns (bool) {\\n\\t\\tif (to.isContract()) {\\n\\t\\t\\ttry\\n\\t\\t\\t\\tIERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\\n\\t\\t\\treturns (bytes4 retval) {\\n\\t\\t\\t\\treturn retval == IERC721Receiver(to).onERC721Received.selector;\\n\\t\\t\\t} catch (bytes memory reason) {\\n\\t\\t\\t\\tif (reason.length == 0) {\\n\\t\\t\\t\\t\\trevert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tassembly {\\n\\t\\t\\t\\t\\t\\trevert(add(32, reason), mload(reason))\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Hook that is called before any token transfer. This includes minting\\n\\t * and burning.\\n\\t *\\n\\t * Calling conditions:\\n\\t *\\n\\t * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n\\t * transferred to `to`.\\n\\t * - When `from` is zero, `tokenId` will be minted for `to`.\\n\\t * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n\\t * - `from` and `to` are never both zero.\\n\\t *\\n\\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n\\t */\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) internal {\\n\\t\\tif (from == address(0)) {\\n\\t\\t\\t_addTokenToAllTokensEnumeration(tokenId);\\n\\t\\t} else if (from != to) {\\n\\t\\t\\t_removeTokenFromOwnerEnumeration(from, tokenId);\\n\\t\\t}\\n\\t\\tif (to == address(0)) {\\n\\t\\t\\t_removeTokenFromAllTokensEnumeration(tokenId);\\n\\t\\t} else if (to != from) {\\n\\t\\t\\t_addTokenToOwnerEnumeration(to, tokenId);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n\\t */\\n\\tfunction tokenOfOwnerByIndex(address owner, uint256 index)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\tindex < balanceOf(owner),\\n\\t\\t\\t\\\"ERC721Enumerable: owner index out of bounds\\\"\\n\\t\\t);\\n\\t\\treturn _ownedTokens[owner][index];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Enumerable-totalSupply}.\\n\\t */\\n\\tfunction totalSupply() public view virtual override returns (uint256) {\\n\\t\\treturn _allTokens.length;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Enumerable-tokenByIndex}.\\n\\t */\\n\\tfunction tokenByIndex(uint256 index)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\tindex < totalSupply(),\\n\\t\\t\\t\\\"ERC721Enumerable: global index out of bounds\\\"\\n\\t\\t);\\n\\t\\treturn _allTokens[index];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n\\t * @param to address representing the new owner of the given token ID\\n\\t * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n\\t */\\n\\tfunction _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n\\t\\tuint256 length = balanceOf(to);\\n\\t\\t_ownedTokens[to][length] = tokenId;\\n\\t\\t_ownedTokensIndex[tokenId] = length;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to add a token to this extension's token tracking data structures.\\n\\t * @param tokenId uint256 ID of the token to be added to the tokens list\\n\\t */\\n\\tfunction _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n\\t\\t_allTokensIndex[tokenId] = _allTokens.length;\\n\\t\\t_allTokens.push(tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n\\t * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n\\t * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n\\t * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n\\t * @param from address representing the previous owner of the given token ID\\n\\t * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n\\t */\\n\\tfunction _removeTokenFromOwnerEnumeration(address from, uint256 tokenId)\\n\\t\\tprivate\\n\\t{\\n\\t\\t// To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n\\t\\t// then delete the last slot (swap and pop).\\n\\n\\t\\tuint256 lastTokenIndex = balanceOf(from) - 1;\\n\\t\\tuint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n\\t\\t// When the token to delete is the last token, the swap operation is unnecessary\\n\\t\\tif (tokenIndex != lastTokenIndex) {\\n\\t\\t\\tuint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n\\t\\t\\t_ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n\\t\\t\\t_ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\t\\t}\\n\\n\\t\\t// This also deletes the contents at the last position of the array\\n\\t\\tdelete _ownedTokensIndex[tokenId];\\n\\t\\tdelete _ownedTokens[from][lastTokenIndex];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to remove a token from this extension's token tracking data structures.\\n\\t * This has O(1) time complexity, but alters the order of the _allTokens array.\\n\\t * @param tokenId uint256 ID of the token to be removed from the tokens list\\n\\t */\\n\\tfunction _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n\\t\\t// To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n\\t\\t// then delete the last slot (swap and pop).\\n\\n\\t\\tuint256 lastTokenIndex = _allTokens.length - 1;\\n\\t\\tuint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n\\t\\t// When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n\\t\\t// rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n\\t\\t// an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n\\t\\tuint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n\\t\\t_allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n\\t\\t_allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n\\t\\t// This also deletes the contents at the last position of the array\\n\\t\\tdelete _allTokensIndex[tokenId];\\n\\t\\t_allTokens.pop();\\n\\t}\\n}\\n\",\"keccak256\":\"0xc684d399c3f47f7a5490318574aeff7c363925f9610043a3cf91fd3f6e3b6f08\",\"license\":\"UNLICENSED\"},\"contracts/base/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\n/// @title Storage - saves state values. Note that the order of the state values\\n///                  should not be reordered when upgrading because the slot would be shifted.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\nabstract contract Storage {\\n\\t/// @dev Temporal amount that is deposited by bid or offered.\\n\\tuint256 internal _processingTotal;\\n}\\n\",\"keccak256\":\"0x53d602acb16fe3888e7c9f8ffc3f05c5080f002b3ebfeae538414867b9e920af\",\"license\":\"UNLICENSED\"},\"contracts/common/BlockTimestamp.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\n/// @title BlockTimestamp - gets a block timestamp.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\nabstract contract BlockTimestamp {\\n\\t/// @dev Method that exists purely to be overridden for tests\\n\\tfunction _blockTimestamp() internal view virtual returns (uint256) {\\n\\t\\treturn block.timestamp;\\n\\t}\\n}\\n\",\"keccak256\":\"0x417bf100ecc94b19a01559e899f68e19777eae593c783d8280d13bcabc8e43a2\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IAdPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Ad.sol\\\";\\nimport \\\"../libraries/Sale.sol\\\";\\n\\n/// @title IAdPool - stores all ads accorss every space.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface IAdPool {\\n\\tfunction allPeriods(uint256 tokenId) external view returns (Ad.Period memory);\\n\\n\\tfunction spaced(string memory spaceMetadata) external view returns (bool);\\n\\n\\tfunction addSpace(string memory spaceMetadata) external;\\n\\n\\tfunction addPeriod(\\n\\t\\taddress proxy,\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tstring memory tokenMetadata,\\n\\t\\tuint256 saleEndTimestamp,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\tAd.Pricing pricing,\\n\\t\\tuint256 minPrice\\n\\t) external returns (uint256);\\n\\n\\tfunction deletePeriod(uint256 tokenId) external;\\n\\n\\tfunction sold(uint256 tokenId) external;\\n\\n\\tfunction acceptOffer(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory tokenMetadata,\\n\\t\\tSale.Offer memory offer\\n\\t) external;\\n\\n\\tfunction mediaProxyOf(uint256 tokenId) external view returns (address);\\n\\n\\tfunction displayStart(uint256 tokenId) external view returns (uint256);\\n\\n\\tfunction displayEnd(uint256 tokenId) external view returns (uint256);\\n\\n\\tfunction tokenIdsOf(string memory spaceMetadata)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x9db94679b25b0afc4b4b94048dd2d040fd466be2024d8849d9d1d6b667dd9b1f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n\\t/**\\n\\t * @dev Returns true if this contract implements the interface defined by\\n\\t * `interfaceId`. See the corresponding\\n\\t * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n\\t * to learn more about how these ids are created.\\n\\t *\\n\\t * This function call must use less than 30 000 gas.\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x47fb51ba47a6f1dd885afda05a6d11d7f6bb24d594dbfaa4411c5185c202265e\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n\\t/**\\n\\t * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n\\t */\\n\\tevent Transfer(\\n\\t\\taddress indexed from,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 indexed tokenId\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n\\t */\\n\\tevent Approval(\\n\\t\\taddress indexed owner,\\n\\t\\taddress indexed approved,\\n\\t\\tuint256 indexed tokenId\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n\\t */\\n\\tevent ApprovalForAll(\\n\\t\\taddress indexed owner,\\n\\t\\taddress indexed operator,\\n\\t\\tbool approved\\n\\t);\\n\\n\\t/**\\n\\t * @dev Returns the number of tokens in ``owner``'s account.\\n\\t */\\n\\tfunction balanceOf(address owner) external view returns (uint256 balance);\\n\\n\\t/**\\n\\t * @dev Returns the owner of the `tokenId` token.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must exist.\\n\\t */\\n\\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n\\t/**\\n\\t * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n\\t * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `from` cannot be the zero address.\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must exist and be owned by `from`.\\n\\t * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Transfers `tokenId` token from `from` to `to`.\\n\\t *\\n\\t * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `from` cannot be the zero address.\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must be owned by `from`.\\n\\t * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n\\t * The approval is cleared when the token is transferred.\\n\\t *\\n\\t * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The caller must own the token or be an approved operator.\\n\\t * - `tokenId` must exist.\\n\\t *\\n\\t * Emits an {Approval} event.\\n\\t */\\n\\tfunction approve(address to, uint256 tokenId) external;\\n\\n\\t/**\\n\\t * @dev Returns the account approved for `tokenId` token.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must exist.\\n\\t */\\n\\tfunction getApproved(uint256 tokenId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (address operator);\\n\\n\\t/**\\n\\t * @dev Approve or remove `operator` as an operator for the caller.\\n\\t * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The `operator` cannot be the caller.\\n\\t *\\n\\t * Emits an {ApprovalForAll} event.\\n\\t */\\n\\tfunction setApprovalForAll(address operator, bool _approved) external;\\n\\n\\t/**\\n\\t * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n\\t *\\n\\t * See {setApprovalForAll}\\n\\t */\\n\\tfunction isApprovedForAll(address owner, address operator)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (bool);\\n\\n\\t/**\\n\\t * @dev Safely transfers `tokenId` token from `from` to `to`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `from` cannot be the zero address.\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must exist and be owned by `from`.\\n\\t * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes calldata data\\n\\t) external;\\n}\\n\",\"keccak256\":\"0x40ec6e28a9bb9cd5ffb08f4c1c4b54b61d8789be10153318a6c9418f25305f5a\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\t/**\\n\\t * @dev Returns the total amount of tokens stored by the contract.\\n\\t */\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n\\t * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n\\t */\\n\\tfunction tokenOfOwnerByIndex(address owner, uint256 index)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256 tokenId);\\n\\n\\t/**\\n\\t * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n\\t * Use along with {totalSupply} to enumerate all tokens.\\n\\t */\\n\\tfunction tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc09ef36867349fb40ae5ab24846feeeb1028b2f21b1f021f45c3a094eb685566\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\t/**\\n\\t * @dev Returns the token collection name.\\n\\t */\\n\\tfunction name() external view returns (string memory);\\n\\n\\t/**\\n\\t * @dev Returns the token collection symbol.\\n\\t */\\n\\tfunction symbol() external view returns (string memory);\\n\\n\\t/**\\n\\t * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n\\t */\\n\\tfunction tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6976b834147423dc07cf721d8bb7eaa1951d5f846e7c66f516959168cdbcb915\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n\\t/**\\n\\t * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n\\t * by `operator` from `from`, this function is called.\\n\\t *\\n\\t * It must return its Solidity selector to confirm the token transfer.\\n\\t * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n\\t *\\n\\t * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n\\t */\\n\\tfunction onERC721Received(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes calldata data\\n\\t) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x50af35c8123738f546a52aaa20d00a751d27337697cde9d2f7fbb991825b1dc7\",\"license\":\"MIT\"},\"contracts/interfaces/IEnglishAuction.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Sale.sol\\\";\\n\\n/// @title IEnglishAuction\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface IEnglishAuction {\\n\\tfunction bid(\\n\\t\\tuint256 tokenId,\\n\\t\\taddress sender,\\n\\t\\tuint256 amount\\n\\t) external;\\n\\n\\tfunction receiveToken(uint256 tokenId) external returns (address, uint256);\\n\\n\\tfunction bidding(uint256 tokenId) external view returns (Sale.Bidding memory);\\n\\n\\tfunction currentPrice(uint256 tokenId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x886e11338d2034f24fc592c247d028009c3e032202d23b76b5b741c07846a3f8\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IEventEmitter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Ad.sol\\\";\\n\\n/// @title IEventEmitter - emits events.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface IEventEmitter {\\n\\tfunction emitNewSpace(string memory metadata) external;\\n\\n\\tfunction emitNewPeriod(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tstring memory tokenMetadata,\\n\\t\\tuint256 saleStartTimestamp,\\n\\t\\tuint256 saleEndTimestamp,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\tAd.Pricing pricing,\\n\\t\\tuint256 minPrice\\n\\t) external;\\n\\n\\tfunction emitDeletePeriod(uint256 tokenId) external;\\n\\n\\tfunction emitBuy(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 msgValue,\\n\\t\\taddress msgSender,\\n\\t\\tuint256 blockTimestamp\\n\\t) external;\\n\\n\\tfunction emitBid(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 msgValue,\\n\\t\\taddress msgSender,\\n\\t\\tuint256 blockTimestamp\\n\\t) external;\\n\\n\\tfunction emitBidWithProposal(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 msgValue,\\n\\t\\taddress msgSender,\\n\\t\\tstring memory metadata,\\n\\t\\tuint256 blockTimestamp\\n\\t) external;\\n\\n\\tfunction emitSelectProposal(uint256 tokenId, address successfulBidder)\\n\\t\\texternal;\\n\\n\\tfunction emitReceiveToken(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 price,\\n\\t\\taddress buyer,\\n\\t\\tuint256 blockTimestamp\\n\\t) external;\\n\\n\\tfunction emitOfferPeriod(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\taddress sender,\\n\\t\\tuint256 price\\n\\t) external;\\n\\n\\tfunction emitCancelOffer(uint256 tokenId) external;\\n\\n\\tfunction emitAcceptOffer(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tstring memory tokenMetadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\tuint256 price\\n\\t) external;\\n\\n\\tfunction emitWithdraw(uint256 amount) external;\\n\\n\\tfunction emitPropose(uint256 tokenId, string memory metadata) external;\\n\\n\\tfunction emitAcceptProposal(uint256 tokenId, string memory metadata) external;\\n\\n\\tfunction emitDenyProposal(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory metadata,\\n\\t\\tstring memory reason,\\n\\t\\tbool offensive\\n\\t) external;\\n\\n\\tfunction emitTransferCustom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) external;\\n\\n\\tfunction emitNewMedia(\\n\\t\\taddress proxy,\\n\\t\\taddress mediaEOA,\\n\\t\\tstring memory applicationMetadata,\\n\\t\\tstring memory updatableMetadata,\\n\\t\\tuint256 saltNonce\\n\\t) external;\\n\\n\\tfunction emitUpdateMedia(\\n\\t\\taddress proxy,\\n\\t\\taddress mediaEOA,\\n\\t\\tstring memory accountMetadata\\n\\t) external;\\n\\n\\tfunction emitPaymentFailure(address receiver, uint256 price) external;\\n\\n\\tfunction emitReceived(address receiver, uint256 price) external;\\n}\\n\",\"keccak256\":\"0xb8824b144c059b4b6ce8f7453a5f68fd420481e29b18a4d0e5f35fa163bc4e8a\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IMediaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Ad.sol\\\";\\n\\n/// @title MediaRegistry - registers a list of media accounts.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface IMediaRegistry {\\n\\tstruct Account {\\n\\t\\taddress proxy;\\n\\t\\taddress mediaEOA;\\n\\t\\tstring applicationMetadata;\\n\\t\\tstring updatableMetadata;\\n\\t}\\n\\n\\tfunction allAccounts(address proxy)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\taddress,\\n\\t\\t\\taddress,\\n\\t\\t\\tstring memory,\\n\\t\\t\\tstring memory\\n\\t\\t);\\n\\n\\t/// @dev Adds media account.\\n\\t/// @param proxy address of the proxy contract\\n\\t/// @param applicationMetadata string of constant metadata for the defailts of the account\\n\\t/// @param updatableMetadata string of constant metadata for the defailts of the account\\n\\t/// @param mediaEOA address of the media account\\n\\tfunction addMedia(\\n\\t\\taddress proxy,\\n\\t\\tstring memory applicationMetadata,\\n\\t\\tstring memory updatableMetadata,\\n\\t\\taddress mediaEOA\\n\\t) external;\\n\\n\\t/// @dev Updates media account.\\n\\t/// @param metadata string of the account metadata\\n\\t/// @param mediaEOA address of the media account\\n\\tfunction updateMedia(address mediaEOA, string memory metadata) external;\\n\\n\\tfunction updateApplicationMetadata(address proxy, string memory metadata)\\n\\t\\texternal;\\n\\n\\t/// @dev Returns whether the account has created or not.\\n\\t/// @param proxy address of the proxy contract that represents an account.\\n\\tfunction created(address proxy) external view returns (bool);\\n\\n\\t/// @dev Returns the owner of the account.\\n\\t/// @param proxy address of the proxy contract that represents an account.\\n\\tfunction ownerOf(address proxy) external view returns (address);\\n}\\n\",\"keccak256\":\"0x63655aa8531480b3da0c4b3f6cd63d72c3ca678661fa52dd90e5ab1a89b43131\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/INameRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\n/// @title INameRegistry - saves a set of addresses used in the system.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface INameRegistry {\\n\\t/// @dev Sets the address associated with the key name.\\n\\t///      If the address is the contract, not an EOA, it is\\n\\t///      saved as the allowed contract list.\\n\\t/// @param key bytes32 of the key\\n\\t/// @param value address of the value\\n\\tfunction set(bytes32 key, address value) external;\\n\\n\\t/// @dev Gets the address associated with the key name.\\n\\t/// @param key bytes32 of the key\\n\\tfunction get(bytes32 key) external view returns (address);\\n\\n\\t/// @dev Returns whether or not the address is the one that we deployed.\\n\\t/// @param caller address of the msg.sender\\n\\tfunction allowedContracts(address caller) external returns (bool);\\n\\n\\t/// @dev Gets the deployer of NameRegistry.\\n\\tfunction deployer() external view returns (address);\\n}\\n\",\"keccak256\":\"0xb4612b34aa95a45ed84877f60adc23f5f8eb941a00a2644dc29ecea26c1c032f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOfferBid.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Sale.sol\\\";\\n\\n/// @title IOfferBid\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface IOfferBid {\\n\\tfunction offer(\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\taddress sender,\\n\\t\\tuint256 value\\n\\t) external returns (uint256);\\n\\n\\tfunction cancel(uint256 tokenId, address sender) external;\\n\\n\\tfunction accept(uint256 tokenId) external returns (Sale.Offer memory);\\n\\n\\tfunction currentPrice(uint256 tokenId) external view returns (uint256);\\n\\n\\tfunction offered(uint256 tokenId) external view returns (Sale.Offer memory);\\n}\\n\",\"keccak256\":\"0x171bdb94a94e97c18873e3a5961dcaa6ded2d5fa70396ba812e114ab1652d4b5\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOpenBid.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Sale.sol\\\";\\n\\n/// @title IOpenBid\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface IOpenBid {\\n\\tfunction bid(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory proposal,\\n\\t\\taddress sender,\\n\\t\\tuint256 amount\\n\\t) external;\\n\\n\\tfunction biddingList(uint256 tokenId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (Sale.OpenBid[] memory);\\n\\n\\tfunction bidding(uint256 tokenId, uint256 index)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (Sale.OpenBid memory);\\n\\n\\tfunction selectProposal(uint256 tokenId, uint256 index)\\n\\t\\texternal\\n\\t\\treturns (address successfulBidder);\\n}\\n\",\"keccak256\":\"0x31cdf36b1aa003150d3d4142f7cbb7cb1796300ea394534281d22cbf01ce4ecf\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IProposalReview.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\n/// @title IProposalReview\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface IProposalReview {\\n\\tstruct Denied {\\n\\t\\tstring reason;\\n\\t\\tbool offensive;\\n\\t}\\n\\tstruct Proposal {\\n\\t\\tstring content;\\n\\t\\taddress proposer;\\n\\t}\\n\\n\\tfunction propose(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory metadata,\\n\\t\\taddress msgSender\\n\\t) external;\\n\\n\\tfunction accept(uint256 tokenId) external;\\n\\n\\tfunction denyProposal(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory reason,\\n\\t\\tbool offensive\\n\\t) external;\\n\\n\\tfunction proposer(uint256 tokenId) external view returns (address);\\n\\n\\tfunction acceptedContent(uint256 tokenId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (string memory);\\n}\\n\",\"keccak256\":\"0xf4f5487eb0a8d64011dac3b6cbab1a2e8d1ac7bca2d280e6e9732ac370c3c03a\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Ad.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nlibrary Ad {\\n\\tuint256 private constant _ID_LENGTH = 100000000000000000000000000000000;\\n\\t// 0.RRP     : Recommended Retail Price\\n\\t// 1.DUTCH   : Dutch Auction\\n\\t// 2.ENGLISH : English Acction\\n\\t// 3.OFFER   : Offered by Others\\n\\t// 4.OPEN    : Open Bid by revealing the content\\n\\tenum Pricing {\\n\\t\\tRRP,\\n\\t\\tDUTCH,\\n\\t\\tENGLISH,\\n\\t\\tOFFER,\\n\\t\\tOPEN\\n\\t}\\n\\tstruct Period {\\n\\t\\taddress mediaProxy;\\n\\t\\tstring spaceMetadata;\\n\\t\\tstring tokenMetadata;\\n\\t\\tuint256 saleStartTimestamp;\\n\\t\\tuint256 saleEndTimestamp;\\n\\t\\tuint256 displayStartTimestamp;\\n\\t\\tuint256 displayEndTimestamp;\\n\\t\\tPricing pricing;\\n\\t\\tuint256 minPrice;\\n\\t\\tuint256 startPrice;\\n\\t\\tbool sold;\\n\\t}\\n\\n\\tfunction id(\\n\\t\\tstring memory metadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp\\n\\t) public pure returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\tuint256(\\n\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\tabi.encodePacked(metadata, displayStartTimestamp, displayEndTimestamp)\\n\\t\\t\\t\\t)\\n\\t\\t\\t) % _ID_LENGTH;\\n\\t}\\n}\\n\",\"keccak256\":\"0x98b8f7d36adbd4e0b75ef9c5a0ec7045e0661b9015a90beffa30004f35ff7039\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Purchase.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"./Ad.sol\\\";\\n\\nlibrary Purchase {\\n\\tfunction checkBeforeBuy(Ad.Period memory period, uint256 msgValue)\\n\\t\\tpublic\\n\\t\\tpure\\n\\t{\\n\\t\\trequire(period.pricing == Ad.Pricing.RRP, \\\"KD120\\\");\\n\\t\\trequire(!period.sold, \\\"KD121\\\");\\n\\t\\trequire(period.minPrice == msgValue, \\\"KD122\\\");\\n\\t}\\n\\n\\tfunction checkBeforeBuyBasedOnTime(\\n\\t\\tAd.Period memory period,\\n\\t\\tuint256 currentPrice,\\n\\t\\tuint256 msgValue\\n\\t) public pure {\\n\\t\\trequire(period.pricing == Ad.Pricing.DUTCH, \\\"KD123\\\");\\n\\t\\trequire(!period.sold, \\\"KD121\\\");\\n\\t\\trequire(currentPrice <= msgValue, \\\"KD122\\\");\\n\\t}\\n\\n\\tfunction checkBeforeBid(\\n\\t\\tAd.Period memory period,\\n\\t\\tuint256 currentPrice,\\n\\t\\tuint256 blockTimestamp,\\n\\t\\tuint256 msgValue\\n\\t) public pure {\\n\\t\\trequire(period.pricing == Ad.Pricing.ENGLISH, \\\"KD124\\\");\\n\\t\\trequire(!period.sold, \\\"KD121\\\");\\n\\t\\trequire(currentPrice < msgValue, \\\"KD122\\\");\\n\\t\\trequire(period.saleEndTimestamp >= blockTimestamp, \\\"KD129\\\");\\n\\t}\\n\\n\\tfunction checkBeforeBidWithProposal(\\n\\t\\tAd.Period memory period,\\n\\t\\tuint256 blockTimestamp,\\n\\t\\tuint256 msgValue\\n\\t) public pure {\\n\\t\\trequire(period.pricing == Ad.Pricing.OPEN, \\\"KD127\\\");\\n\\t\\trequire(!period.sold, \\\"KD121\\\");\\n\\t\\trequire(period.minPrice <= msgValue, \\\"KD122\\\");\\n\\t\\trequire(period.saleEndTimestamp >= blockTimestamp, \\\"KD129\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0x633c0d134cd93c15076fab913e86ca4a1d2927bae73f4974bd684b15754779d4\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Sale.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"./Ad.sol\\\";\\n\\nlibrary Sale {\\n\\tstruct Bidding {\\n\\t\\tuint256 tokenId;\\n\\t\\taddress bidder;\\n\\t\\tuint256 price;\\n\\t}\\n\\tstruct Offer {\\n\\t\\tstring spaceMetadata;\\n\\t\\tuint256 displayStartTimestamp;\\n\\t\\tuint256 displayEndTimestamp;\\n\\t\\taddress sender;\\n\\t\\tuint256 price;\\n\\t}\\n\\tstruct OpenBid {\\n\\t\\tuint256 tokenId;\\n\\t\\taddress sender;\\n\\t\\tuint256 price;\\n\\t\\tstring content;\\n\\t}\\n\\n\\tfunction startPrice(Ad.Period memory period) public pure returns (uint256) {\\n\\t\\tif (period.pricing == Ad.Pricing.RRP) {\\n\\t\\t\\treturn period.minPrice;\\n\\t\\t} else if (period.pricing == Ad.Pricing.DUTCH) {\\n\\t\\t\\treturn period.minPrice * 10;\\n\\t\\t} else if (period.pricing == Ad.Pricing.ENGLISH) {\\n\\t\\t\\treturn period.minPrice;\\n\\t\\t} else if (period.pricing == Ad.Pricing.OFFER) {\\n\\t\\t\\treturn period.minPrice;\\n\\t\\t} else if (period.pricing == Ad.Pricing.OPEN) {\\n\\t\\t\\treturn period.minPrice;\\n\\t\\t} else {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x1a32666b69f927d29b818c643d9b31e10f08e5663ed2a8409ff13522ad38bd38\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600c55615aef80620000266000396000f3fe6080604052600436106102445760003560e01c80630106d8eb1461024957806301ffc9a71461027457806306fdde03146102a4578063081812fc146102c6578063095ea7b3146102e657806313c1f27814610308578063179bcff71461032857806318160ddd146103485780631daf7ff9146103675780632231c1eb1461037a57806323b872dd1461038f57806327b7a2f5146103af5780632bc4bc68146103cd5780632f745c59146103ed57806332b18f6d1461040d57806337df00c91461042d5780633ccfd60b1461044d57806342842e0e14610462578063430bf08a14610482578063444115f614610497578063454a2ab3146104b75780634b455a51146104ca5780634f6ccce7146104ea57806353c147761461050a57806360c5cc3a146105385780636352211e146105585780636a58767e1461057857806370a082311461058d5780637a3c4c17146105ad5780637ccacd49146105cd5780637cf175fb146105e0578063899c9989146105f55780638da5cb5b146106155780638f6059d61461062a57806393525d391461063f57806395d89b411461065f578063a22cb46514610674578063b69ef8a814610694578063b88d4fde146106a7578063c531c236146106c7578063c87b56dd146106e7578063c9cd71b514610707578063d4f6b5ec1461071c578063d6d0faee1461073c578063d86800691461075c578063d96a094a1461076f578063e2f5fc7814610782578063e6e268f414610797578063e985e9c5146107ac578063ef706adf146107cc578063f0726291146107ec575b600080fd5b34801561025557600080fd5b5061025e610801565b60405161026b919061481f565b60405180910390f35b34801561028057600080fd5b5061029461028f366004614849565b6108be565b604051901515815260200161026b565b3480156102b057600080fd5b506102b96108f5565b60405161026b91906148be565b3480156102d257600080fd5b5061025e6102e13660046148d1565b610987565b3480156102f257600080fd5b506103066103013660046148ff565b610a14565b005b34801561031457600080fd5b50610306610323366004614a71565b610b25565b34801561033457600080fd5b50610306610343366004614acb565b610c3d565b34801561035457600080fd5b50600a545b60405190815260200161026b565b610306610375366004614b1a565b610dbb565b34801561038657600080fd5b5061025e610f10565b34801561039b57600080fd5b506103066103aa366004614b67565b610f41565b3480156103bb57600080fd5b50600d546001600160a01b031661025e565b3480156103d957600080fd5b506103066103e8366004614ba8565b610f83565b3480156103f957600080fd5b506103596104083660046148ff565b611095565b34801561041957600080fd5b50610306610428366004614bdc565b61112b565b34801561043957600080fd5b506103066104483660046148d1565b6112af565b34801561045957600080fd5b50610306611386565b34801561046e57600080fd5b5061030661047d366004614b67565b6114fd565b34801561048e57600080fd5b5061025e611508565b3480156104a357600080fd5b506103066104b2366004614bfe565b611537565b6103066104c53660046148d1565b611755565b3480156104d657600080fd5b506103066104e53660046148d1565b6119cd565b3480156104f657600080fd5b506103596105053660046148d1565b611c58565b34801561051657600080fd5b5061052a610525366004614ba8565b611ceb565b60405161026b929190614c2e565b34801561054457600080fd5b506103066105533660046148d1565b611f69565b34801561056457600080fd5b5061025e6105733660046148d1565b61211d565b34801561058457600080fd5b5061025e612152565b34801561059957600080fd5b506103596105a8366004614c50565b612189565b3480156105b957600080fd5b506103596105c83660046148d1565b612210565b6103066105db366004614bfe565b61246d565b3480156105ec57600080fd5b5061025e6126bf565b34801561060157600080fd5b50610306610610366004614c7a565b6126f1565b34801561062157600080fd5b5061025e6128b1565b34801561063657600080fd5b5061025e6128f6565b34801561064b57600080fd5b5061030661065a3660046148d1565b61292c565b34801561066b57600080fd5b506102b9612a6b565b34801561068057600080fd5b5061030661068f366004614d18565b612a7a565b3480156106a057600080fd5b5047610359565b3480156106b357600080fd5b506103066106c2366004614d51565b612b3b565b3480156106d357600080fd5b506103596106e2366004614b1a565b612b73565b3480156106f357600080fd5b506102b96107023660046148d1565b612c09565b34801561071357600080fd5b5061025e612d65565b34801561072857600080fd5b50610306610737366004614bfe565b612d95565b34801561074857600080fd5b50610306610757366004614dd0565b612dfc565b61030661076a3660046148d1565b612ec7565b61030661077d3660046148d1565b613199565b34801561078e57600080fd5b5061025e613305565b3480156107a357600080fd5b5061035961333d565b3480156107b857600080fd5b506102946107c7366004614e7f565b61334d565b3480156107d857600080fd5b506103066107e73660046148d1565b61337b565b3480156107f857600080fd5b5061025e6134b8565b600d546040516d22b733b634b9b420bab1ba34b7b760911b60208201526000916001600160a01b031690638eaa6ac090602e015b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161086991815260200190565b60206040518083038186803b15801561088157600080fd5b505afa158015610895573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b99190614ebd565b905090565b60006001600160e01b031982166380ac58cd60e01b14806108ef57506001600160e01b03198216635b5e139f60e01b145b92915050565b60606000805461090490614eda565b80601f016020809104026020016040519081016040528092919081815260200182805461093090614eda565b801561097d5780601f106109525761010080835404028352916020019161097d565b820191906000526020600020905b81548152906001019060200180831161096057829003601f168201915b5050505050905090565b6000610992826134ee565b6109f85760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600660205260409020546001600160a01b031690565b6000610a1f8261211d565b9050806001600160a01b0316836001600160a01b03161415610a8d5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016109ef565b336001600160a01b0382161480610aa95750610aa9813361334d565b610b165760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b60648201526084016109ef565b610b20838361350b565b505050565b33610b2e613579565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401610b59919061481f565b60206040518083038186803b158015610b7157600080fd5b505afa158015610b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba99190614ebd565b6001600160a01b031614610bcf5760405162461bcd60e51b81526004016109ef90614f15565b610bd7613583565b6001600160a01b03166313c1f2788484846040518463ffffffff1660e01b8152600401610c0693929190614f34565b600060405180830381600087803b158015610c2057600080fd5b505af1158015610c34573d6000803e3d6000fd5b50505050505050565b33610c46613579565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401610c71919061481f565b60206040518083038186803b158015610c8957600080fd5b505afa158015610c9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc19190614ebd565b6001600160a01b031614610ce75760405162461bcd60e51b81526004016109ef90614f15565b610cef613579565b6001600160a01b031663179bcff783836040518363ffffffff1660e01b8152600401610d1c929190614f5f565b600060405180830381600087803b158015610d3657600080fd5b505af1158015610d4a573d6000803e3d6000fd5b50505050610d5661358d565b6001600160a01b031663262360133084846040518463ffffffff1660e01b8152600401610d8593929190614f83565b600060405180830381600087803b158015610d9f57600080fd5b505af1158015610db3573d6000803e3d6000fd5b505050505050565b33610dc4613579565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401610def919061481f565b60206040518083038186803b158015610e0757600080fd5b505afa158015610e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3f9190614ebd565b6001600160a01b03161415610e665760405162461bcd60e51b81526004016109ef90614fb8565b610e6e613597565b6001600160a01b031663171a133d84848433346040518663ffffffff1660e01b8152600401610ea1959493929190614fd7565b602060405180830381600087803b158015610ebb57600080fd5b505af1158015610ecf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef39190615017565b5034600e6000828254610f069190615046565b9091555050505050565b600d546040516613dc195b909a5960ca1b60208201526000916001600160a01b031690638eaa6ac090602701610835565b610f4c8383836135a1565b610f5461358d565b6001600160a01b031663465bcf058484846040518463ffffffff1660e01b8152600401610c069392919061505e565b33610f8c613579565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401610fb7919061481f565b60206040518083038186803b158015610fcf57600080fd5b505afa158015610fe3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110079190614ebd565b6001600160a01b03161461102d5760405162461bcd60e51b81526004016109ef90614f15565b6110356135d2565b6001600160a01b031663b8926f2c826040518263ffffffff1660e01b815260040161106091906148be565b600060405180830381600087803b15801561107a57600080fd5b505af115801561108e573d6000803e3d6000fd5b5050505050565b60006110a083612189565b82106111025760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016109ef565b506001600160a01b03919091166000908152600860209081526040808320938352929052205490565b33611134613579565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b815260040161115f919061481f565b60206040518083038186803b15801561117757600080fd5b505afa15801561118b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111af9190614ebd565b6001600160a01b0316146111d55760405162461bcd60e51b81526004016109ef90614f15565b6111df82826135dc565b60006111e96137bc565b6040516332b18f6d60e01b815260048101859052602481018490526001600160a01b0391909116906332b18f6d90604401602060405180830381600087803b15801561123457600080fd5b505af1158015611248573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126c9190614ebd565b905061127881846137c6565b61128061358d565b6001600160a01b031663465bcf053083866040518463ffffffff1660e01b8152600401610c069392919061505e565b80336112b96137d1565b6001600160a01b031663cc889b0b836040518263ffffffff1660e01b81526004016112e691815260200190565b60606040518083038186803b1580156112fe57600080fd5b505afa158015611312573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113369190615082565b602001516001600160a01b0316146113785760405162461bcd60e51b815260206004820152600560248201526425a218991b60d91b60448201526064016109ef565b61138282336137db565b5050565b3361138f613579565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016113ba919061481f565b60206040518083038186803b1580156113d257600080fd5b505afa1580156113e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140a9190614ebd565b6001600160a01b0316146114305760405162461bcd60e51b81526004016109ef90614f15565b600061143a61333d565b604051909150600090339061271090849084818181858888f193505050503d8060008114611484576040519150601f19603f3d011682016040523d82523d6000602084013e611489565b606091505b5050905080156114c85761149b61358d565b6001600160a01b031663279862cb836040518263ffffffff1660e01b8152600401610d8591815260200190565b6114d061358d565b6001600160a01b031663ec720b9b33846040518363ffffffff1660e01b8152600401610d859291906150e3565b610f4c83838361396e565b600d546040516415985d5b1d60da1b60208201526000916001600160a01b031690638eaa6ac090602501610835565b33611540613579565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b815260040161156b919061481f565b60206040518083038186803b15801561158357600080fd5b505afa158015611597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bb9190614ebd565b6001600160a01b0316146115e15760405162461bcd60e51b81526004016109ef90614f15565b60006115eb613597565b6001600160a01b03166319b05f49846040518263ffffffff1660e01b815260040161161891815260200190565b600060405180830381600087803b15801561163257600080fd5b505af1158015611646573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261166e9190810190615141565b90506116786135d2565b6001600160a01b031663a9ad60f38484846040518463ffffffff1660e01b81526004016116a7939291906151e4565b600060405180830381600087803b1580156116c157600080fd5b505af11580156116d5573d6000803e3d6000fd5b505050506116e881606001518484613989565b611701600a82608001516116fc9190615256565b6139b2565b8060800151600e60008282546117179190615278565b90915550611725905061358d565b6001600160a01b031663465bcf05600030866040518463ffffffff1660e01b8152600401610c069392919061505e565b3361175e613579565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401611789919061481f565b60206040518083038186803b1580156117a157600080fd5b505afa1580156117b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d99190614ebd565b6001600160a01b031614156118005760405162461bcd60e51b81526004016109ef90614fb8565b6002600c5414156118235760405162461bcd60e51b81526004016109ef9061528f565b6002600c5573A5DD71afe7c4a1e123f3aF11624642F39A67e06A639e1b393661184a6135d2565b6001600160a01b031663b3a0ebc9846040518263ffffffff1660e01b815260040161187791815260200190565b60006040518083038186803b15801561188f57600080fd5b505afa1580156118a3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118cb91908101906152dc565b6118d484612210565b42346040518563ffffffff1660e01b81526004016118f594939291906154c7565b60006040518083038186803b15801561190d57600080fd5b505af4158015611921573d6000803e3d6000fd5b50505050600061193082613a53565b905061193a6137d1565b60405163c0f4ed3160e01b8152600481018490523360248201523460448201526001600160a01b03919091169063c0f4ed3190606401600060405180830381600087803b15801561198a57600080fd5b505af115801561199e573d6000803e3d6000fd5b5050505080346119ae9190615278565b600e60008282546119bf9190615046565b90915550506001600c555050565b336119d6613579565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401611a01919061481f565b60206040518083038186803b158015611a1957600080fd5b505afa158015611a2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a519190614ebd565b6001600160a01b031614611a775760405162461bcd60e51b81526004016109ef90614f15565b6000611a816135d2565b6001600160a01b031663b3a0ebc9836040518263ffffffff1660e01b8152600401611aae91815260200190565b60006040518083038186803b158015611ac657600080fd5b505afa158015611ada573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b0291908101906152dc565b516001600160a01b03161415611b2a5760405162461bcd60e51b81526004016109ef906154f6565b30611b348261211d565b6001600160a01b031614611b725760405162461bcd60e51b81526020600482015260056024820152644b4431323160d81b60448201526064016109ef565b611b7b81613c88565b15611bb05760405162461bcd60e51b8152602060048201526005602482015264096886264760db1b60448201526064016109ef565b611bb981613db7565b611bc16135d2565b6001600160a01b0316634b455a51826040518263ffffffff1660e01b8152600401611bee91815260200190565b600060405180830381600087803b158015611c0857600080fd5b505af1158015611c1c573d6000803e3d6000fd5b50505050611c2861358d565b6001600160a01b031663465bcf05306000846040518463ffffffff1660e01b81526004016110609392919061505e565b6000611c63600a5490565b8210611cc65760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016109ef565b600a8281548110611cd957611cd9615515565b90600052602060002001549050919050565b6060600080611cf86135d2565b6001600160a01b031663d028bd66856040518263ffffffff1660e01b8152600401611d2391906148be565b60006040518083038186803b158015611d3b57600080fd5b505afa158015611d4f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d77919081019061554e565b905060005b8151811015611f4b57818181518110611d9757611d97615515565b6020026020010151600014611f39576000611db06135d2565b6001600160a01b031663b3a0ebc9848481518110611dd057611dd0615515565b60200260200101516040518263ffffffff1660e01b8152600401611df691815260200190565b60006040518083038186803b158015611e0e57600080fd5b505afa158015611e22573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e4a91908101906152dc565b9050428160a0015111158015611e645750428160c0015110155b15611f37576000611e73613583565b6001600160a01b031663bd365642858581518110611e9357611e93615515565b60200260200101516040518263ffffffff1660e01b8152600401611eb991815260200190565b60006040518083038186803b158015611ed157600080fd5b505afa158015611ee5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f0d91908101906155de565b905080848481518110611f2257611f22615515565b60200260200101519550955050505050915091565b505b80611f4381615612565b915050611d7c565b50600060405180602001604052806000815250909250925050915091565b33611f72613579565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401611f9d919061481f565b60206040518083038186803b158015611fb557600080fd5b505afa158015611fc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fed9190614ebd565b6001600160a01b0316146120135760405162461bcd60e51b81526004016109ef90614f15565b61201b613583565b6001600160a01b031663897615e6826040518263ffffffff1660e01b815260040161204891815260200190565b60206040518083038186803b15801561206057600080fd5b505afa158015612074573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120989190614ebd565b6001600160a01b03166120aa8261211d565b6001600160a01b0316146120e85760405162461bcd60e51b81526020600482015260056024820152644b4431333160d81b60448201526064016109ef565b6120f0613583565b6001600160a01b03166319b05f49826040518263ffffffff1660e01b815260040161106091815260200190565b6000818152600460205260408120546001600160a01b0316806108ef5760405162461bcd60e51b81526004016109ef906154f6565b600d546040516c4d65646961526567697374727960981b60208201526000916001600160a01b031690638eaa6ac090602d01610835565b60006001600160a01b0382166121f45760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016109ef565b506001600160a01b031660009081526005602052604090205490565b60008061221b6135d2565b6001600160a01b031663b3a0ebc9846040518263ffffffff1660e01b815260040161224891815260200190565b60006040518083038186803b15801561226057600080fd5b505afa158015612274573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261229c91908101906152dc565b905060008160e0015160048111156122b6576122b66153e3565b14156122c757610100015192915050565b60018160e0015160048111156122df576122df6153e3565b141561234957806060015181608001516122f99190615278565b60608201516123089042615278565b82610100015183610120015161231e9190615278565b612328919061562d565b6123329190615256565b8161012001516123429190615278565b9392505050565b60028160e001516004811115612361576123616153e3565b14156123ec5761236f6137d1565b6001600160a01b0316637a3c4c17846040518263ffffffff1660e01b815260040161239c91815260200190565b60206040518083038186803b1580156123b457600080fd5b505afa1580156123c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123429190615017565b60038160e001516004811115612404576124046153e3565b14156124125761236f613597565b60048160e00151600481111561242a5761242a6153e3565b14156124395750600092915050565b60405162461bcd60e51b81526020600482015260096024820152681b9bdd08195e1a5cdd60ba1b60448201526064016109ef565b33612476613579565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016124a1919061481f565b60206040518083038186803b1580156124b957600080fd5b505afa1580156124cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f19190614ebd565b6001600160a01b031614156125185760405162461bcd60e51b81526004016109ef90614fb8565b6002600c54141561253b5760405162461bcd60e51b81526004016109ef9061528f565b6002600c5573A5DD71afe7c4a1e123f3aF11624642F39A67e06A6368a8f9516125626135d2565b6001600160a01b031663b3a0ebc9856040518263ffffffff1660e01b815260040161258f91815260200190565b60006040518083038186803b1580156125a757600080fd5b505afa1580156125bb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125e391908101906152dc565b42346040518463ffffffff1660e01b81526004016126039392919061564c565b60006040518083038186803b15801561261b57600080fd5b505af415801561262f573d6000803e3d6000fd5b5050505034600e60008282546126459190615046565b9091555061265390506137bc565b6001600160a01b031663389ad90e838333346040518563ffffffff1660e01b81526004016126849493929190615671565b600060405180830381600087803b15801561269e57600080fd5b505af11580156126b2573d6000803e3d6000fd5b50506001600c5550505050565b600d546040516713d999995c909a5960c21b60208201526000916001600160a01b031690638eaa6ac090602801610835565b336126fa613579565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401612725919061481f565b60206040518083038186803b15801561273d57600080fd5b505afa158015612751573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127759190614ebd565b6001600160a01b03161461279b5760405162461bcd60e51b81526004016109ef90614f15565b60006127a56135d2565b6001600160a01b031663e6851b98308a8a8a8a8a8a8a6040518963ffffffff1660e01b81526004016127de9897969594939291906156a6565b602060405180830381600087803b1580156127f857600080fd5b505af115801561280c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128309190615017565b905061283d308289613989565b61284561358d565b6001600160a01b031663465bcf05600030846040518463ffffffff1660e01b81526004016128759392919061505e565b600060405180830381600087803b15801561288f57600080fd5b505af11580156128a3573d6000803e3d6000fd5b505050505050505050505050565b600d5460408051631abe729160e31b815290516000926001600160a01b03169163d5f39488916004808301926020929190829003018186803b15801561088157600080fd5b600d546040516b4d65646961466163746f727960a01b60208201526000916001600160a01b031690638eaa6ac090602c01610835565b33612935613579565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401612960919061481f565b60206040518083038186803b15801561297857600080fd5b505afa15801561298c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b09190614ebd565b6001600160a01b0316146129d65760405162461bcd60e51b81526004016109ef90614f15565b612a68816129e26137d1565b6001600160a01b031663cc889b0b846040518263ffffffff1660e01b8152600401612a0f91815260200190565b60606040518083038186803b158015612a2757600080fd5b505afa158015612a3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5f9190615082565b602001516137db565b50565b60606001805461090490614eda565b6001600160a01b038216331415612acf5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b60448201526064016109ef565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b612b453383613de8565b612b615760405162461bcd60e51b81526004016109ef90615714565b612b6d84848484613eaa565b50505050565b6040516303fb4aab60e41b8152600090739F397D94EC32D43EeC60dCF9A38a44322D54d42A90633fb4aab090612bb190879087908790600401615765565b60206040518083038186803b158015612bc957600080fd5b505af4158015612bdd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c019190615017565b949350505050565b6060612c14826134ee565b612c785760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016109ef565b600060028054612c8790614eda565b905011612d2a5760008281526003602052604090208054612ca790614eda565b80601f0160208091040260200160405190810160405280929190818152602001828054612cd390614eda565b8015612d205780601f10612cf557610100808354040283529160200191612d20565b820191906000526020600020905b815481529060010190602001808311612d0357829003601f168201915b50505050506108ef565b600260036000848152602001908152602001600020604051602001612d50929190615812565b60405160208183030381529060405292915050565b600d54604051651059141bdbdb60d21b60208201526000916001600160a01b031690638eaa6ac090602601610835565b33612d9f8361211d565b6001600160a01b031614612dc55760405162461bcd60e51b81526004016109ef90614f15565b612dcd613583565b6001600160a01b031663fb772f4b8383336040518463ffffffff1660e01b8152600401610d8593929190615827565b600d546001600160a01b031615612e3d5760405162461bcd60e51b8152602060048201526005602482015264041523030360dc1b60448201526064016109ef565b8451612e50906000906020880190614786565b5084604051602001612e629190615858565b60405160208183030381529060405260019080519060200190612e86929190614786565b508351612e9a906002906020870190614786565b50612ea782600085613989565b600d80546001600160a01b0319166001600160a01b03831617905561108e565b33612ed0613579565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401612efb919061481f565b60206040518083038186803b158015612f1357600080fd5b505afa158015612f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f4b9190614ebd565b6001600160a01b03161415612f725760405162461bcd60e51b81526004016109ef90614fb8565b73A5DD71afe7c4a1e123f3aF11624642F39A67e06A63bbd1abd7612f946135d2565b6001600160a01b031663b3a0ebc9846040518263ffffffff1660e01b8152600401612fc191815260200190565b60006040518083038186803b158015612fd957600080fd5b505afa158015612fed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261301591908101906152dc565b61301e84612210565b346040518463ffffffff1660e01b815260040161303d9392919061564c565b60006040518083038186803b15801561305557600080fd5b505af4158015613069573d6000803e3d6000fd5b505050506130756135d2565b6001600160a01b0316639c03facb826040518263ffffffff1660e01b81526004016130a291815260200190565b600060405180830381600087803b1580156130bc57600080fd5b505af11580156130d0573d6000803e3d6000fd5b505050506130de33826137c6565b6130ec6116fc600a34615256565b6130f461358d565b604051635dd995b560e01b8152600481018390523460248201523360448201524260648201526001600160a01b039190911690635dd995b590608401600060405180830381600087803b15801561314a57600080fd5b505af115801561315e573d6000803e3d6000fd5b5050505061316a61358d565b6001600160a01b031663465bcf053033846040518463ffffffff1660e01b81526004016110609392919061505e565b336131a2613579565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016131cd919061481f565b60206040518083038186803b1580156131e557600080fd5b505afa1580156131f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061321d9190614ebd565b6001600160a01b031614156132445760405162461bcd60e51b81526004016109ef90614fb8565b73A5DD71afe7c4a1e123f3aF11624642F39A67e06A63c4bbd6766132666135d2565b6001600160a01b031663b3a0ebc9846040518263ffffffff1660e01b815260040161329391815260200190565b60006040518083038186803b1580156132ab57600080fd5b505afa1580156132bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526132e791908101906152dc565b346040518363ffffffff1660e01b815260040161303d929190615888565b600d546040516d50726f706f73616c52657669657760901b60208201526000916001600160a01b031690638eaa6ac090602e01610835565b6000600e54476108b99190615278565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b33613384613579565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016133af919061481f565b60206040518083038186803b1580156133c757600080fd5b505afa1580156133db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133ff9190614ebd565b6001600160a01b031614156134265760405162461bcd60e51b81526004016109ef90614fb8565b600061343182613edd565b905061343b613597565b6040516315f5a0b160e21b8152600481018490523360248201526001600160a01b0391909116906357d682c490604401600060405180830381600087803b15801561348557600080fd5b505af1158015613499573d6000803e3d6000fd5b5050505080600e60008282546134af9190615278565b90915550505050565b600d546040516b22bb32b73a22b6b4ba3a32b960a11b60208201526000916001600160a01b031690638eaa6ac090602c01610835565b6000908152600460205260409020546001600160a01b0316151590565b600081815260066020526040902080546001600160a01b0319166001600160a01b03841690811790915581906135408261211d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006108b9612152565b60006108b9613305565b60006108b96134b8565b60006108b96126bf565b6135ab3382613de8565b6135c75760405162461bcd60e51b81526004016109ef90615714565b610b208383836140d7565b60006108b9612d65565b60006135e66137bc565b6001600160a01b031663761ce95d846040518263ffffffff1660e01b815260040161361391815260200190565b60006040518083038186803b15801561362b57600080fd5b505afa15801561363f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613667919081019061589b565b905060005b8151811015612b6d57600082828151811061368957613689615515565b602002602001015190508060400151600e60008282546136a99190615278565b9091555050818414156136cf576136ca600a82604001516116fc9190615256565b6137a9565b600081602001516001600160a01b0316826040015161271090604051600060405180830381858888f193505050503d8060008114613729576040519150601f19603f3d011682016040523d82523d6000602084013e61372e565b606091505b50509050806137a75761373f61358d565b6001600160a01b031663ec720b9b836020015184604001516040518363ffffffff1660e01b81526004016137749291906150e3565b600060405180830381600087803b15801561378e57600080fd5b505af11580156137a2573d6000803e3d6000fd5b505050505b505b50806137b481615612565b91505061366c565b60006108b9610f10565b6113823083836140d7565b60006108b9610801565b6000806137e66137d1565b6001600160a01b03166337df00c9856040518263ffffffff1660e01b815260040161381391815260200190565b6040805180830381600087803b15801561382c57600080fd5b505af1158015613840573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061386491906159a9565b915091506138706135d2565b6001600160a01b0316639c03facb856040518263ffffffff1660e01b815260040161389d91815260200190565b600060405180830381600087803b1580156138b757600080fd5b505af11580156138cb573d6000803e3d6000fd5b5050505080600e60008282546138e19190615278565b909155506138f1905082856137c6565b6138ff6116fc600a83615256565b61390761358d565b6001600160a01b031663465bcf053085876040518463ffffffff1660e01b81526004016139369392919061505e565b600060405180830381600087803b15801561395057600080fd5b505af1158015613964573d6000803e3d6000fd5b5050505050505050565b610b2083838360405180602001604052806000815250612b3b565b6139938383614270565b60008281526003602090815260409091208251612b6d92840190614786565b60006139bc611508565b90506000816001600160a01b03168361271090604051600060405180830381858888f193505050503d8060008114613a10576040519150601f19603f3d011682016040523d82523d6000602084013e613a15565b606091505b5050905080610b2057613a2661358d565b6001600160a01b031663ec720b9b83856040518363ffffffff1660e01b8152600401610c069291906150e3565b600080613a5e6135d2565b6001600160a01b031663b3a0ebc9846040518263ffffffff1660e01b8152600401613a8b91815260200190565b60006040518083038186803b158015613aa357600080fd5b505afa158015613ab7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613adf91908101906152dc565b90506000613aeb6137d1565b6001600160a01b031663cc889b0b856040518263ffffffff1660e01b8152600401613b1891815260200190565b60606040518083038186803b158015613b3057600080fd5b505afa158015613b44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b689190615082565b905060028260e001516004811115613b8257613b826153e3565b148015613b9b575060208101516001600160a01b031615155b15613c8157600081602001516001600160a01b0316826040015161271090604051600060405180830381858888f193505050503d8060008114613bfa576040519150601f19603f3d011682016040523d82523d6000602084013e613bff565b606091505b505090508160400151935080613c7f57613c1761358d565b6001600160a01b031663ec720b9b836020015184604001516040518363ffffffff1660e01b8152600401613c4c9291906150e3565b600060405180830381600087803b158015613c6657600080fd5b505af1158015613c7a573d6000803e3d6000fd5b505050505b505b5050919050565b600080613c936137d1565b6001600160a01b031663cc889b0b846040518263ffffffff1660e01b8152600401613cc091815260200190565b60606040518083038186803b158015613cd857600080fd5b505afa158015613cec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d109190615082565b602001516001600160a01b03161415806108ef5750613d2d6137bc565b6001600160a01b031663761ce95d836040518263ffffffff1660e01b8152600401613d5a91815260200190565b60006040518083038186803b158015613d7257600080fd5b505afa158015613d86573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613dae919081019061589b565b51151592915050565b613dc08161439c565b6040805160208082018084526000808452858152600390925292902090516113829290614786565b6000613df3826134ee565b613e545760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016109ef565b6000613e5f8361211d565b9050806001600160a01b0316846001600160a01b03161480613e9a5750836001600160a01b0316613e8f84610987565b6001600160a01b0316145b80612c015750612c01818561334d565b613eb58484846140d7565b613ec184848484614431565b612b6d5760405162461bcd60e51b81526004016109ef906159d7565b600080613ee86135d2565b6001600160a01b031663b3a0ebc9846040518263ffffffff1660e01b8152600401613f1591815260200190565b60006040518083038186803b158015613f2d57600080fd5b505afa158015613f41573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613f6991908101906152dc565b90506000613f75613597565b6001600160a01b03166301b99e04856040518263ffffffff1660e01b8152600401613fa291815260200190565b60006040518083038186803b158015613fba57600080fd5b505afa158015613fce573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613ff69190810190615141565b905060038260e001516004811115614010576140106153e3565b148015614029575060608101516001600160a01b031615155b15613c8157606081015160808201516040516000926001600160a01b0316916127109184818181858888f193505050503d8060008114614085576040519150601f19603f3d011682016040523d82523d6000602084013e61408a565b606091505b505090508160800151935080613c7f576140a261358d565b6001600160a01b031663ec720b9b836060015184608001516040518363ffffffff1660e01b8152600401613c4c9291906150e3565b826001600160a01b03166140ea8261211d565b6001600160a01b0316146141525760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016109ef565b6001600160a01b0382166141b45760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016109ef565b6141bf83838361453e565b6141ca60008261350b565b6001600160a01b03831660009081526005602052604081208054600192906141f3908490615278565b90915550506001600160a01b0382166000908152600560205260408120805460019290614221908490615046565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b038681169182179092559151849391871691600080516020615a9a83398151915291a4505050565b6001600160a01b0382166142c65760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016109ef565b6142cf816134ee565b1561431b5760405162461bcd60e51b815260206004820152601c60248201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b60448201526064016109ef565b6143276000838361453e565b6001600160a01b0382166000908152600560205260408120805460019290614350908490615046565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839290600080516020615a9a833981519152908290a45050565b60006143a78261211d565b90506143b58160008461453e565b6143c060008361350b565b6001600160a01b03811660009081526005602052604081208054600192906143e9908490615278565b909155505060008281526004602052604080822080546001600160a01b0319169055518391906001600160a01b03841690600080516020615a9a833981519152908390a45050565b60006001600160a01b0384163b1561453357604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290614475903390899088908890600401615a29565b602060405180830381600087803b15801561448f57600080fd5b505af19250505080156144bf575060408051601f3d908101601f191682019092526144bc91810190615a66565b60015b614519573d8080156144ed576040519150601f19603f3d011682016040523d82523d6000602084013e6144f2565b606091505b5080516145115760405162461bcd60e51b81526004016109ef906159d7565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612c01565b506001949350505050565b6001600160a01b0383166145995761459481600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b6145bc565b816001600160a01b0316836001600160a01b0316146145bc576145bc83826145f6565b6001600160a01b0382166145d357610b2081614693565b826001600160a01b0316826001600160a01b031614610b2057610b208282614742565b6000600161460384612189565b61460d9190615278565b600083815260096020526040902054909150808214614660576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a546000906146a590600190615278565b6000838152600b6020526040812054600a80549394509092849081106146cd576146cd615515565b9060005260206000200154905080600a83815481106146ee576146ee615515565b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a80548061472657614726615a83565b6001900381819060005260206000200160009055905550505050565b600061474d83612189565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b82805461479290614eda565b90600052602060002090601f0160209004810192826147b457600085556147fa565b82601f106147cd57805160ff19168380011785556147fa565b828001600101855582156147fa579182015b828111156147fa5782518255916020019190600101906147df565b5061480692915061480a565b5090565b5b80821115614806576000815560010161480b565b6001600160a01b0391909116815260200190565b6001600160e01b031981168114612a6857600080fd5b60006020828403121561485b57600080fd5b813561234281614833565b60005b83811015614881578181015183820152602001614869565b83811115612b6d5750506000910152565b600081518084526148aa816020860160208601614866565b601f01601f19169290920160200192915050565b6020815260006123426020830184614892565b6000602082840312156148e357600080fd5b5035919050565b6001600160a01b0381168114612a6857600080fd5b6000806040838503121561491257600080fd5b823561491d816148ea565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b03811182821017156149635761496361492b565b60405290565b60405161016081016001600160401b03811182821017156149635761496361492b565b604051608081016001600160401b03811182821017156149635761496361492b565b604051601f8201601f191681016001600160401b03811182821017156149d6576149d661492b565b604052919050565b60006001600160401b038211156149f7576149f761492b565b50601f01601f191660200190565b6000614a18614a13846149de565b6149ae565b9050828152838383011115614a2c57600080fd5b828260208301376000602084830101529392505050565b600082601f830112614a5457600080fd5b61234283833560208501614a05565b8015158114612a6857600080fd5b600080600060608486031215614a8657600080fd5b8335925060208401356001600160401b03811115614aa357600080fd5b614aaf86828701614a43565b9250506040840135614ac081614a63565b809150509250925092565b60008060408385031215614ade57600080fd5b8235614ae9816148ea565b915060208301356001600160401b03811115614b0457600080fd5b614b1085828601614a43565b9150509250929050565b600080600060608486031215614b2f57600080fd5b83356001600160401b03811115614b4557600080fd5b614b5186828701614a43565b9660208601359650604090950135949350505050565b600080600060608486031215614b7c57600080fd5b8335614b87816148ea565b92506020840135614b97816148ea565b929592945050506040919091013590565b600060208284031215614bba57600080fd5b81356001600160401b03811115614bd057600080fd5b612c0184828501614a43565b60008060408385031215614bef57600080fd5b50508035926020909101359150565b60008060408385031215614c1157600080fd5b8235915060208301356001600160401b03811115614b0457600080fd5b604081526000614c416040830185614892565b90508260208301529392505050565b600060208284031215614c6257600080fd5b8135612342816148ea565b60058110612a6857600080fd5b600080600080600080600060e0888a031215614c9557600080fd5b87356001600160401b0380821115614cac57600080fd5b614cb88b838c01614a43565b985060208a0135915080821115614cce57600080fd5b50614cdb8a828b01614a43565b96505060408801359450606088013593506080880135925060a0880135614d0181614c6d565b8092505060c0880135905092959891949750929550565b60008060408385031215614d2b57600080fd5b8235614d36816148ea565b91506020830135614d4681614a63565b809150509250929050565b60008060008060808587031215614d6757600080fd5b8435614d72816148ea565b93506020850135614d82816148ea565b92506040850135915060608501356001600160401b03811115614da457600080fd5b8501601f81018713614db557600080fd5b614dc487823560208401614a05565b91505092959194509250565b600080600080600060a08688031215614de857600080fd5b85356001600160401b0380821115614dff57600080fd5b614e0b89838a01614a43565b96506020880135915080821115614e2157600080fd5b614e2d89838a01614a43565b95506040880135915080821115614e4357600080fd5b50614e5088828901614a43565b9350506060860135614e61816148ea565b91506080860135614e71816148ea565b809150509295509295909350565b60008060408385031215614e9257600080fd5b8235614e9d816148ea565b91506020830135614d46816148ea565b8051614eb8816148ea565b919050565b600060208284031215614ecf57600080fd5b8151612342816148ea565b600181811c90821680614eee57607f821691505b60208210811415614f0f57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526005908201526425a218189960d91b604082015260600190565b838152606060208201526000614f4d6060830185614892565b90508215156040830152949350505050565b6001600160a01b0383168152604060208201819052600090612c0190830184614892565b6001600160a01b03848116825283166020820152606060408201819052600090614faf90830184614892565b95945050505050565b60208082526005908201526412d10c0c4d60da1b604082015260600190565b60a081526000614fea60a0830188614892565b60208301969096525060408101939093526001600160a01b03919091166060830152608090910152919050565b60006020828403121561502957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561505957615059615030565b500190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006060828403121561509457600080fd5b604051606081016001600160401b03811182821017156150b6576150b661492b565b6040528251815260208301516150cb816148ea565b60208201526040928301519281019290925250919050565b6001600160a01b03929092168252602082015260400190565b600082601f83011261510d57600080fd5b815161511b614a13826149de565b81815284602083860101111561513057600080fd5b612c01826020830160208701614866565b60006020828403121561515357600080fd5b81516001600160401b038082111561516a57600080fd5b9083019060a0828603121561517e57600080fd5b615186614941565b82518281111561519557600080fd5b6151a1878286016150fc565b8252506020830151602082015260408301516040820152606083015191506151c8826148ea565b8160608201526080830151608082015280935050505092915050565b8381526060602082015260006151fd6060830185614892565b8281036040840152835160a0825261521860a0830182614892565b60208681015190840152604080870151908401526060808701516001600160a01b031690840152608095860151959092019490945295945050505050565b60008261527357634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561528a5761528a615030565b500390565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b8051614eb881614c6d565b8051614eb881614a63565b6000602082840312156152ee57600080fd5b81516001600160401b038082111561530557600080fd5b90830190610160828603121561531a57600080fd5b615322614969565b61532b83614ead565b815260208301518281111561533f57600080fd5b61534b878286016150fc565b60208301525060408301518281111561536357600080fd5b61536f878286016150fc565b604083015250606083015160608201526080830151608082015260a083015160a082015260c083015160c08201526153a960e084016152c6565b60e08201526101008381015190820152610120808401519082015261014091506153d48284016152d1565b91810191909152949350505050565b634e487b7160e01b600052602160045260246000fd5b6005811061541757634e487b7160e01b600052602160045260246000fd5b9052565b80516001600160a01b031682526000610160602083015181602086015261544482860182614892565b9150506040830151848203604086015261545e8282614892565b915050606083015160608501526080830151608085015260a083015160a085015260c083015160c085015260e083015161549b60e08601826153f9565b506101008381015190850152610120808401519085015261014092830151151592909301919091525090565b6080815260006154da608083018761541b565b6020830195909552506040810192909252606090910152919050565b60208082526005908201526412d10c4c4d60da1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006001600160401b038211156155445761554461492b565b5060051b60200190565b6000602080838503121561556157600080fd5b82516001600160401b0381111561557757600080fd5b8301601f8101851361558857600080fd5b8051615596614a138261552b565b81815260059190911b820183019083810190878311156155b557600080fd5b928401925b828410156155d3578351825292840192908401906155ba565b979650505050505050565b6000602082840312156155f057600080fd5b81516001600160401b0381111561560657600080fd5b612c01848285016150fc565b600060001982141561562657615626615030565b5060010190565b600081600019048311821515161561564757615647615030565b500290565b60608152600061565f606083018661541b565b60208301949094525060400152919050565b84815260806020820152600061568a6080830186614892565b6001600160a01b03949094166040830152506060015292915050565b6001600160a01b0389168152610100602082018190526000906156cb8382018b614892565b905082810360408401526156df818a614892565b9150508660608301528560808301528460a083015261570160c08301856153f9565b8260e08301529998505050505050505050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60608152600061565f6060830186614892565b8054600090600181811c908083168061579257607f831692505b60208084108214156157b457634e487b7160e01b600052602260045260246000fd5b8180156157c857600181146157d957615806565b60ff19861689528489019650615806565b60008881526020902060005b868110156157fe5781548b8201529085019083016157e5565b505084890196505b50505050505092915050565b6000612c016158218386615778565b84615778565b8381526060602082015260006158406060830185614892565b905060018060a01b0383166040830152949350505050565b674b616c6569646f5f60c01b81526000825161587b816008850160208701614866565b9190910160080192915050565b604081526000614c41604083018561541b565b600060208083850312156158ae57600080fd5b82516001600160401b03808211156158c557600080fd5b818501915085601f8301126158d957600080fd5b81516158e7614a138261552b565b81815260059190911b8301840190848101908883111561590657600080fd5b8585015b8381101561599c578051858111156159225760008081fd5b86016080818c03601f190181131561593a5760008081fd5b61594261498c565b898301518152604080840151615957816148ea565b828c01526060848101518284015292840151928984111561597a57600091508182fd5b6159888f8d868801016150fc565b90830152508552505091860191860161590a565b5098975050505050505050565b600080604083850312156159bc57600080fd5b82516159c7816148ea565b6020939093015192949293505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090615a5c90830184614892565b9695505050505050565b600060208284031215615a7857600080fd5b815161234281614833565b634e487b7160e01b600052603160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220aa15a61ac09115658b129487e19c9ed6e377c1c491c3658bf64d911ba0235c2264736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106102445760003560e01c80630106d8eb1461024957806301ffc9a71461027457806306fdde03146102a4578063081812fc146102c6578063095ea7b3146102e657806313c1f27814610308578063179bcff71461032857806318160ddd146103485780631daf7ff9146103675780632231c1eb1461037a57806323b872dd1461038f57806327b7a2f5146103af5780632bc4bc68146103cd5780632f745c59146103ed57806332b18f6d1461040d57806337df00c91461042d5780633ccfd60b1461044d57806342842e0e14610462578063430bf08a14610482578063444115f614610497578063454a2ab3146104b75780634b455a51146104ca5780634f6ccce7146104ea57806353c147761461050a57806360c5cc3a146105385780636352211e146105585780636a58767e1461057857806370a082311461058d5780637a3c4c17146105ad5780637ccacd49146105cd5780637cf175fb146105e0578063899c9989146105f55780638da5cb5b146106155780638f6059d61461062a57806393525d391461063f57806395d89b411461065f578063a22cb46514610674578063b69ef8a814610694578063b88d4fde146106a7578063c531c236146106c7578063c87b56dd146106e7578063c9cd71b514610707578063d4f6b5ec1461071c578063d6d0faee1461073c578063d86800691461075c578063d96a094a1461076f578063e2f5fc7814610782578063e6e268f414610797578063e985e9c5146107ac578063ef706adf146107cc578063f0726291146107ec575b600080fd5b34801561025557600080fd5b5061025e610801565b60405161026b919061481f565b60405180910390f35b34801561028057600080fd5b5061029461028f366004614849565b6108be565b604051901515815260200161026b565b3480156102b057600080fd5b506102b96108f5565b60405161026b91906148be565b3480156102d257600080fd5b5061025e6102e13660046148d1565b610987565b3480156102f257600080fd5b506103066103013660046148ff565b610a14565b005b34801561031457600080fd5b50610306610323366004614a71565b610b25565b34801561033457600080fd5b50610306610343366004614acb565b610c3d565b34801561035457600080fd5b50600a545b60405190815260200161026b565b610306610375366004614b1a565b610dbb565b34801561038657600080fd5b5061025e610f10565b34801561039b57600080fd5b506103066103aa366004614b67565b610f41565b3480156103bb57600080fd5b50600d546001600160a01b031661025e565b3480156103d957600080fd5b506103066103e8366004614ba8565b610f83565b3480156103f957600080fd5b506103596104083660046148ff565b611095565b34801561041957600080fd5b50610306610428366004614bdc565b61112b565b34801561043957600080fd5b506103066104483660046148d1565b6112af565b34801561045957600080fd5b50610306611386565b34801561046e57600080fd5b5061030661047d366004614b67565b6114fd565b34801561048e57600080fd5b5061025e611508565b3480156104a357600080fd5b506103066104b2366004614bfe565b611537565b6103066104c53660046148d1565b611755565b3480156104d657600080fd5b506103066104e53660046148d1565b6119cd565b3480156104f657600080fd5b506103596105053660046148d1565b611c58565b34801561051657600080fd5b5061052a610525366004614ba8565b611ceb565b60405161026b929190614c2e565b34801561054457600080fd5b506103066105533660046148d1565b611f69565b34801561056457600080fd5b5061025e6105733660046148d1565b61211d565b34801561058457600080fd5b5061025e612152565b34801561059957600080fd5b506103596105a8366004614c50565b612189565b3480156105b957600080fd5b506103596105c83660046148d1565b612210565b6103066105db366004614bfe565b61246d565b3480156105ec57600080fd5b5061025e6126bf565b34801561060157600080fd5b50610306610610366004614c7a565b6126f1565b34801561062157600080fd5b5061025e6128b1565b34801561063657600080fd5b5061025e6128f6565b34801561064b57600080fd5b5061030661065a3660046148d1565b61292c565b34801561066b57600080fd5b506102b9612a6b565b34801561068057600080fd5b5061030661068f366004614d18565b612a7a565b3480156106a057600080fd5b5047610359565b3480156106b357600080fd5b506103066106c2366004614d51565b612b3b565b3480156106d357600080fd5b506103596106e2366004614b1a565b612b73565b3480156106f357600080fd5b506102b96107023660046148d1565b612c09565b34801561071357600080fd5b5061025e612d65565b34801561072857600080fd5b50610306610737366004614bfe565b612d95565b34801561074857600080fd5b50610306610757366004614dd0565b612dfc565b61030661076a3660046148d1565b612ec7565b61030661077d3660046148d1565b613199565b34801561078e57600080fd5b5061025e613305565b3480156107a357600080fd5b5061035961333d565b3480156107b857600080fd5b506102946107c7366004614e7f565b61334d565b3480156107d857600080fd5b506103066107e73660046148d1565b61337b565b3480156107f857600080fd5b5061025e6134b8565b600d546040516d22b733b634b9b420bab1ba34b7b760911b60208201526000916001600160a01b031690638eaa6ac090602e015b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161086991815260200190565b60206040518083038186803b15801561088157600080fd5b505afa158015610895573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b99190614ebd565b905090565b60006001600160e01b031982166380ac58cd60e01b14806108ef57506001600160e01b03198216635b5e139f60e01b145b92915050565b60606000805461090490614eda565b80601f016020809104026020016040519081016040528092919081815260200182805461093090614eda565b801561097d5780601f106109525761010080835404028352916020019161097d565b820191906000526020600020905b81548152906001019060200180831161096057829003601f168201915b5050505050905090565b6000610992826134ee565b6109f85760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600660205260409020546001600160a01b031690565b6000610a1f8261211d565b9050806001600160a01b0316836001600160a01b03161415610a8d5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016109ef565b336001600160a01b0382161480610aa95750610aa9813361334d565b610b165760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b60648201526084016109ef565b610b20838361350b565b505050565b33610b2e613579565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401610b59919061481f565b60206040518083038186803b158015610b7157600080fd5b505afa158015610b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba99190614ebd565b6001600160a01b031614610bcf5760405162461bcd60e51b81526004016109ef90614f15565b610bd7613583565b6001600160a01b03166313c1f2788484846040518463ffffffff1660e01b8152600401610c0693929190614f34565b600060405180830381600087803b158015610c2057600080fd5b505af1158015610c34573d6000803e3d6000fd5b50505050505050565b33610c46613579565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401610c71919061481f565b60206040518083038186803b158015610c8957600080fd5b505afa158015610c9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc19190614ebd565b6001600160a01b031614610ce75760405162461bcd60e51b81526004016109ef90614f15565b610cef613579565b6001600160a01b031663179bcff783836040518363ffffffff1660e01b8152600401610d1c929190614f5f565b600060405180830381600087803b158015610d3657600080fd5b505af1158015610d4a573d6000803e3d6000fd5b50505050610d5661358d565b6001600160a01b031663262360133084846040518463ffffffff1660e01b8152600401610d8593929190614f83565b600060405180830381600087803b158015610d9f57600080fd5b505af1158015610db3573d6000803e3d6000fd5b505050505050565b33610dc4613579565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401610def919061481f565b60206040518083038186803b158015610e0757600080fd5b505afa158015610e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3f9190614ebd565b6001600160a01b03161415610e665760405162461bcd60e51b81526004016109ef90614fb8565b610e6e613597565b6001600160a01b031663171a133d84848433346040518663ffffffff1660e01b8152600401610ea1959493929190614fd7565b602060405180830381600087803b158015610ebb57600080fd5b505af1158015610ecf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef39190615017565b5034600e6000828254610f069190615046565b9091555050505050565b600d546040516613dc195b909a5960ca1b60208201526000916001600160a01b031690638eaa6ac090602701610835565b610f4c8383836135a1565b610f5461358d565b6001600160a01b031663465bcf058484846040518463ffffffff1660e01b8152600401610c069392919061505e565b33610f8c613579565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401610fb7919061481f565b60206040518083038186803b158015610fcf57600080fd5b505afa158015610fe3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110079190614ebd565b6001600160a01b03161461102d5760405162461bcd60e51b81526004016109ef90614f15565b6110356135d2565b6001600160a01b031663b8926f2c826040518263ffffffff1660e01b815260040161106091906148be565b600060405180830381600087803b15801561107a57600080fd5b505af115801561108e573d6000803e3d6000fd5b5050505050565b60006110a083612189565b82106111025760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016109ef565b506001600160a01b03919091166000908152600860209081526040808320938352929052205490565b33611134613579565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b815260040161115f919061481f565b60206040518083038186803b15801561117757600080fd5b505afa15801561118b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111af9190614ebd565b6001600160a01b0316146111d55760405162461bcd60e51b81526004016109ef90614f15565b6111df82826135dc565b60006111e96137bc565b6040516332b18f6d60e01b815260048101859052602481018490526001600160a01b0391909116906332b18f6d90604401602060405180830381600087803b15801561123457600080fd5b505af1158015611248573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126c9190614ebd565b905061127881846137c6565b61128061358d565b6001600160a01b031663465bcf053083866040518463ffffffff1660e01b8152600401610c069392919061505e565b80336112b96137d1565b6001600160a01b031663cc889b0b836040518263ffffffff1660e01b81526004016112e691815260200190565b60606040518083038186803b1580156112fe57600080fd5b505afa158015611312573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113369190615082565b602001516001600160a01b0316146113785760405162461bcd60e51b815260206004820152600560248201526425a218991b60d91b60448201526064016109ef565b61138282336137db565b5050565b3361138f613579565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016113ba919061481f565b60206040518083038186803b1580156113d257600080fd5b505afa1580156113e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140a9190614ebd565b6001600160a01b0316146114305760405162461bcd60e51b81526004016109ef90614f15565b600061143a61333d565b604051909150600090339061271090849084818181858888f193505050503d8060008114611484576040519150601f19603f3d011682016040523d82523d6000602084013e611489565b606091505b5050905080156114c85761149b61358d565b6001600160a01b031663279862cb836040518263ffffffff1660e01b8152600401610d8591815260200190565b6114d061358d565b6001600160a01b031663ec720b9b33846040518363ffffffff1660e01b8152600401610d859291906150e3565b610f4c83838361396e565b600d546040516415985d5b1d60da1b60208201526000916001600160a01b031690638eaa6ac090602501610835565b33611540613579565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b815260040161156b919061481f565b60206040518083038186803b15801561158357600080fd5b505afa158015611597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bb9190614ebd565b6001600160a01b0316146115e15760405162461bcd60e51b81526004016109ef90614f15565b60006115eb613597565b6001600160a01b03166319b05f49846040518263ffffffff1660e01b815260040161161891815260200190565b600060405180830381600087803b15801561163257600080fd5b505af1158015611646573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261166e9190810190615141565b90506116786135d2565b6001600160a01b031663a9ad60f38484846040518463ffffffff1660e01b81526004016116a7939291906151e4565b600060405180830381600087803b1580156116c157600080fd5b505af11580156116d5573d6000803e3d6000fd5b505050506116e881606001518484613989565b611701600a82608001516116fc9190615256565b6139b2565b8060800151600e60008282546117179190615278565b90915550611725905061358d565b6001600160a01b031663465bcf05600030866040518463ffffffff1660e01b8152600401610c069392919061505e565b3361175e613579565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401611789919061481f565b60206040518083038186803b1580156117a157600080fd5b505afa1580156117b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d99190614ebd565b6001600160a01b031614156118005760405162461bcd60e51b81526004016109ef90614fb8565b6002600c5414156118235760405162461bcd60e51b81526004016109ef9061528f565b6002600c5573__$d7d41b463f0c25cd0b86b1d270805192c7$__639e1b393661184a6135d2565b6001600160a01b031663b3a0ebc9846040518263ffffffff1660e01b815260040161187791815260200190565b60006040518083038186803b15801561188f57600080fd5b505afa1580156118a3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118cb91908101906152dc565b6118d484612210565b42346040518563ffffffff1660e01b81526004016118f594939291906154c7565b60006040518083038186803b15801561190d57600080fd5b505af4158015611921573d6000803e3d6000fd5b50505050600061193082613a53565b905061193a6137d1565b60405163c0f4ed3160e01b8152600481018490523360248201523460448201526001600160a01b03919091169063c0f4ed3190606401600060405180830381600087803b15801561198a57600080fd5b505af115801561199e573d6000803e3d6000fd5b5050505080346119ae9190615278565b600e60008282546119bf9190615046565b90915550506001600c555050565b336119d6613579565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401611a01919061481f565b60206040518083038186803b158015611a1957600080fd5b505afa158015611a2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a519190614ebd565b6001600160a01b031614611a775760405162461bcd60e51b81526004016109ef90614f15565b6000611a816135d2565b6001600160a01b031663b3a0ebc9836040518263ffffffff1660e01b8152600401611aae91815260200190565b60006040518083038186803b158015611ac657600080fd5b505afa158015611ada573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b0291908101906152dc565b516001600160a01b03161415611b2a5760405162461bcd60e51b81526004016109ef906154f6565b30611b348261211d565b6001600160a01b031614611b725760405162461bcd60e51b81526020600482015260056024820152644b4431323160d81b60448201526064016109ef565b611b7b81613c88565b15611bb05760405162461bcd60e51b8152602060048201526005602482015264096886264760db1b60448201526064016109ef565b611bb981613db7565b611bc16135d2565b6001600160a01b0316634b455a51826040518263ffffffff1660e01b8152600401611bee91815260200190565b600060405180830381600087803b158015611c0857600080fd5b505af1158015611c1c573d6000803e3d6000fd5b50505050611c2861358d565b6001600160a01b031663465bcf05306000846040518463ffffffff1660e01b81526004016110609392919061505e565b6000611c63600a5490565b8210611cc65760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016109ef565b600a8281548110611cd957611cd9615515565b90600052602060002001549050919050565b6060600080611cf86135d2565b6001600160a01b031663d028bd66856040518263ffffffff1660e01b8152600401611d2391906148be565b60006040518083038186803b158015611d3b57600080fd5b505afa158015611d4f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d77919081019061554e565b905060005b8151811015611f4b57818181518110611d9757611d97615515565b6020026020010151600014611f39576000611db06135d2565b6001600160a01b031663b3a0ebc9848481518110611dd057611dd0615515565b60200260200101516040518263ffffffff1660e01b8152600401611df691815260200190565b60006040518083038186803b158015611e0e57600080fd5b505afa158015611e22573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e4a91908101906152dc565b9050428160a0015111158015611e645750428160c0015110155b15611f37576000611e73613583565b6001600160a01b031663bd365642858581518110611e9357611e93615515565b60200260200101516040518263ffffffff1660e01b8152600401611eb991815260200190565b60006040518083038186803b158015611ed157600080fd5b505afa158015611ee5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f0d91908101906155de565b905080848481518110611f2257611f22615515565b60200260200101519550955050505050915091565b505b80611f4381615612565b915050611d7c565b50600060405180602001604052806000815250909250925050915091565b33611f72613579565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401611f9d919061481f565b60206040518083038186803b158015611fb557600080fd5b505afa158015611fc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fed9190614ebd565b6001600160a01b0316146120135760405162461bcd60e51b81526004016109ef90614f15565b61201b613583565b6001600160a01b031663897615e6826040518263ffffffff1660e01b815260040161204891815260200190565b60206040518083038186803b15801561206057600080fd5b505afa158015612074573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120989190614ebd565b6001600160a01b03166120aa8261211d565b6001600160a01b0316146120e85760405162461bcd60e51b81526020600482015260056024820152644b4431333160d81b60448201526064016109ef565b6120f0613583565b6001600160a01b03166319b05f49826040518263ffffffff1660e01b815260040161106091815260200190565b6000818152600460205260408120546001600160a01b0316806108ef5760405162461bcd60e51b81526004016109ef906154f6565b600d546040516c4d65646961526567697374727960981b60208201526000916001600160a01b031690638eaa6ac090602d01610835565b60006001600160a01b0382166121f45760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016109ef565b506001600160a01b031660009081526005602052604090205490565b60008061221b6135d2565b6001600160a01b031663b3a0ebc9846040518263ffffffff1660e01b815260040161224891815260200190565b60006040518083038186803b15801561226057600080fd5b505afa158015612274573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261229c91908101906152dc565b905060008160e0015160048111156122b6576122b66153e3565b14156122c757610100015192915050565b60018160e0015160048111156122df576122df6153e3565b141561234957806060015181608001516122f99190615278565b60608201516123089042615278565b82610100015183610120015161231e9190615278565b612328919061562d565b6123329190615256565b8161012001516123429190615278565b9392505050565b60028160e001516004811115612361576123616153e3565b14156123ec5761236f6137d1565b6001600160a01b0316637a3c4c17846040518263ffffffff1660e01b815260040161239c91815260200190565b60206040518083038186803b1580156123b457600080fd5b505afa1580156123c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123429190615017565b60038160e001516004811115612404576124046153e3565b14156124125761236f613597565b60048160e00151600481111561242a5761242a6153e3565b14156124395750600092915050565b60405162461bcd60e51b81526020600482015260096024820152681b9bdd08195e1a5cdd60ba1b60448201526064016109ef565b33612476613579565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016124a1919061481f565b60206040518083038186803b1580156124b957600080fd5b505afa1580156124cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f19190614ebd565b6001600160a01b031614156125185760405162461bcd60e51b81526004016109ef90614fb8565b6002600c54141561253b5760405162461bcd60e51b81526004016109ef9061528f565b6002600c5573__$d7d41b463f0c25cd0b86b1d270805192c7$__6368a8f9516125626135d2565b6001600160a01b031663b3a0ebc9856040518263ffffffff1660e01b815260040161258f91815260200190565b60006040518083038186803b1580156125a757600080fd5b505afa1580156125bb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125e391908101906152dc565b42346040518463ffffffff1660e01b81526004016126039392919061564c565b60006040518083038186803b15801561261b57600080fd5b505af415801561262f573d6000803e3d6000fd5b5050505034600e60008282546126459190615046565b9091555061265390506137bc565b6001600160a01b031663389ad90e838333346040518563ffffffff1660e01b81526004016126849493929190615671565b600060405180830381600087803b15801561269e57600080fd5b505af11580156126b2573d6000803e3d6000fd5b50506001600c5550505050565b600d546040516713d999995c909a5960c21b60208201526000916001600160a01b031690638eaa6ac090602801610835565b336126fa613579565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401612725919061481f565b60206040518083038186803b15801561273d57600080fd5b505afa158015612751573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127759190614ebd565b6001600160a01b03161461279b5760405162461bcd60e51b81526004016109ef90614f15565b60006127a56135d2565b6001600160a01b031663e6851b98308a8a8a8a8a8a8a6040518963ffffffff1660e01b81526004016127de9897969594939291906156a6565b602060405180830381600087803b1580156127f857600080fd5b505af115801561280c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128309190615017565b905061283d308289613989565b61284561358d565b6001600160a01b031663465bcf05600030846040518463ffffffff1660e01b81526004016128759392919061505e565b600060405180830381600087803b15801561288f57600080fd5b505af11580156128a3573d6000803e3d6000fd5b505050505050505050505050565b600d5460408051631abe729160e31b815290516000926001600160a01b03169163d5f39488916004808301926020929190829003018186803b15801561088157600080fd5b600d546040516b4d65646961466163746f727960a01b60208201526000916001600160a01b031690638eaa6ac090602c01610835565b33612935613579565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401612960919061481f565b60206040518083038186803b15801561297857600080fd5b505afa15801561298c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b09190614ebd565b6001600160a01b0316146129d65760405162461bcd60e51b81526004016109ef90614f15565b612a68816129e26137d1565b6001600160a01b031663cc889b0b846040518263ffffffff1660e01b8152600401612a0f91815260200190565b60606040518083038186803b158015612a2757600080fd5b505afa158015612a3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5f9190615082565b602001516137db565b50565b60606001805461090490614eda565b6001600160a01b038216331415612acf5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b60448201526064016109ef565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b612b453383613de8565b612b615760405162461bcd60e51b81526004016109ef90615714565b612b6d84848484613eaa565b50505050565b6040516303fb4aab60e41b815260009073__$a79fa16630ef50be54c6520a39abca49df$__90633fb4aab090612bb190879087908790600401615765565b60206040518083038186803b158015612bc957600080fd5b505af4158015612bdd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c019190615017565b949350505050565b6060612c14826134ee565b612c785760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016109ef565b600060028054612c8790614eda565b905011612d2a5760008281526003602052604090208054612ca790614eda565b80601f0160208091040260200160405190810160405280929190818152602001828054612cd390614eda565b8015612d205780601f10612cf557610100808354040283529160200191612d20565b820191906000526020600020905b815481529060010190602001808311612d0357829003601f168201915b50505050506108ef565b600260036000848152602001908152602001600020604051602001612d50929190615812565b60405160208183030381529060405292915050565b600d54604051651059141bdbdb60d21b60208201526000916001600160a01b031690638eaa6ac090602601610835565b33612d9f8361211d565b6001600160a01b031614612dc55760405162461bcd60e51b81526004016109ef90614f15565b612dcd613583565b6001600160a01b031663fb772f4b8383336040518463ffffffff1660e01b8152600401610d8593929190615827565b600d546001600160a01b031615612e3d5760405162461bcd60e51b8152602060048201526005602482015264041523030360dc1b60448201526064016109ef565b8451612e50906000906020880190614786565b5084604051602001612e629190615858565b60405160208183030381529060405260019080519060200190612e86929190614786565b508351612e9a906002906020870190614786565b50612ea782600085613989565b600d80546001600160a01b0319166001600160a01b03831617905561108e565b33612ed0613579565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401612efb919061481f565b60206040518083038186803b158015612f1357600080fd5b505afa158015612f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f4b9190614ebd565b6001600160a01b03161415612f725760405162461bcd60e51b81526004016109ef90614fb8565b73__$d7d41b463f0c25cd0b86b1d270805192c7$__63bbd1abd7612f946135d2565b6001600160a01b031663b3a0ebc9846040518263ffffffff1660e01b8152600401612fc191815260200190565b60006040518083038186803b158015612fd957600080fd5b505afa158015612fed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261301591908101906152dc565b61301e84612210565b346040518463ffffffff1660e01b815260040161303d9392919061564c565b60006040518083038186803b15801561305557600080fd5b505af4158015613069573d6000803e3d6000fd5b505050506130756135d2565b6001600160a01b0316639c03facb826040518263ffffffff1660e01b81526004016130a291815260200190565b600060405180830381600087803b1580156130bc57600080fd5b505af11580156130d0573d6000803e3d6000fd5b505050506130de33826137c6565b6130ec6116fc600a34615256565b6130f461358d565b604051635dd995b560e01b8152600481018390523460248201523360448201524260648201526001600160a01b039190911690635dd995b590608401600060405180830381600087803b15801561314a57600080fd5b505af115801561315e573d6000803e3d6000fd5b5050505061316a61358d565b6001600160a01b031663465bcf053033846040518463ffffffff1660e01b81526004016110609392919061505e565b336131a2613579565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016131cd919061481f565b60206040518083038186803b1580156131e557600080fd5b505afa1580156131f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061321d9190614ebd565b6001600160a01b031614156132445760405162461bcd60e51b81526004016109ef90614fb8565b73__$d7d41b463f0c25cd0b86b1d270805192c7$__63c4bbd6766132666135d2565b6001600160a01b031663b3a0ebc9846040518263ffffffff1660e01b815260040161329391815260200190565b60006040518083038186803b1580156132ab57600080fd5b505afa1580156132bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526132e791908101906152dc565b346040518363ffffffff1660e01b815260040161303d929190615888565b600d546040516d50726f706f73616c52657669657760901b60208201526000916001600160a01b031690638eaa6ac090602e01610835565b6000600e54476108b99190615278565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b33613384613579565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016133af919061481f565b60206040518083038186803b1580156133c757600080fd5b505afa1580156133db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133ff9190614ebd565b6001600160a01b031614156134265760405162461bcd60e51b81526004016109ef90614fb8565b600061343182613edd565b905061343b613597565b6040516315f5a0b160e21b8152600481018490523360248201526001600160a01b0391909116906357d682c490604401600060405180830381600087803b15801561348557600080fd5b505af1158015613499573d6000803e3d6000fd5b5050505080600e60008282546134af9190615278565b90915550505050565b600d546040516b22bb32b73a22b6b4ba3a32b960a11b60208201526000916001600160a01b031690638eaa6ac090602c01610835565b6000908152600460205260409020546001600160a01b0316151590565b600081815260066020526040902080546001600160a01b0319166001600160a01b03841690811790915581906135408261211d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006108b9612152565b60006108b9613305565b60006108b96134b8565b60006108b96126bf565b6135ab3382613de8565b6135c75760405162461bcd60e51b81526004016109ef90615714565b610b208383836140d7565b60006108b9612d65565b60006135e66137bc565b6001600160a01b031663761ce95d846040518263ffffffff1660e01b815260040161361391815260200190565b60006040518083038186803b15801561362b57600080fd5b505afa15801561363f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613667919081019061589b565b905060005b8151811015612b6d57600082828151811061368957613689615515565b602002602001015190508060400151600e60008282546136a99190615278565b9091555050818414156136cf576136ca600a82604001516116fc9190615256565b6137a9565b600081602001516001600160a01b0316826040015161271090604051600060405180830381858888f193505050503d8060008114613729576040519150601f19603f3d011682016040523d82523d6000602084013e61372e565b606091505b50509050806137a75761373f61358d565b6001600160a01b031663ec720b9b836020015184604001516040518363ffffffff1660e01b81526004016137749291906150e3565b600060405180830381600087803b15801561378e57600080fd5b505af11580156137a2573d6000803e3d6000fd5b505050505b505b50806137b481615612565b91505061366c565b60006108b9610f10565b6113823083836140d7565b60006108b9610801565b6000806137e66137d1565b6001600160a01b03166337df00c9856040518263ffffffff1660e01b815260040161381391815260200190565b6040805180830381600087803b15801561382c57600080fd5b505af1158015613840573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061386491906159a9565b915091506138706135d2565b6001600160a01b0316639c03facb856040518263ffffffff1660e01b815260040161389d91815260200190565b600060405180830381600087803b1580156138b757600080fd5b505af11580156138cb573d6000803e3d6000fd5b5050505080600e60008282546138e19190615278565b909155506138f1905082856137c6565b6138ff6116fc600a83615256565b61390761358d565b6001600160a01b031663465bcf053085876040518463ffffffff1660e01b81526004016139369392919061505e565b600060405180830381600087803b15801561395057600080fd5b505af1158015613964573d6000803e3d6000fd5b5050505050505050565b610b2083838360405180602001604052806000815250612b3b565b6139938383614270565b60008281526003602090815260409091208251612b6d92840190614786565b60006139bc611508565b90506000816001600160a01b03168361271090604051600060405180830381858888f193505050503d8060008114613a10576040519150601f19603f3d011682016040523d82523d6000602084013e613a15565b606091505b5050905080610b2057613a2661358d565b6001600160a01b031663ec720b9b83856040518363ffffffff1660e01b8152600401610c069291906150e3565b600080613a5e6135d2565b6001600160a01b031663b3a0ebc9846040518263ffffffff1660e01b8152600401613a8b91815260200190565b60006040518083038186803b158015613aa357600080fd5b505afa158015613ab7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613adf91908101906152dc565b90506000613aeb6137d1565b6001600160a01b031663cc889b0b856040518263ffffffff1660e01b8152600401613b1891815260200190565b60606040518083038186803b158015613b3057600080fd5b505afa158015613b44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b689190615082565b905060028260e001516004811115613b8257613b826153e3565b148015613b9b575060208101516001600160a01b031615155b15613c8157600081602001516001600160a01b0316826040015161271090604051600060405180830381858888f193505050503d8060008114613bfa576040519150601f19603f3d011682016040523d82523d6000602084013e613bff565b606091505b505090508160400151935080613c7f57613c1761358d565b6001600160a01b031663ec720b9b836020015184604001516040518363ffffffff1660e01b8152600401613c4c9291906150e3565b600060405180830381600087803b158015613c6657600080fd5b505af1158015613c7a573d6000803e3d6000fd5b505050505b505b5050919050565b600080613c936137d1565b6001600160a01b031663cc889b0b846040518263ffffffff1660e01b8152600401613cc091815260200190565b60606040518083038186803b158015613cd857600080fd5b505afa158015613cec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d109190615082565b602001516001600160a01b03161415806108ef5750613d2d6137bc565b6001600160a01b031663761ce95d836040518263ffffffff1660e01b8152600401613d5a91815260200190565b60006040518083038186803b158015613d7257600080fd5b505afa158015613d86573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613dae919081019061589b565b51151592915050565b613dc08161439c565b6040805160208082018084526000808452858152600390925292902090516113829290614786565b6000613df3826134ee565b613e545760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016109ef565b6000613e5f8361211d565b9050806001600160a01b0316846001600160a01b03161480613e9a5750836001600160a01b0316613e8f84610987565b6001600160a01b0316145b80612c015750612c01818561334d565b613eb58484846140d7565b613ec184848484614431565b612b6d5760405162461bcd60e51b81526004016109ef906159d7565b600080613ee86135d2565b6001600160a01b031663b3a0ebc9846040518263ffffffff1660e01b8152600401613f1591815260200190565b60006040518083038186803b158015613f2d57600080fd5b505afa158015613f41573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613f6991908101906152dc565b90506000613f75613597565b6001600160a01b03166301b99e04856040518263ffffffff1660e01b8152600401613fa291815260200190565b60006040518083038186803b158015613fba57600080fd5b505afa158015613fce573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613ff69190810190615141565b905060038260e001516004811115614010576140106153e3565b148015614029575060608101516001600160a01b031615155b15613c8157606081015160808201516040516000926001600160a01b0316916127109184818181858888f193505050503d8060008114614085576040519150601f19603f3d011682016040523d82523d6000602084013e61408a565b606091505b505090508160800151935080613c7f576140a261358d565b6001600160a01b031663ec720b9b836060015184608001516040518363ffffffff1660e01b8152600401613c4c9291906150e3565b826001600160a01b03166140ea8261211d565b6001600160a01b0316146141525760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016109ef565b6001600160a01b0382166141b45760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016109ef565b6141bf83838361453e565b6141ca60008261350b565b6001600160a01b03831660009081526005602052604081208054600192906141f3908490615278565b90915550506001600160a01b0382166000908152600560205260408120805460019290614221908490615046565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b038681169182179092559151849391871691600080516020615a9a83398151915291a4505050565b6001600160a01b0382166142c65760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016109ef565b6142cf816134ee565b1561431b5760405162461bcd60e51b815260206004820152601c60248201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b60448201526064016109ef565b6143276000838361453e565b6001600160a01b0382166000908152600560205260408120805460019290614350908490615046565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839290600080516020615a9a833981519152908290a45050565b60006143a78261211d565b90506143b58160008461453e565b6143c060008361350b565b6001600160a01b03811660009081526005602052604081208054600192906143e9908490615278565b909155505060008281526004602052604080822080546001600160a01b0319169055518391906001600160a01b03841690600080516020615a9a833981519152908390a45050565b60006001600160a01b0384163b1561453357604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290614475903390899088908890600401615a29565b602060405180830381600087803b15801561448f57600080fd5b505af19250505080156144bf575060408051601f3d908101601f191682019092526144bc91810190615a66565b60015b614519573d8080156144ed576040519150601f19603f3d011682016040523d82523d6000602084013e6144f2565b606091505b5080516145115760405162461bcd60e51b81526004016109ef906159d7565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612c01565b506001949350505050565b6001600160a01b0383166145995761459481600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b6145bc565b816001600160a01b0316836001600160a01b0316146145bc576145bc83826145f6565b6001600160a01b0382166145d357610b2081614693565b826001600160a01b0316826001600160a01b031614610b2057610b208282614742565b6000600161460384612189565b61460d9190615278565b600083815260096020526040902054909150808214614660576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a546000906146a590600190615278565b6000838152600b6020526040812054600a80549394509092849081106146cd576146cd615515565b9060005260206000200154905080600a83815481106146ee576146ee615515565b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a80548061472657614726615a83565b6001900381819060005260206000200160009055905550505050565b600061474d83612189565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b82805461479290614eda565b90600052602060002090601f0160209004810192826147b457600085556147fa565b82601f106147cd57805160ff19168380011785556147fa565b828001600101855582156147fa579182015b828111156147fa5782518255916020019190600101906147df565b5061480692915061480a565b5090565b5b80821115614806576000815560010161480b565b6001600160a01b0391909116815260200190565b6001600160e01b031981168114612a6857600080fd5b60006020828403121561485b57600080fd5b813561234281614833565b60005b83811015614881578181015183820152602001614869565b83811115612b6d5750506000910152565b600081518084526148aa816020860160208601614866565b601f01601f19169290920160200192915050565b6020815260006123426020830184614892565b6000602082840312156148e357600080fd5b5035919050565b6001600160a01b0381168114612a6857600080fd5b6000806040838503121561491257600080fd5b823561491d816148ea565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b03811182821017156149635761496361492b565b60405290565b60405161016081016001600160401b03811182821017156149635761496361492b565b604051608081016001600160401b03811182821017156149635761496361492b565b604051601f8201601f191681016001600160401b03811182821017156149d6576149d661492b565b604052919050565b60006001600160401b038211156149f7576149f761492b565b50601f01601f191660200190565b6000614a18614a13846149de565b6149ae565b9050828152838383011115614a2c57600080fd5b828260208301376000602084830101529392505050565b600082601f830112614a5457600080fd5b61234283833560208501614a05565b8015158114612a6857600080fd5b600080600060608486031215614a8657600080fd5b8335925060208401356001600160401b03811115614aa357600080fd5b614aaf86828701614a43565b9250506040840135614ac081614a63565b809150509250925092565b60008060408385031215614ade57600080fd5b8235614ae9816148ea565b915060208301356001600160401b03811115614b0457600080fd5b614b1085828601614a43565b9150509250929050565b600080600060608486031215614b2f57600080fd5b83356001600160401b03811115614b4557600080fd5b614b5186828701614a43565b9660208601359650604090950135949350505050565b600080600060608486031215614b7c57600080fd5b8335614b87816148ea565b92506020840135614b97816148ea565b929592945050506040919091013590565b600060208284031215614bba57600080fd5b81356001600160401b03811115614bd057600080fd5b612c0184828501614a43565b60008060408385031215614bef57600080fd5b50508035926020909101359150565b60008060408385031215614c1157600080fd5b8235915060208301356001600160401b03811115614b0457600080fd5b604081526000614c416040830185614892565b90508260208301529392505050565b600060208284031215614c6257600080fd5b8135612342816148ea565b60058110612a6857600080fd5b600080600080600080600060e0888a031215614c9557600080fd5b87356001600160401b0380821115614cac57600080fd5b614cb88b838c01614a43565b985060208a0135915080821115614cce57600080fd5b50614cdb8a828b01614a43565b96505060408801359450606088013593506080880135925060a0880135614d0181614c6d565b8092505060c0880135905092959891949750929550565b60008060408385031215614d2b57600080fd5b8235614d36816148ea565b91506020830135614d4681614a63565b809150509250929050565b60008060008060808587031215614d6757600080fd5b8435614d72816148ea565b93506020850135614d82816148ea565b92506040850135915060608501356001600160401b03811115614da457600080fd5b8501601f81018713614db557600080fd5b614dc487823560208401614a05565b91505092959194509250565b600080600080600060a08688031215614de857600080fd5b85356001600160401b0380821115614dff57600080fd5b614e0b89838a01614a43565b96506020880135915080821115614e2157600080fd5b614e2d89838a01614a43565b95506040880135915080821115614e4357600080fd5b50614e5088828901614a43565b9350506060860135614e61816148ea565b91506080860135614e71816148ea565b809150509295509295909350565b60008060408385031215614e9257600080fd5b8235614e9d816148ea565b91506020830135614d46816148ea565b8051614eb8816148ea565b919050565b600060208284031215614ecf57600080fd5b8151612342816148ea565b600181811c90821680614eee57607f821691505b60208210811415614f0f57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526005908201526425a218189960d91b604082015260600190565b838152606060208201526000614f4d6060830185614892565b90508215156040830152949350505050565b6001600160a01b0383168152604060208201819052600090612c0190830184614892565b6001600160a01b03848116825283166020820152606060408201819052600090614faf90830184614892565b95945050505050565b60208082526005908201526412d10c0c4d60da1b604082015260600190565b60a081526000614fea60a0830188614892565b60208301969096525060408101939093526001600160a01b03919091166060830152608090910152919050565b60006020828403121561502957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561505957615059615030565b500190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006060828403121561509457600080fd5b604051606081016001600160401b03811182821017156150b6576150b661492b565b6040528251815260208301516150cb816148ea565b60208201526040928301519281019290925250919050565b6001600160a01b03929092168252602082015260400190565b600082601f83011261510d57600080fd5b815161511b614a13826149de565b81815284602083860101111561513057600080fd5b612c01826020830160208701614866565b60006020828403121561515357600080fd5b81516001600160401b038082111561516a57600080fd5b9083019060a0828603121561517e57600080fd5b615186614941565b82518281111561519557600080fd5b6151a1878286016150fc565b8252506020830151602082015260408301516040820152606083015191506151c8826148ea565b8160608201526080830151608082015280935050505092915050565b8381526060602082015260006151fd6060830185614892565b8281036040840152835160a0825261521860a0830182614892565b60208681015190840152604080870151908401526060808701516001600160a01b031690840152608095860151959092019490945295945050505050565b60008261527357634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561528a5761528a615030565b500390565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b8051614eb881614c6d565b8051614eb881614a63565b6000602082840312156152ee57600080fd5b81516001600160401b038082111561530557600080fd5b90830190610160828603121561531a57600080fd5b615322614969565b61532b83614ead565b815260208301518281111561533f57600080fd5b61534b878286016150fc565b60208301525060408301518281111561536357600080fd5b61536f878286016150fc565b604083015250606083015160608201526080830151608082015260a083015160a082015260c083015160c08201526153a960e084016152c6565b60e08201526101008381015190820152610120808401519082015261014091506153d48284016152d1565b91810191909152949350505050565b634e487b7160e01b600052602160045260246000fd5b6005811061541757634e487b7160e01b600052602160045260246000fd5b9052565b80516001600160a01b031682526000610160602083015181602086015261544482860182614892565b9150506040830151848203604086015261545e8282614892565b915050606083015160608501526080830151608085015260a083015160a085015260c083015160c085015260e083015161549b60e08601826153f9565b506101008381015190850152610120808401519085015261014092830151151592909301919091525090565b6080815260006154da608083018761541b565b6020830195909552506040810192909252606090910152919050565b60208082526005908201526412d10c4c4d60da1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006001600160401b038211156155445761554461492b565b5060051b60200190565b6000602080838503121561556157600080fd5b82516001600160401b0381111561557757600080fd5b8301601f8101851361558857600080fd5b8051615596614a138261552b565b81815260059190911b820183019083810190878311156155b557600080fd5b928401925b828410156155d3578351825292840192908401906155ba565b979650505050505050565b6000602082840312156155f057600080fd5b81516001600160401b0381111561560657600080fd5b612c01848285016150fc565b600060001982141561562657615626615030565b5060010190565b600081600019048311821515161561564757615647615030565b500290565b60608152600061565f606083018661541b565b60208301949094525060400152919050565b84815260806020820152600061568a6080830186614892565b6001600160a01b03949094166040830152506060015292915050565b6001600160a01b0389168152610100602082018190526000906156cb8382018b614892565b905082810360408401526156df818a614892565b9150508660608301528560808301528460a083015261570160c08301856153f9565b8260e08301529998505050505050505050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60608152600061565f6060830186614892565b8054600090600181811c908083168061579257607f831692505b60208084108214156157b457634e487b7160e01b600052602260045260246000fd5b8180156157c857600181146157d957615806565b60ff19861689528489019650615806565b60008881526020902060005b868110156157fe5781548b8201529085019083016157e5565b505084890196505b50505050505092915050565b6000612c016158218386615778565b84615778565b8381526060602082015260006158406060830185614892565b905060018060a01b0383166040830152949350505050565b674b616c6569646f5f60c01b81526000825161587b816008850160208701614866565b9190910160080192915050565b604081526000614c41604083018561541b565b600060208083850312156158ae57600080fd5b82516001600160401b03808211156158c557600080fd5b818501915085601f8301126158d957600080fd5b81516158e7614a138261552b565b81815260059190911b8301840190848101908883111561590657600080fd5b8585015b8381101561599c578051858111156159225760008081fd5b86016080818c03601f190181131561593a5760008081fd5b61594261498c565b898301518152604080840151615957816148ea565b828c01526060848101518284015292840151928984111561597a57600091508182fd5b6159888f8d868801016150fc565b90830152508552505091860191860161590a565b5098975050505050505050565b600080604083850312156159bc57600080fd5b82516159c7816148ea565b6020939093015192949293505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090615a5c90830184614892565b9695505050505050565b600060208284031215615a7857600080fd5b815161234281614833565b634e487b7160e01b600052603160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220aa15a61ac09115658b129487e19c9ed6e377c1c491c3658bf64d911ba0235c2264736f6c63430008090033",
  "libraries": {
    "Ad": "0x9F397D94EC32D43EeC60dCF9A38a44322D54d42A",
    "Purchase": "0xA5DD71afe7c4a1e123f3aF11624642F39A67e06A"
  },
  "devdoc": {
    "author": "Shumpei Koike - <shumpei.koike@bridges.inc>",
    "kind": "dev",
    "methods": {
      "acceptOffer(uint256,string)": {
        "details": "Accepts an offer by the Media.",
        "params": {
          "tokenId": "uint256 of the token ID",
          "tokenMetadata": "string of the NFT token metadata"
        }
      },
      "acceptProposal(uint256)": {
        "details": "Accepts the proposal.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "adId(string,uint256,uint256)": {
        "details": "Returns ID based on the space metadata, display start timestamp, and      display end timestamp. These three makes it the unique.",
        "params": {
          "displayEndTimestamp": "uint256 of the end timestamp for the display",
          "displayStartTimestamp": "uint256 of the start timestamp for the display",
          "spaceMetadata": "uint256 of the space metadata"
        }
      },
      "adPoolAddress()": {
        "details": "Gets the address of AdPool."
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balance()": {
        "details": "Returns the balacne deposited on the proxy contract."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "bid(uint256)": {
        "details": "Bids to participate in an auction.      It is defined as an English Auction.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "bidWithProposal(uint256,string)": {
        "details": "Bids to participate in an auction.      It is defined as an Open Bid.",
        "params": {
          "proposalMetadata": "string of the metadata hash",
          "tokenId": "uint256 of the token ID"
        }
      },
      "buy(uint256)": {
        "details": "Buys the token that is defined as the specific period on an ad space.      The price of the token is fixed.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "buyBasedOnTime(uint256)": {
        "details": "Buys the token that is defined as the specific period on an ad space.      The price is decreasing as time goes by, that is defined as an Dutch Auction.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "cancelOffer(uint256)": {
        "details": "Cancels an offer.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "currentPrice(uint256)": {
        "details": "Returns the current price.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "deletePeriod(uint256)": {
        "details": "Deletes a period and its token.      If there is any users locking the fund for the sale, the amount would be transfered      to the user when deleting the period.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "denyProposal(uint256,string,bool)": {
        "details": "Denies the submitted proposal, mentioning what is the problem.",
        "params": {
          "offensive": "bool if the content would offend somebody",
          "reason": "string of the reason why it is rejected",
          "tokenId": "uint256 of the token ID"
        }
      },
      "display(string)": {
        "details": "Displays the ad content that is approved by the media owner.",
        "params": {
          "spaceMetadata": "string of the space metadata"
        }
      },
      "englishAuctionAddress()": {
        "details": "Gets the address of EnglishAuction."
      },
      "eventEmitterAddress()": {
        "details": "Gets the address of EventEmitter."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "initialize(string,string,string,address,address)": {
        "details": "Initialize the instance.",
        "params": {
          "baseURI": "string of the base URI",
          "mediaEOA": "address of the media owner",
          "nameRegistry": "address of NameRegistry",
          "title": "string of the title of the instance",
          "tokenMetadata": "string of the token metadata"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mediaFactoryAddress()": {
        "details": "Gets the address of MediaFactory."
      },
      "mediaRegistryAddress()": {
        "details": "Gets the address of MediaRegistry."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "nameRegistryAddress()": {
        "details": "Gets the address of NameRegistry"
      },
      "newPeriod(string,string,uint256,uint256,uint256,uint8,uint256)": {
        "details": "Create a new period for a space. This function requires some params      to decide which kinds of pricing way and how much price to get started.",
        "params": {
          "displayEndTimestamp": "uint256 of the end timestamp for the display",
          "displayStartTimestamp": "uint256 of the start timestamp for the display",
          "minPrice": "uint256 of the minimum price to sell it out",
          "pricing": "uint256 of the pricing way",
          "saleEndTimestamp": "uint256 of the end timestamp for the sale",
          "spaceMetadata": "string of the space metadata",
          "tokenMetadata": "string of the token metadata"
        }
      },
      "newSpace(string)": {
        "details": "Creates a new space for the media account.",
        "params": {
          "spaceMetadata": "string of the space metadata"
        }
      },
      "offerBidAddress()": {
        "details": "Gets the address of OfferBid."
      },
      "offerPeriod(string,uint256,uint256)": {
        "details": "Offers to buy a period that the sender requests.",
        "params": {
          "displayEndTimestamp": "uint256 of the end timestamp for the display",
          "displayStartTimestamp": "uint256 of the start timestamp for the display",
          "spaceMetadata": "string of the space metadata"
        }
      },
      "openBidAddress()": {
        "details": "Gets the address of OpenBid."
      },
      "owner()": {
        "details": "Gets the owner address."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "proposalReviewAddress()": {
        "details": "Gets the address of ProposalReview."
      },
      "propose(uint256,string)": {
        "details": "Proposes the metadata to the token you bought.      Users can propose many times as long as it is accepted.",
        "params": {
          "metadata": "string of the proposal metadata",
          "tokenId": "uint256 of the token ID"
        }
      },
      "pushToSuccessfulBidder(uint256)": {
        "details": "Receives the token you bidded if you are the successful bidder.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "receiveToken(uint256)": {
        "details": "Receives the token you bidded if you are the successful bidder.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Overrides transferFrom to emit an event from the common emitter."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "selectProposal(uint256,uint256)": {
        "details": "Selects the best proposal bidded with.",
        "params": {
          "index": "uint256 of the index number",
          "tokenId": "uint256 of the token ID"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Overrides transferFrom to emit an event from the common emitter."
      },
      "updateMedia(address,string)": {
        "details": "Updates the media EOA and the metadata.",
        "params": {
          "newMediaEOA": "address of a new EOA",
          "newMetadata": "string of a new metadata"
        }
      },
      "vaultAddress()": {
        "details": "Gets the address of Vault."
      },
      "withdraw()": {
        "details": "Withdraws the fund deposited to the proxy contract.      If you put 0 as the amount, you can withdraw as much as possible."
      },
      "withdrawalAmount()": {
        "details": "Returns the withdrawal amount."
      }
    },
    "title": "MediaFacade - manages ad spaces and its periods to sell them to users.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2742,
        "contract": "contracts/MediaFacade.sol:MediaFacade",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2744,
        "contract": "contracts/MediaFacade.sol:MediaFacade",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2746,
        "contract": "contracts/MediaFacade.sol:MediaFacade",
        "label": "_baseURI",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2750,
        "contract": "contracts/MediaFacade.sol:MediaFacade",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2754,
        "contract": "contracts/MediaFacade.sol:MediaFacade",
        "label": "_owners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2758,
        "contract": "contracts/MediaFacade.sol:MediaFacade",
        "label": "_balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2762,
        "contract": "contracts/MediaFacade.sol:MediaFacade",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2768,
        "contract": "contracts/MediaFacade.sol:MediaFacade",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2774,
        "contract": "contracts/MediaFacade.sol:MediaFacade",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2778,
        "contract": "contracts/MediaFacade.sol:MediaFacade",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2781,
        "contract": "contracts/MediaFacade.sol:MediaFacade",
        "label": "_allTokens",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2785,
        "contract": "contracts/MediaFacade.sol:MediaFacade",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 114,
        "contract": "contracts/MediaFacade.sol:MediaFacade",
        "label": "_status",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2345,
        "contract": "contracts/MediaFacade.sol:MediaFacade",
        "label": "_nameRegistry",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(INameRegistry)4466"
      },
      {
        "astId": 3786,
        "contract": "contracts/MediaFacade.sol:MediaFacade",
        "label": "_processingTotal",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(INameRegistry)4466": {
        "encoding": "inplace",
        "label": "contract INameRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
