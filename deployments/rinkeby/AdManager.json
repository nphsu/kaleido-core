{
  "address": "0x35FC06Ad95f56D229275C52b512B52309654480D",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenMetadata",
          "type": "string"
        }
      ],
      "name": "acceptOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "acceptProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "accepted",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "spaceMetadata",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "displayStartTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "displayEndTimestamp",
          "type": "uint256"
        }
      ],
      "name": "adId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "proposalMetadata",
          "type": "string"
        }
      ],
      "name": "bidWithProposal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buyBasedOnTime",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "currentPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "deletePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deniedReasons",
      "outputs": [
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "offensive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "offensive",
          "type": "bool"
        }
      ],
      "name": "denyProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "spaceMetadata",
          "type": "string"
        }
      ],
      "name": "display",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "englishAuctionAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eventEmitterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "nameRegistry",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mediaFactoryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mediaRegistryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nameRegistryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "spaceMetadata",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenMetadata",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "saleEndTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "displayStartTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "displayEndTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum Ad.Pricing",
          "name": "pricing",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        }
      ],
      "name": "newPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "spaceMetadata",
          "type": "string"
        }
      ],
      "name": "newSpace",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offerBidAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "spaceMetadata",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "displayStartTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "displayEndTimestamp",
          "type": "uint256"
        }
      ],
      "name": "offerPeriod",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openBidAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "propose",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposed",
      "outputs": [
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "pushToSuccessfulBidder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "receiveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "selectProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newMediaEOA",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "newMetadata",
          "type": "string"
        }
      ],
      "name": "updateMedia",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xec8bc5b96eb5e382cfdb4e3e79deadb76fa8a9eb8905fb57fb30fb69618b1b6e",
  "receipt": {
    "to": null,
    "from": "0xCdfc500F7f0FCe1278aECb0340b523cD55b3EBbb",
    "contractAddress": "0x35FC06Ad95f56D229275C52b512B52309654480D",
    "transactionIndex": 0,
    "gasUsed": "5294997",
    "logsBloom": "0x
    "blockHash": "0xdd7a468308e7101566c0206bd71a4e8583a76289429c073612fdf9edcf4ec340",
    "transactionHash": "0xec8bc5b96eb5e382cfdb4e3e79deadb76fa8a9eb8905fb57fb30fb69618b1b6e",
    "logs": [],
    "blockNumber": 9755554,
    "cumulativeGasUsed": "5294997",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c223bd9c030b84fabf96ddb6a85aba33",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenMetadata\",\"type\":\"string\"}],\"name\":\"acceptOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"acceptProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accepted\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"spaceMetadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"displayStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"displayEndTimestamp\",\"type\":\"uint256\"}],\"name\":\"adId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proposalMetadata\",\"type\":\"string\"}],\"name\":\"bidWithProposal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyBasedOnTime\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"deletePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deniedReasons\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"offensive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"offensive\",\"type\":\"bool\"}],\"name\":\"denyProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"spaceMetadata\",\"type\":\"string\"}],\"name\":\"display\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"englishAuctionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventEmitterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"nameRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mediaFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mediaRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"spaceMetadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenMetadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"saleEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"displayStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"displayEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum Ad.Pricing\",\"name\":\"pricing\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"}],\"name\":\"newPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"spaceMetadata\",\"type\":\"string\"}],\"name\":\"newSpace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offerBidAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"spaceMetadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"displayStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"displayEndTimestamp\",\"type\":\"uint256\"}],\"name\":\"offerPeriod\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openBidAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposed\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"pushToSuccessfulBidder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"receiveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"selectProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMediaEOA\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newMetadata\",\"type\":\"string\"}],\"name\":\"updateMedia\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Shumpei Koike - <shumpei.koike@bridges.inc>\",\"kind\":\"dev\",\"methods\":{\"acceptOffer(uint256,string)\":{\"details\":\"Accepts an offer by the Media.\",\"params\":{\"tokenId\":\"uint256 of the token ID\",\"tokenMetadata\":\"string of the NFT token metadata\"}},\"acceptProposal(uint256)\":{\"details\":\"Accepts the proposal.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"adId(string,uint256,uint256)\":{\"details\":\"Returns ID based on the space metadata, display start timestamp, and      display end timestamp. These three makes it the unique.\",\"params\":{\"displayEndTimestamp\":\"uint256 of the end timestamp for the display\",\"displayStartTimestamp\":\"uint256 of the start timestamp for the display\",\"spaceMetadata\":\"uint256 of the space metadata\"}},\"adPoolAddress()\":{\"details\":\"Gets the address of AdPool.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balance()\":{\"details\":\"Returns the balacne deposited on the proxy contract.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"bid(uint256)\":{\"details\":\"Bids to participate in an auction.      It is defined as an English Auction.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"bidWithProposal(uint256,string)\":{\"details\":\"Bids to participate in an auction.      It is defined as an Open Bid.\",\"params\":{\"proposalMetadata\":\"string of the metadata hash\",\"tokenId\":\"uint256 of the token ID\"}},\"buy(uint256)\":{\"details\":\"Buys the token that is defined as the specific period on an ad space.      The price of the token is fixed.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"buyBasedOnTime(uint256)\":{\"details\":\"Buys the token that is defined as the specific period on an ad space.      The price is decreasing as time goes by, that is defined as an Dutch Auction.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"cancelOffer(uint256)\":{\"details\":\"Cancels an offer.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"currentPrice(uint256)\":{\"details\":\"Returns the current price.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"deletePeriod(uint256)\":{\"details\":\"Deletes a period and its token.      If there is any users locking the fund for the sale, the amount would be transfered      to the user when deleting the period.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"denyProposal(uint256,string,bool)\":{\"details\":\"Denies the submitted proposal, mentioning what is the problem.\",\"params\":{\"offensive\":\"bool if the content would offend somebody\",\"reason\":\"string of the reason why it is rejected\",\"tokenId\":\"uint256 of the token ID\"}},\"display(string)\":{\"details\":\"Displays the ad content that is approved by the media owner.\",\"params\":{\"spaceMetadata\":\"string of the space metadata\"}},\"englishAuctionAddress()\":{\"details\":\"Gets the address of EnglishAuction.\"},\"eventEmitterAddress()\":{\"details\":\"Gets the address of EventEmitter.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"initialize(string,string,address)\":{\"details\":\"Initialize the instance.\",\"params\":{\"baseURI\":\"string of the base URI\",\"nameRegistry\":\"address of NameRegistry\",\"title\":\"string of the title of the instance\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mediaFactoryAddress()\":{\"details\":\"Gets the address of MediaFactory.\"},\"mediaRegistryAddress()\":{\"details\":\"Gets the address of MediaRegistry.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"nameRegistryAddress()\":{\"details\":\"Gets the address of NameRegistry\"},\"newPeriod(string,string,uint256,uint256,uint256,uint8,uint256)\":{\"details\":\"Create a new period for a space. This function requires some params      to decide which kinds of pricing way and how much price to get started.\",\"params\":{\"displayEndTimestamp\":\"uint256 of the end timestamp for the display\",\"displayStartTimestamp\":\"uint256 of the start timestamp for the display\",\"minPrice\":\"uint256 of the minimum price to sell it out\",\"pricing\":\"uint256 of the pricing way\",\"saleEndTimestamp\":\"uint256 of the end timestamp for the sale\",\"spaceMetadata\":\"string of the space metadata\",\"tokenMetadata\":\"string of the token metadata\"}},\"newSpace(string)\":{\"details\":\"Creates a new space for the media account.\",\"params\":{\"spaceMetadata\":\"string of the space metadata\"}},\"offerBidAddress()\":{\"details\":\"Gets the address of OfferBid.\"},\"offerPeriod(string,uint256,uint256)\":{\"details\":\"Offers to buy a period that the sender requests.\",\"params\":{\"displayEndTimestamp\":\"uint256 of the end timestamp for the display\",\"displayStartTimestamp\":\"uint256 of the start timestamp for the display\",\"spaceMetadata\":\"string of the space metadata\"}},\"openBidAddress()\":{\"details\":\"Gets the address of OpenBid.\"},\"owner()\":{\"details\":\"Gets the owner address.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"propose(uint256,string)\":{\"details\":\"Proposes the metadata to the token you bought.      Users can propose many times as long as it is accepted.\",\"params\":{\"metadata\":\"string of the proposal metadata\",\"tokenId\":\"uint256 of the token ID\"}},\"pushToSuccessfulBidder(uint256)\":{\"details\":\"Receives the token you bidded if you are the successful bidder.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"receiveToken(uint256)\":{\"details\":\"Receives the token you bidded if you are the successful bidder.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Overrides transferFrom to emit an event from the common emitter.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"selectProposal(uint256,uint256)\":{\"details\":\"Selects the best proposal bidded with.\",\"params\":{\"index\":\"uint256 of the index number\",\"tokenId\":\"uint256 of the token ID\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Overrides transferFrom to emit an event from the common emitter.\"},\"updateMedia(address,string)\":{\"details\":\"Updates the media EOA and the metadata.\",\"params\":{\"newMediaEOA\":\"address of a new EOA\",\"newMetadata\":\"string of a new metadata\"}},\"vaultAddress()\":{\"details\":\"Gets the address of Vault.\"},\"withdraw()\":{\"details\":\"Withdraws the fund deposited to the proxy contract.      If you put 0 as the amount, you can withdraw as much as possible.\"},\"withdrawalAmount()\":{\"details\":\"Returns the withdrawal amount.\"}},\"title\":\"AdManager - manages ad spaces and its periods to sell them to users.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AdManager.sol\":\"AdManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"contracts/AdManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./base/PrimarySales.sol\\\";\\nimport \\\"./base/DistributionRight.sol\\\";\\nimport \\\"./libraries/Purchase.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/// @title AdManager - manages ad spaces and its periods to sell them to users.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ncontract AdManager is DistributionRight, PrimarySales, ReentrancyGuard {\\n\\t/// @dev Can call it by only the media\\n\\tmodifier onlyMedia() {\\n\\t\\trequire(_mediaRegistry().ownerOf(address(this)) == msg.sender, \\\"KD012\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Prevents the media from calling by yourself\\n\\tmodifier exceptYourself() {\\n\\t\\trequire(_mediaRegistry().ownerOf(address(this)) != msg.sender, \\\"KD014\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Called by the successful bidder\\n\\tmodifier onlySuccessfulBidder(uint256 tokenId) {\\n\\t\\trequire(_english().bidding(tokenId).bidder == msg.sender, \\\"KD126\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Can call it only once\\n\\tmodifier initializer() {\\n\\t\\trequire(address(_nameRegistry) == address(0x0), \\\"AR000\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Initialize the instance.\\n\\t/// @param title string of the title of the instance\\n\\t/// @param baseURI string of the base URI\\n\\t/// @param nameRegistry address of NameRegistry\\n\\tfunction initialize(\\n\\t\\tstring memory title,\\n\\t\\tstring memory baseURI,\\n\\t\\taddress nameRegistry\\n\\t) external virtual {\\n\\t\\t_name = title;\\n\\t\\t_symbol = string(abi.encodePacked(\\\"Kaleido_\\\", title));\\n\\t\\t_baseURI = baseURI;\\n\\t\\tinitialize(nameRegistry);\\n\\t}\\n\\n\\t/// @dev Updates the media EOA and the metadata.\\n\\t/// @param newMediaEOA address of a new EOA\\n\\t/// @param newMetadata string of a new metadata\\n\\tfunction updateMedia(address newMediaEOA, string memory newMetadata)\\n\\t\\texternal\\n\\t\\tvirtual\\n\\t\\tonlyMedia\\n\\t{\\n\\t\\t_mediaRegistry().updateMedia(newMediaEOA, newMetadata);\\n\\t\\t_eventEmitter().emitUpdateMedia(address(this), newMediaEOA, newMetadata);\\n\\t}\\n\\n\\t/// @dev Creates a new space for the media account.\\n\\t/// @param spaceMetadata string of the space metadata\\n\\tfunction newSpace(string memory spaceMetadata) external virtual onlyMedia {\\n\\t\\t_adPool().addSpace(spaceMetadata);\\n\\t}\\n\\n\\t/// @dev Create a new period for a space. This function requires some params\\n\\t///      to decide which kinds of pricing way and how much price to get started.\\n\\t/// @param spaceMetadata string of the space metadata\\n\\t/// @param tokenMetadata string of the token metadata\\n\\t/// @param saleEndTimestamp uint256 of the end timestamp for the sale\\n\\t/// @param displayStartTimestamp uint256 of the start timestamp for the display\\n\\t/// @param displayEndTimestamp uint256 of the end timestamp for the display\\n\\t/// @param pricing uint256 of the pricing way\\n\\t/// @param minPrice uint256 of the minimum price to sell it out\\n\\tfunction newPeriod(\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tstring memory tokenMetadata,\\n\\t\\tuint256 saleEndTimestamp,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\tAd.Pricing pricing,\\n\\t\\tuint256 minPrice\\n\\t) external virtual onlyMedia {\\n\\t\\tuint256 tokenId = _adPool().addPeriod(\\n\\t\\t\\taddress(this),\\n\\t\\t\\tspaceMetadata,\\n\\t\\t\\ttokenMetadata,\\n\\t\\t\\tsaleEndTimestamp,\\n\\t\\t\\tdisplayStartTimestamp,\\n\\t\\t\\tdisplayEndTimestamp,\\n\\t\\t\\tpricing,\\n\\t\\t\\tminPrice\\n\\t\\t);\\n\\t\\t_mintRight(address(this), tokenId, tokenMetadata);\\n\\t\\t_eventEmitter().emitTransferCustom(address(0), address(this), tokenId);\\n\\t}\\n\\n\\t/// @dev Deletes a period and its token.\\n\\t///      If there is any users locking the fund for the sale, the amount would be transfered\\n\\t///      to the user when deleting the period.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction deletePeriod(uint256 tokenId) external virtual onlyMedia {\\n\\t\\trequire(_adPool().allPeriods(tokenId).mediaProxy != address(0), \\\"KD114\\\");\\n\\t\\trequire(ownerOf(tokenId) == address(this), \\\"KD121\\\");\\n\\t\\trequire(!_alreadyBid(tokenId), \\\"KD128\\\");\\n\\t\\t_burnRight(tokenId);\\n\\t\\t_adPool().deletePeriod(tokenId);\\n\\t\\t_eventEmitter().emitTransferCustom(address(this), address(0), tokenId);\\n\\t}\\n\\n\\t/// @dev Buys the token that is defined as the specific period on an ad space.\\n\\t///      The price of the token is fixed.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction buy(uint256 tokenId) external payable virtual exceptYourself {\\n\\t\\tPurchase.checkBeforeBuy(_adPool().allPeriods(tokenId));\\n\\t\\t_adPool().sold(tokenId);\\n\\t\\t_dropRight(msg.sender, tokenId);\\n\\t\\t_collectFees(msg.value / 10);\\n\\t\\t_eventEmitter().emitBuy(tokenId, msg.value, msg.sender, _blockTimestamp());\\n\\t\\t_eventEmitter().emitTransferCustom(address(this), msg.sender, tokenId);\\n\\t}\\n\\n\\t/// @dev Buys the token that is defined as the specific period on an ad space.\\n\\t///      The price is decreasing as time goes by, that is defined as an Dutch Auction.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction buyBasedOnTime(uint256 tokenId)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\tvirtual\\n\\t\\texceptYourself\\n\\t{\\n\\t\\tPurchase.checkBeforeBuyBasedOnTime(\\n\\t\\t\\t_adPool().allPeriods(tokenId),\\n\\t\\t\\tcurrentPrice(tokenId)\\n\\t\\t);\\n\\t\\t_adPool().sold(tokenId);\\n\\t\\t_dropRight(msg.sender, tokenId);\\n\\t\\t_collectFees(msg.value / 10);\\n\\t\\t_eventEmitter().emitBuy(tokenId, msg.value, msg.sender, _blockTimestamp());\\n\\t\\t_eventEmitter().emitTransferCustom(address(this), msg.sender, tokenId);\\n\\t}\\n\\n\\t/// @dev Bids to participate in an auction.\\n\\t///      It is defined as an English Auction.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction bid(uint256 tokenId)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\tvirtual\\n\\t\\texceptYourself\\n\\t\\tnonReentrant\\n\\t{\\n\\t\\tPurchase.checkBeforeBid(\\n\\t\\t\\t_adPool().allPeriods(tokenId),\\n\\t\\t\\tcurrentPrice(tokenId),\\n\\t\\t\\t_blockTimestamp()\\n\\t\\t);\\n\\t\\tuint256 refunded = _refundBiddingAmount(tokenId);\\n\\t\\t_english().bid(tokenId, msg.sender, msg.value);\\n\\t\\t_processingTotal += (msg.value - refunded);\\n\\t}\\n\\n\\t/// @dev Bids to participate in an auction.\\n\\t///      It is defined as an Open Bid.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param proposalMetadata string of the metadata hash\\n\\tfunction bidWithProposal(uint256 tokenId, string memory proposalMetadata)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\tvirtual\\n\\t\\texceptYourself\\n\\t\\tnonReentrant\\n\\t{\\n\\t\\tPurchase.checkBeforeBidWithProposal(\\n\\t\\t\\t_adPool().allPeriods(tokenId),\\n\\t\\t\\t_blockTimestamp()\\n\\t\\t);\\n\\t\\t_processingTotal += msg.value;\\n\\t\\t_openBid().bid(tokenId, proposalMetadata, msg.sender, msg.value);\\n\\t}\\n\\n\\t/// @dev Selects the best proposal bidded with.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param index uint256 of the index number\\n\\tfunction selectProposal(uint256 tokenId, uint256 index)\\n\\t\\texternal\\n\\t\\tvirtual\\n\\t\\tonlyMedia\\n\\t{\\n\\t\\t_refundToProposers(tokenId, index);\\n\\t\\taddress successfulBidder = _openBid().selectProposal(tokenId, index);\\n\\t\\t_dropRight(successfulBidder, tokenId);\\n\\t\\t_eventEmitter().emitTransferCustom(\\n\\t\\t\\taddress(this),\\n\\t\\t\\tsuccessfulBidder,\\n\\t\\t\\ttokenId\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _refundToProposers(uint256 tokenId, uint256 index) internal virtual {\\n\\t\\tSale.OpenBid[] memory _biddings = _openBid().biddingList(tokenId);\\n\\n\\t\\tfor (uint256 i = 0; i < _biddings.length; i++) {\\n\\t\\t\\tSale.OpenBid memory target = _biddings[i];\\n\\t\\t\\t_processingTotal -= target.price;\\n\\t\\t\\tif (i == index) {\\n\\t\\t\\t\\t_collectFees(target.price / 10);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t(bool success, ) = payable(target.sender).call{\\n\\t\\t\\t\\t\\tvalue: target.price,\\n\\t\\t\\t\\t\\tgas: 10000\\n\\t\\t\\t\\t}(\\\"\\\");\\n\\t\\t\\t\\tif (!success) {\\n\\t\\t\\t\\t\\t_eventEmitter().emitPaymentFailure(target.sender, target.price);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _refundBiddingAmount(uint256 tokenId)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t\\treturns (uint256 refunded)\\n\\t{\\n\\t\\tAd.Period memory period = _adPool().allPeriods(tokenId);\\n\\t\\tSale.Bidding memory _bidding = _english().bidding(tokenId);\\n\\t\\tif (period.pricing == Ad.Pricing.ENGLISH && _bidding.bidder != address(0)) {\\n\\t\\t\\t(bool success, ) = payable(_bidding.bidder).call{\\n\\t\\t\\t\\tvalue: _bidding.price,\\n\\t\\t\\t\\tgas: 10000\\n\\t\\t\\t}(\\\"\\\");\\n\\t\\t\\trefunded = _bidding.price;\\n\\t\\t\\tif (!success) {\\n\\t\\t\\t\\t_eventEmitter().emitPaymentFailure(_bidding.bidder, _bidding.price);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev Receives the token you bidded if you are the successful bidder.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction receiveToken(uint256 tokenId)\\n\\t\\texternal\\n\\t\\tvirtual\\n\\t\\tonlySuccessfulBidder(tokenId)\\n\\t{\\n\\t\\t_toSuccessfulBidder(tokenId, msg.sender);\\n\\t}\\n\\n\\t/// @dev Receives the token you bidded if you are the successful bidder.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction pushToSuccessfulBidder(uint256 tokenId) external virtual onlyMedia {\\n\\t\\t_toSuccessfulBidder(tokenId, _english().bidding(tokenId).bidder);\\n\\t}\\n\\n\\t/// @dev Offers to buy a period that the sender requests.\\n\\t/// @param spaceMetadata string of the space metadata\\n\\t/// @param displayStartTimestamp uint256 of the start timestamp for the display\\n\\t/// @param displayEndTimestamp uint256 of the end timestamp for the display\\n\\tfunction offerPeriod(\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp\\n\\t) external payable virtual exceptYourself {\\n\\t\\t_offerBid().offer(\\n\\t\\t\\tspaceMetadata,\\n\\t\\t\\tdisplayStartTimestamp,\\n\\t\\t\\tdisplayEndTimestamp,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tmsg.value\\n\\t\\t);\\n\\t\\t_processingTotal += msg.value;\\n\\t}\\n\\n\\t/// @dev Cancels an offer.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction cancelOffer(uint256 tokenId) external virtual exceptYourself {\\n\\t\\tuint256 offeredPrice = _refundOfferedAmount(tokenId);\\n\\t\\t_offerBid().cancel(tokenId, msg.sender);\\n\\t\\t_processingTotal -= offeredPrice;\\n\\t}\\n\\n\\tfunction _refundOfferedAmount(uint256 tokenId)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t\\treturns (uint256 offeredPrice)\\n\\t{\\n\\t\\tAd.Period memory period = _adPool().allPeriods(tokenId);\\n\\t\\tSale.Offer memory _offered = _offerBid().offered(tokenId);\\n\\t\\tif (period.pricing == Ad.Pricing.OFFER && _offered.sender != address(0)) {\\n\\t\\t\\t(bool success, ) = payable(_offered.sender).call{\\n\\t\\t\\t\\tvalue: _offered.price,\\n\\t\\t\\t\\tgas: 10000\\n\\t\\t\\t}(\\\"\\\");\\n\\t\\t\\tofferedPrice = _offered.price;\\n\\t\\t\\tif (!success) {\\n\\t\\t\\t\\t_eventEmitter().emitPaymentFailure(_offered.sender, _offered.price);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev Accepts an offer by the Media.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param tokenMetadata string of the NFT token metadata\\n\\tfunction acceptOffer(uint256 tokenId, string memory tokenMetadata)\\n\\t\\texternal\\n\\t\\tvirtual\\n\\t\\tonlyMedia\\n\\t{\\n\\t\\t(address sender, uint256 price) = _offerBid().accept(\\n\\t\\t\\ttokenId,\\n\\t\\t\\ttokenMetadata\\n\\t\\t);\\n\\t\\t_mintRight(sender, tokenId, tokenMetadata);\\n\\t\\t_collectFees(price / 10);\\n\\t\\t_processingTotal -= price;\\n\\t\\t_eventEmitter().emitTransferCustom(address(0), address(this), tokenId);\\n\\t}\\n\\n\\t/// @dev Withdraws the fund deposited to the proxy contract.\\n\\t///      If you put 0 as the amount, you can withdraw as much as possible.\\n\\tfunction withdraw() external virtual onlyMedia {\\n\\t\\tuint256 withdrawal = withdrawalAmount();\\n\\t\\t(bool success, ) = payable(msg.sender).call{\\n\\t\\t\\tvalue: withdrawal,\\n\\t\\t\\tgas: 10000\\n\\t\\t}(\\\"\\\");\\n\\t\\tif (success) {\\n\\t\\t\\t_eventEmitter().emitWithdraw(withdrawal);\\n\\t\\t} else {\\n\\t\\t\\t_eventEmitter().emitPaymentFailure(msg.sender, withdrawal);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev Proposes the metadata to the token you bought.\\n\\t///      Users can propose many times as long as it is accepted.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param metadata string of the proposal metadata\\n\\tfunction propose(uint256 tokenId, string memory metadata) external virtual {\\n\\t\\trequire(ownerOf(tokenId) == msg.sender, \\\"KD012\\\");\\n\\t\\t_proposeToRight(tokenId, metadata);\\n\\t\\t_eventEmitter().emitPropose(tokenId, metadata);\\n\\t}\\n\\n\\t/// @dev Accepts the proposal.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction acceptProposal(uint256 tokenId) external virtual onlyMedia {\\n\\t\\tstring memory metadata = proposed[tokenId].content;\\n\\t\\trequire(bytes(metadata).length != 0, \\\"KD130\\\");\\n\\t\\trequire(ownerOf(tokenId) == proposed[tokenId].proposer, \\\"KD131\\\");\\n\\t\\t_acceptProposal(tokenId, metadata);\\n\\t\\t_eventEmitter().emitAcceptProposal(tokenId, metadata);\\n\\t}\\n\\n\\t/// @dev Denies the submitted proposal, mentioning what is the problem.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param reason string of the reason why it is rejected\\n\\t/// @param offensive bool if the content would offend somebody\\n\\tfunction denyProposal(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory reason,\\n\\t\\tbool offensive\\n\\t) external virtual onlyMedia {\\n\\t\\tstring memory metadata = proposed[tokenId].content;\\n\\t\\trequire(bytes(metadata).length != 0, \\\"KD130\\\");\\n\\t\\tdeniedReasons[tokenId].push(Draft.Denied(reason, offensive));\\n\\t\\t_eventEmitter().emitDenyProposal(tokenId, metadata, reason, offensive);\\n\\t}\\n\\n\\t/// @dev Overrides transferFrom to emit an event from the common emitter.\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public virtual override {\\n\\t\\tsuper.transferFrom(from, to, tokenId);\\n\\t\\t_eventEmitter().emitTransferCustom(from, to, tokenId);\\n\\t}\\n\\n\\t/// @dev Overrides transferFrom to emit an event from the common emitter.\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public virtual override {\\n\\t\\tsuper.safeTransferFrom(from, to, tokenId);\\n\\t\\t_eventEmitter().emitTransferCustom(from, to, tokenId);\\n\\t}\\n\\n\\t/// @dev Returns ID based on the space metadata, display start timestamp, and\\n\\t///      display end timestamp. These three makes it the unique.\\n\\t/// @param spaceMetadata uint256 of the space metadata\\n\\t/// @param displayStartTimestamp uint256 of the start timestamp for the display\\n\\t/// @param displayEndTimestamp uint256 of the end timestamp for the display\\n\\tfunction adId(\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp\\n\\t) public pure virtual returns (uint256) {\\n\\t\\treturn Ad.id(spaceMetadata, displayStartTimestamp, displayEndTimestamp);\\n\\t}\\n\\n\\t/// @dev Returns the balacne deposited on the proxy contract.\\n\\tfunction balance() public view virtual returns (uint256) {\\n\\t\\treturn address(this).balance;\\n\\t}\\n\\n\\t/// @dev Returns the withdrawal amount.\\n\\tfunction withdrawalAmount() public view virtual returns (uint256) {\\n\\t\\treturn address(this).balance - _processingTotal;\\n\\t}\\n\\n\\t/// @dev Displays the ad content that is approved by the media owner.\\n\\t/// @param spaceMetadata string of the space metadata\\n\\tfunction display(string memory spaceMetadata)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string memory, uint256)\\n\\t{\\n\\t\\tuint256[] memory tokenIds = _adPool().tokenIdsOf(spaceMetadata);\\n\\t\\tfor (uint256 i = 0; i < tokenIds.length; i++) {\\n\\t\\t\\tif (tokenIds[i] != 0) {\\n\\t\\t\\t\\tAd.Period memory period = _adPool().allPeriods(tokenIds[i]);\\n\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\tperiod.displayStartTimestamp <= _blockTimestamp() &&\\n\\t\\t\\t\\t\\tperiod.displayEndTimestamp >= _blockTimestamp()\\n\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\treturn (accepted[tokenIds[i]], tokenIds[i]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn (\\\"\\\", 0);\\n\\t}\\n\\n\\tfunction _toSuccessfulBidder(uint256 tokenId, address receiver)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t{\\n\\t\\t(address bidder, uint256 price) = _english().receiveToken(tokenId);\\n\\t\\t_adPool().sold(tokenId);\\n\\t\\t_processingTotal -= price;\\n\\t\\t_dropRight(bidder, tokenId);\\n\\t\\t_collectFees(price / 10);\\n\\t\\t_eventEmitter().emitTransferCustom(address(this), receiver, tokenId);\\n\\t}\\n\\n\\tfunction _collectFees(uint256 value) internal virtual {\\n\\t\\taddress vault = vaultAddress();\\n\\t\\t(bool success, ) = payable(vault).call{ value: value, gas: 10000 }(\\\"\\\");\\n\\t\\tif (!success) {\\n\\t\\t\\t_eventEmitter().emitPaymentFailure(vault, value);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x24b706263a0a8c65dfba4c0aa321e197a91ee8c045e021afde5fcfc99b615cdb\",\"license\":\"UNLICENSED\"},\"contracts/accessors/NameAccessor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/INameRegistry.sol\\\";\\n\\n/// @title NameAccessor - manages the endpoints.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ncontract NameAccessor {\\n\\tINameRegistry internal _nameRegistry;\\n\\n\\t/// @dev Sets the address of NameRegistry.\\n\\t/// @param nameRegistry address of the NameRegistry\\n\\tfunction initialize(address nameRegistry) internal {\\n\\t\\t_nameRegistry = INameRegistry(nameRegistry);\\n\\t}\\n\\n\\t/// @dev Prevents calling a function from anyone except the accepted contracts.\\n\\tmodifier onlyAllowedContract() {\\n\\t\\trequire(_nameRegistry.allowedContracts(msg.sender), \\\"KD013\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Throws if not called by MediaFactory.\\n\\tmodifier onlyFactory() {\\n\\t\\trequire(msg.sender == mediaFactoryAddress(), \\\"KD010\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Throws if called by any account other than the owner.\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(owner() == msg.sender, \\\"KD012\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Gets the address of NameRegistry\\n\\tfunction nameRegistryAddress() public view returns (address) {\\n\\t\\treturn address(_nameRegistry);\\n\\t}\\n\\n\\t/// @dev Gets the address of AdPool.\\n\\tfunction adPoolAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"AdPool\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of MediaFactory.\\n\\tfunction mediaFactoryAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"MediaFactory\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of MediaRegistry.\\n\\tfunction mediaRegistryAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"MediaRegistry\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of Vault.\\n\\tfunction vaultAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"Vault\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of EventEmitter.\\n\\tfunction eventEmitterAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"EventEmitter\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of EnglishAuction.\\n\\tfunction englishAuctionAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"EnglishAuction\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of OpenBid.\\n\\tfunction openBidAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"OpenBid\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of OfferBid.\\n\\tfunction offerBidAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"OfferBid\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the owner address.\\n\\tfunction owner() public view returns (address) {\\n\\t\\treturn _nameRegistry.deployer();\\n\\t}\\n}\\n\",\"keccak256\":\"0x554bc36ca0974276664c094cab125837bde10ea06b2f3c28416679f9b5aa8804\",\"license\":\"UNLICENSED\"},\"contracts/base/DistributionRight.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"../accessors/NameAccessor.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/// @title DistributionRight - represents an NFT based on ad an space\\n///        created by a media and its period.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ncontract DistributionRight is ERC721 {\\n\\tfunction _mintRight(\\n\\t\\taddress reciever,\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory metadata\\n\\t) internal virtual {\\n\\t\\t_mint(reciever, tokenId);\\n\\t\\t_tokenURIs[tokenId] = metadata;\\n\\t}\\n\\n\\tfunction _burnRight(uint256 tokenId) internal virtual {\\n\\t\\t_burn(tokenId);\\n\\t\\t_tokenURIs[tokenId] = \\\"\\\";\\n\\t}\\n\\n\\tfunction _dropRight(address receiver, uint256 tokenId) internal virtual {\\n\\t\\t_transfer(address(this), receiver, tokenId);\\n\\t}\\n}\\n\",\"keccak256\":\"0xc3a29eedb24cfac51251f4dc41e4db37e6d57a03b41dc0b4c76f25e9dee4487c\",\"license\":\"UNLICENSED\"},\"contracts/base/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IERC721Metadata.sol\\\";\\nimport \\\"../interfaces/IERC721Receiver.sol\\\";\\nimport \\\"../interfaces/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\ncontract ERC721 is Context, IERC721Enumerable, IERC721Metadata {\\n\\tusing Address for address;\\n\\tusing Strings for uint256;\\n\\n\\t// Token name\\n\\tstring internal _name;\\n\\n\\t// Token symbol\\n\\tstring internal _symbol;\\n\\n\\t// Base URI\\n\\tstring internal _baseURI;\\n\\n\\t// Token URIs\\n\\tmapping(uint256 => string) internal _tokenURIs;\\n\\n\\t// Mapping from token ID to owner address\\n\\tmapping(uint256 => address) internal _owners;\\n\\n\\t// Mapping owner address to token count\\n\\tmapping(address => uint256) internal _balances;\\n\\n\\t// Mapping from token ID to approved address\\n\\tmapping(uint256 => address) internal _tokenApprovals;\\n\\n\\t// Mapping from owner to operator approvals\\n\\tmapping(address => mapping(address => bool)) internal _operatorApprovals;\\n\\n\\t// Mapping from owner to list of owned token IDs\\n\\tmapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n\\t// Mapping from token ID to index of the owner tokens list\\n\\tmapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n\\t// Array with all token ids, used for enumeration\\n\\tuint256[] private _allTokens;\\n\\n\\t// Mapping from token id to position in the allTokens array\\n\\tmapping(uint256 => uint256) private _allTokensIndex;\\n\\n\\t/**\\n\\t * @dev See {IERC165-supportsInterface}.\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId)\\n\\t\\tpublic\\n\\t\\tpure\\n\\t\\tvirtual\\n\\t\\toverride(IERC165)\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn\\n\\t\\t\\tinterfaceId == type(IERC721).interfaceId ||\\n\\t\\t\\tinterfaceId == type(IERC721Metadata).interfaceId;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-balanceOf}.\\n\\t */\\n\\tfunction balanceOf(address owner)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n\\t\\treturn _balances[owner];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-ownerOf}.\\n\\t */\\n\\tfunction ownerOf(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (address)\\n\\t{\\n\\t\\taddress owner = _owners[tokenId];\\n\\t\\trequire(owner != address(0), \\\"KD114\\\");\\n\\t\\treturn owner;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Metadata-name}.\\n\\t */\\n\\tfunction name() public view virtual override returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Metadata-symbol}.\\n\\t */\\n\\tfunction symbol() public view virtual override returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Metadata-tokenURI}.\\n\\t */\\n\\tfunction tokenURI(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\t_exists(tokenId),\\n\\t\\t\\t\\\"ERC721Metadata: URI query for nonexistent token\\\"\\n\\t\\t);\\n\\n\\t\\treturn\\n\\t\\t\\tbytes(_baseURI).length > 0\\n\\t\\t\\t\\t? string(abi.encodePacked(_baseURI, _tokenURIs[tokenId]))\\n\\t\\t\\t\\t: _tokenURIs[tokenId];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-approve}.\\n\\t */\\n\\tfunction approve(address to, uint256 tokenId) public virtual override {\\n\\t\\taddress owner = ownerOf(tokenId);\\n\\t\\trequire(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n\\t\\trequire(\\n\\t\\t\\t_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n\\t\\t\\t\\\"ERC721: approve caller is not owner nor approved for all\\\"\\n\\t\\t);\\n\\n\\t\\t_approve(to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-getApproved}.\\n\\t */\\n\\tfunction getApproved(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (address)\\n\\t{\\n\\t\\trequire(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n\\t\\treturn _tokenApprovals[tokenId];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-setApprovalForAll}.\\n\\t */\\n\\tfunction setApprovalForAll(address operator, bool approved)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t{\\n\\t\\trequire(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n\\t\\t_operatorApprovals[_msgSender()][operator] = approved;\\n\\t\\temit ApprovalForAll(_msgSender(), operator, approved);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-isApprovedForAll}.\\n\\t */\\n\\tfunction isApprovedForAll(address owner, address operator)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn _operatorApprovals[owner][operator];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-transferFrom}.\\n\\t */\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public virtual override {\\n\\t\\t//solhint-disable-next-line max-line-length\\n\\t\\trequire(\\n\\t\\t\\t_isApprovedOrOwner(_msgSender(), tokenId),\\n\\t\\t\\t\\\"ERC721: transfer caller is not owner nor approved\\\"\\n\\t\\t);\\n\\n\\t\\t_transfer(from, to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-safeTransferFrom}.\\n\\t */\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public virtual override {\\n\\t\\tsafeTransferFrom(from, to, tokenId, \\\"\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-safeTransferFrom}.\\n\\t */\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) public virtual override {\\n\\t\\trequire(\\n\\t\\t\\t_isApprovedOrOwner(_msgSender(), tokenId),\\n\\t\\t\\t\\\"ERC721: transfer caller is not owner nor approved\\\"\\n\\t\\t);\\n\\t\\t_safeTransfer(from, to, tokenId, _data);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n\\t * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n\\t *\\n\\t * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n\\t *\\n\\t * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n\\t * implement alternative mechanisms to perform token transfer, such as signature-based.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `from` cannot be the zero address.\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must exist and be owned by `from`.\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _safeTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) internal virtual {\\n\\t\\t_transfer(from, to, tokenId);\\n\\t\\trequire(\\n\\t\\t\\t_checkOnERC721Received(from, to, tokenId, _data),\\n\\t\\t\\t\\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns whether `tokenId` exists.\\n\\t *\\n\\t * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n\\t *\\n\\t * Tokens start existing when they are minted (`_mint`),\\n\\t * and stop existing when they are burned (`_burn`).\\n\\t */\\n\\tfunction _exists(uint256 tokenId) internal view virtual returns (bool) {\\n\\t\\treturn _owners[tokenId] != address(0);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must exist.\\n\\t */\\n\\tfunction _isApprovedOrOwner(address spender, uint256 tokenId)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\trequire(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n\\t\\taddress owner = ownerOf(tokenId);\\n\\t\\treturn (spender == owner ||\\n\\t\\t\\tgetApproved(tokenId) == spender ||\\n\\t\\t\\tisApprovedForAll(owner, spender));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Safely mints `tokenId` and transfers it to `to`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must not exist.\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _safeMint(address to, uint256 tokenId) internal virtual {\\n\\t\\t_safeMint(to, tokenId, \\\"\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n\\t * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n\\t */\\n\\tfunction _safeMint(\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) internal virtual {\\n\\t\\t_mint(to, tokenId);\\n\\t\\trequire(\\n\\t\\t\\t_checkOnERC721Received(address(0), to, tokenId, _data),\\n\\t\\t\\t\\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Mints `tokenId` and transfers it to `to`.\\n\\t *\\n\\t * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must not exist.\\n\\t * - `to` cannot be the zero address.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _mint(address to, uint256 tokenId) internal virtual {\\n\\t\\trequire(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n\\t\\trequire(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n\\t\\t_beforeTokenTransfer(address(0), to, tokenId);\\n\\n\\t\\t_balances[to] += 1;\\n\\t\\t_owners[tokenId] = to;\\n\\n\\t\\temit Transfer(address(0), to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Destroys `tokenId`.\\n\\t * The approval is cleared when the token is burned.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must exist.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _burn(uint256 tokenId) internal virtual {\\n\\t\\taddress owner = ownerOf(tokenId);\\n\\n\\t\\t_beforeTokenTransfer(owner, address(0), tokenId);\\n\\n\\t\\t// Clear approvals\\n\\t\\t_approve(address(0), tokenId);\\n\\n\\t\\t_balances[owner] -= 1;\\n\\t\\tdelete _owners[tokenId];\\n\\n\\t\\temit Transfer(owner, address(0), tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers `tokenId` from `from` to `to`.\\n\\t *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must be owned by `from`.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _transfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) internal virtual {\\n\\t\\trequire(\\n\\t\\t\\townerOf(tokenId) == from,\\n\\t\\t\\t\\\"ERC721: transfer of token that is not own\\\"\\n\\t\\t);\\n\\t\\trequire(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n\\t\\t_beforeTokenTransfer(from, to, tokenId);\\n\\n\\t\\t// Clear approvals from the previous owner\\n\\t\\t_approve(address(0), tokenId);\\n\\n\\t\\t_balances[from] -= 1;\\n\\t\\t_balances[to] += 1;\\n\\t\\t_owners[tokenId] = to;\\n\\n\\t\\temit Transfer(from, to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Approve `to` to operate on `tokenId`\\n\\t *\\n\\t * Emits a {Approval} event.\\n\\t */\\n\\tfunction _approve(address to, uint256 tokenId) internal virtual {\\n\\t\\t_tokenApprovals[tokenId] = to;\\n\\t\\temit Approval(ownerOf(tokenId), to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n\\t * The call is not executed if the target address is not a contract.\\n\\t *\\n\\t * @param from address representing the previous owner of the given token ID\\n\\t * @param to target address that will receive the tokens\\n\\t * @param tokenId uint256 ID of the token to be transferred\\n\\t * @param _data bytes optional data to send along with the call\\n\\t * @return bool whether the call correctly returned the expected magic value\\n\\t */\\n\\tfunction _checkOnERC721Received(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) private returns (bool) {\\n\\t\\tif (to.isContract()) {\\n\\t\\t\\ttry\\n\\t\\t\\t\\tIERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\\n\\t\\t\\treturns (bytes4 retval) {\\n\\t\\t\\t\\treturn retval == IERC721Receiver(to).onERC721Received.selector;\\n\\t\\t\\t} catch (bytes memory reason) {\\n\\t\\t\\t\\tif (reason.length == 0) {\\n\\t\\t\\t\\t\\trevert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tassembly {\\n\\t\\t\\t\\t\\t\\trevert(add(32, reason), mload(reason))\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Hook that is called before any token transfer. This includes minting\\n\\t * and burning.\\n\\t *\\n\\t * Calling conditions:\\n\\t *\\n\\t * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n\\t * transferred to `to`.\\n\\t * - When `from` is zero, `tokenId` will be minted for `to`.\\n\\t * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n\\t * - `from` and `to` are never both zero.\\n\\t *\\n\\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n\\t */\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) internal {\\n\\t\\tif (from == address(0)) {\\n\\t\\t\\t_addTokenToAllTokensEnumeration(tokenId);\\n\\t\\t} else if (from != to) {\\n\\t\\t\\t_removeTokenFromOwnerEnumeration(from, tokenId);\\n\\t\\t}\\n\\t\\tif (to == address(0)) {\\n\\t\\t\\t_removeTokenFromAllTokensEnumeration(tokenId);\\n\\t\\t} else if (to != from) {\\n\\t\\t\\t_addTokenToOwnerEnumeration(to, tokenId);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n\\t */\\n\\tfunction tokenOfOwnerByIndex(address owner, uint256 index)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\tindex < balanceOf(owner),\\n\\t\\t\\t\\\"ERC721Enumerable: owner index out of bounds\\\"\\n\\t\\t);\\n\\t\\treturn _ownedTokens[owner][index];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Enumerable-totalSupply}.\\n\\t */\\n\\tfunction totalSupply() public view virtual override returns (uint256) {\\n\\t\\treturn _allTokens.length;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Enumerable-tokenByIndex}.\\n\\t */\\n\\tfunction tokenByIndex(uint256 index)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\tindex < totalSupply(),\\n\\t\\t\\t\\\"ERC721Enumerable: global index out of bounds\\\"\\n\\t\\t);\\n\\t\\treturn _allTokens[index];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n\\t * @param to address representing the new owner of the given token ID\\n\\t * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n\\t */\\n\\tfunction _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n\\t\\tuint256 length = balanceOf(to);\\n\\t\\t_ownedTokens[to][length] = tokenId;\\n\\t\\t_ownedTokensIndex[tokenId] = length;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to add a token to this extension's token tracking data structures.\\n\\t * @param tokenId uint256 ID of the token to be added to the tokens list\\n\\t */\\n\\tfunction _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n\\t\\t_allTokensIndex[tokenId] = _allTokens.length;\\n\\t\\t_allTokens.push(tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n\\t * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n\\t * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n\\t * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n\\t * @param from address representing the previous owner of the given token ID\\n\\t * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n\\t */\\n\\tfunction _removeTokenFromOwnerEnumeration(address from, uint256 tokenId)\\n\\t\\tprivate\\n\\t{\\n\\t\\t// To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n\\t\\t// then delete the last slot (swap and pop).\\n\\n\\t\\tuint256 lastTokenIndex = balanceOf(from) - 1;\\n\\t\\tuint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n\\t\\t// When the token to delete is the last token, the swap operation is unnecessary\\n\\t\\tif (tokenIndex != lastTokenIndex) {\\n\\t\\t\\tuint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n\\t\\t\\t_ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n\\t\\t\\t_ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\t\\t}\\n\\n\\t\\t// This also deletes the contents at the last position of the array\\n\\t\\tdelete _ownedTokensIndex[tokenId];\\n\\t\\tdelete _ownedTokens[from][lastTokenIndex];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to remove a token from this extension's token tracking data structures.\\n\\t * This has O(1) time complexity, but alters the order of the _allTokens array.\\n\\t * @param tokenId uint256 ID of the token to be removed from the tokens list\\n\\t */\\n\\tfunction _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n\\t\\t// To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n\\t\\t// then delete the last slot (swap and pop).\\n\\n\\t\\tuint256 lastTokenIndex = _allTokens.length - 1;\\n\\t\\tuint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n\\t\\t// When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n\\t\\t// rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n\\t\\t// an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n\\t\\tuint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n\\t\\t_allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n\\t\\t_allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n\\t\\t// This also deletes the contents at the last position of the array\\n\\t\\tdelete _allTokensIndex[tokenId];\\n\\t\\t_allTokens.pop();\\n\\t}\\n}\\n\",\"keccak256\":\"0xc684d399c3f47f7a5490318574aeff7c363925f9610043a3cf91fd3f6e3b6f08\",\"license\":\"UNLICENSED\"},\"contracts/base/PrimarySales.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"./ProposalManager.sol\\\";\\nimport \\\"../common/BlockTimestamp.sol\\\";\\n\\n/// @title PrimarySales - manages how to sell them out.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\nabstract contract PrimarySales is ProposalManager, BlockTimestamp {\\n\\t/// @dev Returns the current price.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction currentPrice(uint256 tokenId) public view virtual returns (uint256) {\\n\\t\\tAd.Period memory period = _adPool().allPeriods(tokenId);\\n\\t\\tif (period.pricing == Ad.Pricing.RRP) {\\n\\t\\t\\treturn period.minPrice;\\n\\t\\t}\\n\\t\\tif (period.pricing == Ad.Pricing.DUTCH) {\\n\\t\\t\\treturn\\n\\t\\t\\t\\tperiod.startPrice -\\n\\t\\t\\t\\t((period.startPrice - period.minPrice) *\\n\\t\\t\\t\\t\\t(_blockTimestamp() - period.saleStartTimestamp)) /\\n\\t\\t\\t\\t(period.saleEndTimestamp - period.saleStartTimestamp);\\n\\t\\t}\\n\\t\\tif (period.pricing == Ad.Pricing.ENGLISH) {\\n\\t\\t\\treturn _english().currentPrice(tokenId);\\n\\t\\t}\\n\\t\\tif (period.pricing == Ad.Pricing.OFFER) {\\n\\t\\t\\treturn _offerBid().currentPrice(tokenId);\\n\\t\\t}\\n\\t\\tif (period.pricing == Ad.Pricing.OPEN) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\trevert(\\\"not exist\\\");\\n\\t}\\n\\n\\tfunction _alreadyBid(uint256 tokenId) internal view virtual returns (bool) {\\n\\t\\treturn\\n\\t\\t\\t_english().bidding(tokenId).bidder != address(0) ||\\n\\t\\t\\t_openBid().biddingList(tokenId).length != 0;\\n\\t}\\n}\\n\",\"keccak256\":\"0x85c89c3e7fb641932bb4a1111bcf3923012ac9a61724dcf62435c001def7e9b9\",\"license\":\"UNLICENSED\"},\"contracts/base/ProposalManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"./SpaceManager.sol\\\";\\n\\n/// @title ProposalManager - manages proposals.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\nabstract contract ProposalManager is SpaceManager {\\n\\tfunction _proposeToRight(uint256 tokenId, string memory metadata)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t{\\n\\t\\tproposed[tokenId] = Draft.Proposal(metadata, msg.sender);\\n\\t}\\n\\n\\tfunction _clearProposal(uint256 tokenId) internal virtual {\\n\\t\\tproposed[tokenId] = Draft.Proposal(\\\"\\\", proposed[tokenId].proposer);\\n\\t}\\n\\n\\tfunction _acceptProposal(uint256 tokenId, string memory metadata)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t{\\n\\t\\taccepted[tokenId] = metadata;\\n\\t\\t_clearProposal(tokenId);\\n\\t}\\n}\\n\",\"keccak256\":\"0xebb86d0122c9a7dc959af0440187c70c226810aee664cb0661278b52788a99e9\",\"license\":\"UNLICENSED\"},\"contracts/base/SpaceManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../accessors/NameAccessor.sol\\\";\\nimport \\\"../interfaces/IMediaRegistry.sol\\\";\\nimport \\\"../interfaces/IAdPool.sol\\\";\\nimport \\\"../interfaces/IEnglishAuction.sol\\\";\\nimport \\\"../interfaces/IEventEmitter.sol\\\";\\nimport \\\"../interfaces/IOpenBid.sol\\\";\\nimport \\\"../interfaces/IOfferBid.sol\\\";\\nimport \\\"./Storage.sol\\\";\\n\\n/// @title SpaceManager - manages ad spaces.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\nabstract contract SpaceManager is NameAccessor, Storage {\\n\\t// function _newSpace(string memory spaceMetadata) internal virtual {\\n\\t// \\trequire(!_adPool().spaced(spaceMetadata), \\\"KD100\\\");\\n\\t// \\t_adPool().addSpace(spaceMetadata);\\n\\t// \\t_eventEmitter().emitNewSpace(spaceMetadata);\\n\\t// }\\n\\n\\t/**\\n\\t * Accessors\\n\\t */\\n\\tfunction _mediaRegistry() internal view virtual returns (IMediaRegistry) {\\n\\t\\treturn IMediaRegistry(mediaRegistryAddress());\\n\\t}\\n\\n\\tfunction _adPool() internal view virtual returns (IAdPool) {\\n\\t\\treturn IAdPool(adPoolAddress());\\n\\t}\\n\\n\\tfunction _eventEmitter() internal view virtual returns (IEventEmitter) {\\n\\t\\treturn IEventEmitter(eventEmitterAddress());\\n\\t}\\n\\n\\tfunction _english() internal view virtual returns (IEnglishAuction) {\\n\\t\\treturn IEnglishAuction(englishAuctionAddress());\\n\\t}\\n\\n\\tfunction _openBid() internal view virtual returns (IOpenBid) {\\n\\t\\treturn IOpenBid(openBidAddress());\\n\\t}\\n\\n\\tfunction _offerBid() internal view virtual returns (IOfferBid) {\\n\\t\\treturn IOfferBid(offerBidAddress());\\n\\t}\\n}\\n\",\"keccak256\":\"0x9477f0dd0b2503c19cebe224b243a20e0a0c6e04194986fd2a57351c33a1f26d\",\"license\":\"UNLICENSED\"},\"contracts/base/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../libraries/Ad.sol\\\";\\nimport \\\"../libraries/Sale.sol\\\";\\nimport \\\"../libraries/Draft.sol\\\";\\n\\n/// @title Storage - saves state values. Note that the order of the state values\\n///                  should not be reordered when upgrading because the slot would be shifted.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\nabstract contract Storage {\\n\\t/// @dev Temporal amount that is deposited by bid or offered.\\n\\tuint256 internal _processingTotal;\\n\\n\\t/// @dev Maps a tokenId with the proposal content.\\n\\tmapping(uint256 => Draft.Proposal) public proposed;\\n\\n\\t/// @dev Maps a tokenId with denied reasons.\\n\\tmapping(uint256 => Draft.Denied[]) public deniedReasons;\\n\\n\\t/// @dev Maps a tokenId with the content metadata.\\n\\tmapping(uint256 => string) public accepted;\\n}\\n\",\"keccak256\":\"0xc6ec69a84ab85755a2df07781a95dea22e8bce24aa418a7a4129e810c8f37912\",\"license\":\"UNLICENSED\"},\"contracts/common/BlockTimestamp.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\n/// @title BlockTimestamp - gets a block timestamp.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\nabstract contract BlockTimestamp {\\n\\t/// @dev Method that exists purely to be overridden for tests\\n\\tfunction _blockTimestamp() internal view virtual returns (uint256) {\\n\\t\\treturn block.timestamp;\\n\\t}\\n}\\n\",\"keccak256\":\"0x417bf100ecc94b19a01559e899f68e19777eae593c783d8280d13bcabc8e43a2\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IAdPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../libraries/Ad.sol\\\";\\nimport \\\"../libraries/Sale.sol\\\";\\n\\n/// @title IAdPool - stores all ads accorss every space.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface IAdPool {\\n\\tfunction allPeriods(uint256 tokenId) external view returns (Ad.Period memory);\\n\\n\\tfunction spaced(string memory spaceMetadata) external view returns (bool);\\n\\n\\tfunction addSpace(string memory spaceMetadata) external;\\n\\n\\tfunction addPeriod(\\n\\t\\taddress proxy,\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tstring memory tokenMetadata,\\n\\t\\tuint256 saleEndTimestamp,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\tAd.Pricing pricing,\\n\\t\\tuint256 minPrice\\n\\t) external returns (uint256);\\n\\n\\tfunction deletePeriod(uint256 tokenId) external;\\n\\n\\tfunction sold(uint256 tokenId) external;\\n\\n\\tfunction acceptOffer(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory tokenMetadata,\\n\\t\\tSale.Offer memory offer\\n\\t) external;\\n\\n\\tfunction mediaProxyOf(uint256 tokenId) external view returns (address);\\n\\n\\tfunction displayStart(uint256 tokenId) external view returns (uint256);\\n\\n\\tfunction displayEnd(uint256 tokenId) external view returns (uint256);\\n\\n\\tfunction tokenIdsOf(string memory spaceMetadata)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x9db94679b25b0afc4b4b94048dd2d040fd466be2024d8849d9d1d6b667dd9b1f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n\\t/**\\n\\t * @dev Returns true if this contract implements the interface defined by\\n\\t * `interfaceId`. See the corresponding\\n\\t * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n\\t * to learn more about how these ids are created.\\n\\t *\\n\\t * This function call must use less than 30 000 gas.\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x47fb51ba47a6f1dd885afda05a6d11d7f6bb24d594dbfaa4411c5185c202265e\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n\\t/**\\n\\t * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n\\t */\\n\\tevent Transfer(\\n\\t\\taddress indexed from,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 indexed tokenId\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n\\t */\\n\\tevent Approval(\\n\\t\\taddress indexed owner,\\n\\t\\taddress indexed approved,\\n\\t\\tuint256 indexed tokenId\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n\\t */\\n\\tevent ApprovalForAll(\\n\\t\\taddress indexed owner,\\n\\t\\taddress indexed operator,\\n\\t\\tbool approved\\n\\t);\\n\\n\\t/**\\n\\t * @dev Returns the number of tokens in ``owner``'s account.\\n\\t */\\n\\tfunction balanceOf(address owner) external view returns (uint256 balance);\\n\\n\\t/**\\n\\t * @dev Returns the owner of the `tokenId` token.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must exist.\\n\\t */\\n\\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n\\t/**\\n\\t * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n\\t * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `from` cannot be the zero address.\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must exist and be owned by `from`.\\n\\t * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Transfers `tokenId` token from `from` to `to`.\\n\\t *\\n\\t * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `from` cannot be the zero address.\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must be owned by `from`.\\n\\t * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n\\t * The approval is cleared when the token is transferred.\\n\\t *\\n\\t * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The caller must own the token or be an approved operator.\\n\\t * - `tokenId` must exist.\\n\\t *\\n\\t * Emits an {Approval} event.\\n\\t */\\n\\tfunction approve(address to, uint256 tokenId) external;\\n\\n\\t/**\\n\\t * @dev Returns the account approved for `tokenId` token.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must exist.\\n\\t */\\n\\tfunction getApproved(uint256 tokenId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (address operator);\\n\\n\\t/**\\n\\t * @dev Approve or remove `operator` as an operator for the caller.\\n\\t * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The `operator` cannot be the caller.\\n\\t *\\n\\t * Emits an {ApprovalForAll} event.\\n\\t */\\n\\tfunction setApprovalForAll(address operator, bool _approved) external;\\n\\n\\t/**\\n\\t * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n\\t *\\n\\t * See {setApprovalForAll}\\n\\t */\\n\\tfunction isApprovedForAll(address owner, address operator)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (bool);\\n\\n\\t/**\\n\\t * @dev Safely transfers `tokenId` token from `from` to `to`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `from` cannot be the zero address.\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must exist and be owned by `from`.\\n\\t * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes calldata data\\n\\t) external;\\n}\\n\",\"keccak256\":\"0x40ec6e28a9bb9cd5ffb08f4c1c4b54b61d8789be10153318a6c9418f25305f5a\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\t/**\\n\\t * @dev Returns the total amount of tokens stored by the contract.\\n\\t */\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n\\t * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n\\t */\\n\\tfunction tokenOfOwnerByIndex(address owner, uint256 index)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256 tokenId);\\n\\n\\t/**\\n\\t * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n\\t * Use along with {totalSupply} to enumerate all tokens.\\n\\t */\\n\\tfunction tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc09ef36867349fb40ae5ab24846feeeb1028b2f21b1f021f45c3a094eb685566\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\t/**\\n\\t * @dev Returns the token collection name.\\n\\t */\\n\\tfunction name() external view returns (string memory);\\n\\n\\t/**\\n\\t * @dev Returns the token collection symbol.\\n\\t */\\n\\tfunction symbol() external view returns (string memory);\\n\\n\\t/**\\n\\t * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n\\t */\\n\\tfunction tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6976b834147423dc07cf721d8bb7eaa1951d5f846e7c66f516959168cdbcb915\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n\\t/**\\n\\t * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n\\t * by `operator` from `from`, this function is called.\\n\\t *\\n\\t * It must return its Solidity selector to confirm the token transfer.\\n\\t * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n\\t *\\n\\t * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n\\t */\\n\\tfunction onERC721Received(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes calldata data\\n\\t) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x50af35c8123738f546a52aaa20d00a751d27337697cde9d2f7fbb991825b1dc7\",\"license\":\"MIT\"},\"contracts/interfaces/IEnglishAuction.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../libraries/Sale.sol\\\";\\n\\n/// @title IEnglishAuction\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface IEnglishAuction {\\n\\tfunction bid(\\n\\t\\tuint256 tokenId,\\n\\t\\taddress sender,\\n\\t\\tuint256 amount\\n\\t) external;\\n\\n\\tfunction receiveToken(uint256 tokenId) external returns (address, uint256);\\n\\n\\tfunction bidding(uint256 tokenId) external view returns (Sale.Bidding memory);\\n\\n\\tfunction currentPrice(uint256 tokenId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x886e11338d2034f24fc592c247d028009c3e032202d23b76b5b741c07846a3f8\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IEventEmitter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../libraries/Ad.sol\\\";\\n\\n/// @title IEventEmitter - emits events.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface IEventEmitter {\\n\\tfunction emitNewSpace(string memory metadata) external;\\n\\n\\tfunction emitNewPeriod(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tstring memory tokenMetadata,\\n\\t\\tuint256 saleStartTimestamp,\\n\\t\\tuint256 saleEndTimestamp,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\tAd.Pricing pricing,\\n\\t\\tuint256 minPrice\\n\\t) external;\\n\\n\\tfunction emitDeletePeriod(uint256 tokenId) external;\\n\\n\\tfunction emitBuy(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 msgValue,\\n\\t\\taddress msgSender,\\n\\t\\tuint256 blockTimestamp\\n\\t) external;\\n\\n\\tfunction emitBid(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 msgValue,\\n\\t\\taddress msgSender,\\n\\t\\tuint256 blockTimestamp\\n\\t) external;\\n\\n\\tfunction emitBidWithProposal(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 msgValue,\\n\\t\\taddress msgSender,\\n\\t\\tstring memory metadata,\\n\\t\\tuint256 blockTimestamp\\n\\t) external;\\n\\n\\tfunction emitSelectProposal(uint256 tokenId, address successfulBidder)\\n\\t\\texternal;\\n\\n\\tfunction emitReceiveToken(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 price,\\n\\t\\taddress buyer,\\n\\t\\tuint256 blockTimestamp\\n\\t) external;\\n\\n\\tfunction emitOfferPeriod(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\taddress sender,\\n\\t\\tuint256 price\\n\\t) external;\\n\\n\\tfunction emitCancelOffer(uint256 tokenId) external;\\n\\n\\tfunction emitAcceptOffer(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tstring memory tokenMetadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\tuint256 price\\n\\t) external;\\n\\n\\tfunction emitWithdraw(uint256 amount) external;\\n\\n\\tfunction emitPropose(uint256 tokenId, string memory metadata) external;\\n\\n\\tfunction emitAcceptProposal(uint256 tokenId, string memory metadata) external;\\n\\n\\tfunction emitDenyProposal(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory metadata,\\n\\t\\tstring memory reason,\\n\\t\\tbool offensive\\n\\t) external;\\n\\n\\tfunction emitTransferCustom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) external;\\n\\n\\tfunction emitNewMedia(\\n\\t\\taddress proxy,\\n\\t\\taddress mediaEOA,\\n\\t\\tstring memory applicationMetadata,\\n\\t\\tstring memory updatableMetadata,\\n\\t\\tuint256 saltNonce\\n\\t) external;\\n\\n\\tfunction emitUpdateMedia(\\n\\t\\taddress proxy,\\n\\t\\taddress mediaEOA,\\n\\t\\tstring memory accountMetadata\\n\\t) external;\\n\\n\\tfunction emitPaymentFailure(address receiver, uint256 price) external;\\n\\n\\tfunction emitReceived(address receiver, uint256 price) external;\\n}\\n\",\"keccak256\":\"0xb8824b144c059b4b6ce8f7453a5f68fd420481e29b18a4d0e5f35fa163bc4e8a\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IMediaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../libraries/Ad.sol\\\";\\n\\n/// @title MediaRegistry - registers a list of media accounts.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface IMediaRegistry {\\n\\tstruct Account {\\n\\t\\taddress proxy;\\n\\t\\taddress mediaEOA;\\n\\t\\tstring applicationMetadata;\\n\\t\\tstring updatableMetadata;\\n\\t}\\n\\n\\tfunction allAccounts(address proxy)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\taddress,\\n\\t\\t\\taddress,\\n\\t\\t\\tstring memory,\\n\\t\\t\\tstring memory\\n\\t\\t);\\n\\n\\t/// @dev Adds media account.\\n\\t/// @param proxy address of the proxy contract\\n\\t/// @param applicationMetadata string of constant metadata for the defailts of the account\\n\\t/// @param updatableMetadata string of constant metadata for the defailts of the account\\n\\t/// @param mediaEOA address of the media account\\n\\tfunction addMedia(\\n\\t\\taddress proxy,\\n\\t\\tstring memory applicationMetadata,\\n\\t\\tstring memory updatableMetadata,\\n\\t\\taddress mediaEOA\\n\\t) external;\\n\\n\\t/// @dev Updates media account.\\n\\t/// @param metadata string of the account metadata\\n\\t/// @param mediaEOA address of the media account\\n\\tfunction updateMedia(address mediaEOA, string memory metadata) external;\\n\\n\\tfunction updateApplicationMetadata(address proxy, string memory metadata)\\n\\t\\texternal;\\n\\n\\t/// @dev Returns whether the account has created or not.\\n\\t/// @param proxy address of the proxy contract that represents an account.\\n\\tfunction created(address proxy) external view returns (bool);\\n\\n\\t/// @dev Returns the owner of the account.\\n\\t/// @param proxy address of the proxy contract that represents an account.\\n\\tfunction ownerOf(address proxy) external view returns (address);\\n}\\n\",\"keccak256\":\"0x63655aa8531480b3da0c4b3f6cd63d72c3ca678661fa52dd90e5ab1a89b43131\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/INameRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\n/// @title INameRegistry - saves a set of addresses used in the system.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface INameRegistry {\\n\\t/// @dev Sets the address associated with the key name.\\n\\t///      If the address is the contract, not an EOA, it is\\n\\t///      saved as the allowed contract list.\\n\\t/// @param key bytes32 of the key\\n\\t/// @param value address of the value\\n\\tfunction set(bytes32 key, address value) external;\\n\\n\\t/// @dev Gets the address associated with the key name.\\n\\t/// @param key bytes32 of the key\\n\\tfunction get(bytes32 key) external view returns (address);\\n\\n\\t/// @dev Returns whether or not the address is the one that we deployed.\\n\\t/// @param caller address of the msg.sender\\n\\tfunction allowedContracts(address caller) external returns (bool);\\n\\n\\t/// @dev Gets the deployer of NameRegistry.\\n\\tfunction deployer() external view returns (address);\\n}\\n\",\"keccak256\":\"0xb4612b34aa95a45ed84877f60adc23f5f8eb941a00a2644dc29ecea26c1c032f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOfferBid.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../libraries/Sale.sol\\\";\\n\\n/// @title IOfferBid\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface IOfferBid {\\n\\tfunction offer(\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\taddress sender,\\n\\t\\tuint256 value\\n\\t) external returns (uint256);\\n\\n\\tfunction cancel(uint256 tokenId, address sender) external;\\n\\n\\tfunction accept(uint256 tokenId, string memory tokenMetadata)\\n\\t\\texternal\\n\\t\\treturns (address, uint256);\\n\\n\\tfunction currentPrice(uint256 tokenId) external view returns (uint256);\\n\\n\\tfunction offered(uint256 tokenId) external view returns (Sale.Offer memory);\\n}\\n\",\"keccak256\":\"0x5d71c920c81c5e6954d99d62f16b99bd712c89e029aadf095fcaed960c5393c0\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOpenBid.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../libraries/Sale.sol\\\";\\n\\n/// @title IOpenBid\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface IOpenBid {\\n\\tfunction bid(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory proposal,\\n\\t\\taddress sender,\\n\\t\\tuint256 amount\\n\\t) external;\\n\\n\\tfunction biddingList(uint256 tokenId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (Sale.OpenBid[] memory);\\n\\n\\tfunction bidding(uint256 tokenId, uint256 index)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (Sale.OpenBid memory);\\n\\n\\tfunction selectProposal(uint256 tokenId, uint256 index)\\n\\t\\texternal\\n\\t\\treturns (address successfulBidder);\\n}\\n\",\"keccak256\":\"0x31cdf36b1aa003150d3d4142f7cbb7cb1796300ea394534281d22cbf01ce4ecf\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Ad.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nlibrary Ad {\\n\\tuint256 private constant _ID_LENGTH = 100000000000000000000000000000000;\\n\\t// 0.RRP     : Recommended Retail Price\\n\\t// 1.DUTCH   : Dutch Auction\\n\\t// 2.ENGLISH : English Acction\\n\\t// 3.OFFER   : Offered by Others\\n\\t// 4.OPEN    : Open Bid by revealing the content\\n\\tenum Pricing {\\n\\t\\tRRP,\\n\\t\\tDUTCH,\\n\\t\\tENGLISH,\\n\\t\\tOFFER,\\n\\t\\tOPEN\\n\\t}\\n\\tstruct Period {\\n\\t\\taddress mediaProxy;\\n\\t\\tstring spaceMetadata;\\n\\t\\tstring tokenMetadata;\\n\\t\\tuint256 saleStartTimestamp;\\n\\t\\tuint256 saleEndTimestamp;\\n\\t\\tuint256 displayStartTimestamp;\\n\\t\\tuint256 displayEndTimestamp;\\n\\t\\tPricing pricing;\\n\\t\\tuint256 minPrice;\\n\\t\\tuint256 startPrice;\\n\\t\\tbool sold;\\n\\t}\\n\\n\\tfunction id(\\n\\t\\tstring memory metadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp\\n\\t) public pure returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\tuint256(\\n\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\tabi.encodePacked(metadata, displayStartTimestamp, displayEndTimestamp)\\n\\t\\t\\t\\t)\\n\\t\\t\\t) % _ID_LENGTH;\\n\\t}\\n}\\n\",\"keccak256\":\"0x98b8f7d36adbd4e0b75ef9c5a0ec7045e0661b9015a90beffa30004f35ff7039\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Draft.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nlibrary Draft {\\n\\tstruct Denied {\\n\\t\\tstring reason;\\n\\t\\tbool offensive;\\n\\t}\\n\\tstruct Proposal {\\n\\t\\tstring content;\\n\\t\\taddress proposer;\\n\\t}\\n}\\n\",\"keccak256\":\"0x73a65000bc31e3160bb4919408b5b3d5be6151f98672f7f1d82aa6c8df7127fc\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Purchase.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"./Ad.sol\\\";\\n\\nlibrary Purchase {\\n\\tfunction checkBeforeBuy(Ad.Period memory period) external view {\\n\\t\\trequire(period.pricing == Ad.Pricing.RRP, \\\"KD120\\\");\\n\\t\\trequire(!period.sold, \\\"KD121\\\");\\n\\t\\trequire(period.minPrice == msg.value, \\\"KD122\\\");\\n\\t}\\n\\n\\tfunction checkBeforeBuyBasedOnTime(\\n\\t\\tAd.Period memory period,\\n\\t\\tuint256 currentPrice\\n\\t) external view {\\n\\t\\trequire(period.pricing == Ad.Pricing.DUTCH, \\\"KD123\\\");\\n\\t\\trequire(!period.sold, \\\"KD121\\\");\\n\\t\\trequire(currentPrice <= msg.value, \\\"KD122\\\");\\n\\t}\\n\\n\\tfunction checkBeforeBid(\\n\\t\\tAd.Period memory period,\\n\\t\\tuint256 currentPrice,\\n\\t\\tuint256 blockTimestamp\\n\\t) external view {\\n\\t\\trequire(period.pricing == Ad.Pricing.ENGLISH, \\\"KD124\\\");\\n\\t\\trequire(!period.sold, \\\"KD121\\\");\\n\\t\\trequire(currentPrice < msg.value, \\\"KD122\\\");\\n\\t\\trequire(period.saleEndTimestamp >= blockTimestamp, \\\"KD129\\\");\\n\\t}\\n\\n\\tfunction checkBeforeBidWithProposal(\\n\\t\\tAd.Period memory period,\\n\\t\\tuint256 blockTimestamp\\n\\t) external view {\\n\\t\\trequire(period.pricing == Ad.Pricing.OPEN, \\\"KD127\\\");\\n\\t\\trequire(!period.sold, \\\"KD121\\\");\\n\\t\\trequire(period.minPrice <= msg.value, \\\"KD122\\\");\\n\\t\\trequire(period.saleEndTimestamp >= blockTimestamp, \\\"KD129\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0x75b504f12f93fbb1be78980dad98029366c4947118eea0f232680b3c5c35123a\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Sale.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"./Ad.sol\\\";\\n\\nlibrary Sale {\\n\\tstruct Bidding {\\n\\t\\tuint256 tokenId;\\n\\t\\taddress bidder;\\n\\t\\tuint256 price;\\n\\t}\\n\\tstruct Offer {\\n\\t\\tstring spaceMetadata;\\n\\t\\tuint256 displayStartTimestamp;\\n\\t\\tuint256 displayEndTimestamp;\\n\\t\\taddress sender;\\n\\t\\tuint256 price;\\n\\t}\\n\\tstruct OpenBid {\\n\\t\\tuint256 tokenId;\\n\\t\\taddress sender;\\n\\t\\tuint256 price;\\n\\t\\tstring content;\\n\\t}\\n\\n\\tfunction startPrice(Ad.Period memory period) internal pure returns (uint256) {\\n\\t\\tif (period.pricing == Ad.Pricing.RRP) {\\n\\t\\t\\treturn period.minPrice;\\n\\t\\t} else if (period.pricing == Ad.Pricing.DUTCH) {\\n\\t\\t\\treturn period.minPrice * 10;\\n\\t\\t} else if (period.pricing == Ad.Pricing.ENGLISH) {\\n\\t\\t\\treturn period.minPrice;\\n\\t\\t} else if (period.pricing == Ad.Pricing.OFFER) {\\n\\t\\t\\treturn period.minPrice;\\n\\t\\t} else if (period.pricing == Ad.Pricing.OPEN) {\\n\\t\\t\\treturn period.minPrice;\\n\\t\\t} else {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xca0cdc93d02c3a99fecd2c6166f58afd44a84fd03e0821737f2a36181706fc08\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001601155615e6e80620000266000396000f3fe60806040526004361061025a5760003560e01c80630106d8eb1461025f57806301ffc9a71461028a57806306fdde03146102ba578063077f224a146102dc578063081812fc146102fe578063095ea7b31461031e57806313c1f2781461033e578063179bcff71461035e57806318160ddd1461037e5780631daf7ff91461039d5780632231c1eb146103b057806323b872dd146103c557806327b7a2f5146103e55780632bc4bc68146104035780632f745c591461042357806332b18f6d1461044357806337df00c9146104635780633ccfd60b1461048357806342842e0e14610498578063430bf08a146104b8578063444115f6146104cd578063454a2ab3146104ed5780634b455a51146105005780634f6ccce71461052057806353c147761461054057806358ba1bb81461056e57806360c5cc3a1461059c5780636352211e146105bc57806365d13a90146105dc5780636a58767e1461060a57806370a082311461061f5780637a3c4c171461063f5780637ccacd491461065f5780637cf175fb14610672578063899c9989146106875780638da5cb5b146106a75780638f6059d6146106bc57806393525d39146106d157806395d89b41146106f1578063a22cb46514610706578063b69ef8a814610726578063b88d4fde14610739578063c531c23614610759578063c87b56dd14610779578063c9cd71b514610799578063d4f6b5ec146107ae578063d8680069146107ce578063d96a094a146107e1578063e6e268f4146107f4578063e985e9c514610809578063ef706adf14610829578063f072629114610849578063f19b82731461085e575b600080fd5b34801561026b57600080fd5b5061027461087e565b6040516102819190614c3a565b60405180910390f35b34801561029657600080fd5b506102aa6102a5366004614c64565b61093b565b6040519015158152602001610281565b3480156102c657600080fd5b506102cf610972565b6040516102819190614cd9565b3480156102e857600080fd5b506102fc6102f7366004614e39565b610a04565b005b34801561030a57600080fd5b50610274610319366004614eb0565b610a87565b34801561032a57600080fd5b506102fc610339366004614ec9565b610b14565b34801561034a57600080fd5b506102fc610359366004614f03565b610c20565b34801561036a57600080fd5b506102fc610379366004614f52565b610e60565b34801561038a57600080fd5b50600a545b604051908152602001610281565b6102fc6103ab366004614fa1565b610fde565b3480156103bc57600080fd5b50610274611133565b3480156103d157600080fd5b506102fc6103e0366004614fee565b611164565b3480156103f157600080fd5b50600c546001600160a01b0316610274565b34801561040f57600080fd5b506102fc61041e36600461502f565b6111dd565b34801561042f57600080fd5b5061038f61043e366004614ec9565b6112ef565b34801561044f57600080fd5b506102fc61045e366004615063565b611385565b34801561046f57600080fd5b506102fc61047e366004614eb0565b611509565b34801561048f57600080fd5b506102fc6115e0565b3480156104a457600080fd5b506102fc6104b3366004614fee565b611757565b3480156104c457600080fd5b50610274611762565b3480156104d957600080fd5b506102fc6104e8366004615085565b611791565b6102fc6104fb366004614eb0565b611936565b34801561050c57600080fd5b506102fc61051b366004614eb0565b611bac565b34801561052c57600080fd5b5061038f61053b366004614eb0565b611e37565b34801561054c57600080fd5b5061056061055b36600461502f565b611eca565b6040516102819291906150b5565b34801561057a57600080fd5b5061058e610589366004614eb0565b612158565b6040516102819291906150d7565b3480156105a857600080fd5b506102fc6105b7366004614eb0565b612205565b3480156105c857600080fd5b506102746105d7366004614eb0565b61240b565b3480156105e857600080fd5b506105fc6105f7366004615063565b612440565b604051610281929190615101565b34801561061657600080fd5b5061027461250c565b34801561062b57600080fd5b5061038f61063a366004615125565b612543565b34801561064b57600080fd5b5061038f61065a366004614eb0565b6125ca565b6102fc61066d366004615085565b612827565b34801561067e57600080fd5b50610274612a77565b34801561069357600080fd5b506102fc6106a236600461514f565b612aa9565b3480156106b357600080fd5b50610274612c69565b3480156106c857600080fd5b50610274612cae565b3480156106dd57600080fd5b506102fc6106ec366004614eb0565b612ce4565b3480156106fd57600080fd5b506102cf612e23565b34801561071257600080fd5b506102fc6107213660046151ed565b612e32565b34801561073257600080fd5b504761038f565b34801561074557600080fd5b506102fc610754366004615226565b612ef3565b34801561076557600080fd5b5061038f610774366004614fa1565b612f2b565b34801561078557600080fd5b506102cf610794366004614eb0565b612fc1565b3480156107a557600080fd5b5061027461311d565b3480156107ba57600080fd5b506102fc6107c9366004615085565b61314d565b6102fc6107dc366004614eb0565b6131bc565b6102fc6107ef366004614eb0565b61348c565b34801561080057600080fd5b5061038f6135f6565b34801561081557600080fd5b506102aa6108243660046152a5565b613606565b34801561083557600080fd5b506102fc610844366004614eb0565b613634565b34801561085557600080fd5b50610274613771565b34801561086a57600080fd5b506102cf610879366004614eb0565b6137a7565b600c546040516d22b733b634b9b420bab1ba34b7b760911b60208201526000916001600160a01b031690638eaa6ac090602e015b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016108e691815260200190565b60206040518083038186803b1580156108fe57600080fd5b505afa158015610912573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093691906152e3565b905090565b60006001600160e01b031982166380ac58cd60e01b148061096c57506001600160e01b03198216635b5e139f60e01b145b92915050565b60606000805461098190615300565b80601f01602080910402602001604051908101604052809291908181526020018280546109ad90615300565b80156109fa5780601f106109cf576101008083540402835291602001916109fa565b820191906000526020600020905b8154815290600101906020018083116109dd57829003601f168201915b5050505050905090565b8251610a17906000906020860190614ba1565b5082604051602001610a29919061533b565b60405160208183030381529060405260019080519060200190610a4d929190614ba1565b508151610a61906002906020850190614ba1565b50600c80546001600160a01b0319166001600160a01b038316179055505050565b505050565b6000610a9282613841565b610af85760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600660205260409020546001600160a01b031690565b6000610b1f8261240b565b9050806001600160a01b0316836001600160a01b03161415610b8d5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610aef565b336001600160a01b0382161480610ba95750610ba98133613606565b610c165760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b6064820152608401610aef565b610a82838361385e565b33610c296138cc565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401610c549190614c3a565b60206040518083038186803b158015610c6c57600080fd5b505afa158015610c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca491906152e3565b6001600160a01b031614610cca5760405162461bcd60e51b8152600401610aef9061536b565b6000838152600e602052604081208054610ce390615300565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0f90615300565b8015610d5c5780601f10610d3157610100808354040283529160200191610d5c565b820191906000526020600020905b815481529060010190602001808311610d3f57829003601f168201915b50505050509050805160001415610d855760405162461bcd60e51b8152600401610aef9061538a565b6000848152600f6020908152604080832081518083019092528682528515158284015280546001810182559084529282902081518051929460020290910192610dd392849290910190614ba1565b50602091909101516001909101805460ff1916911515919091179055610df76138d6565b6001600160a01b0316633ebf7371858386866040518563ffffffff1660e01b8152600401610e2894939291906153a9565b600060405180830381600087803b158015610e4257600080fd5b505af1158015610e56573d6000803e3d6000fd5b5050505050505050565b33610e696138cc565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401610e949190614c3a565b60206040518083038186803b158015610eac57600080fd5b505afa158015610ec0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee491906152e3565b6001600160a01b031614610f0a5760405162461bcd60e51b8152600401610aef9061536b565b610f126138cc565b6001600160a01b031663179bcff783836040518363ffffffff1660e01b8152600401610f3f9291906153e8565b600060405180830381600087803b158015610f5957600080fd5b505af1158015610f6d573d6000803e3d6000fd5b50505050610f796138d6565b6001600160a01b031663262360133084846040518463ffffffff1660e01b8152600401610fa89392919061540c565b600060405180830381600087803b158015610fc257600080fd5b505af1158015610fd6573d6000803e3d6000fd5b505050505050565b33610fe76138cc565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016110129190614c3a565b60206040518083038186803b15801561102a57600080fd5b505afa15801561103e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106291906152e3565b6001600160a01b031614156110895760405162461bcd60e51b8152600401610aef90615441565b6110916138e0565b6001600160a01b031663171a133d84848433346040518663ffffffff1660e01b81526004016110c4959493929190615460565b602060405180830381600087803b1580156110de57600080fd5b505af11580156110f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111691906154a0565b5034600d600082825461112991906154cf565b9091555050505050565b600c546040516613dc195b909a5960ca1b60208201526000916001600160a01b031690638eaa6ac0906027016108b2565b61116f8383836138ea565b6111776138d6565b6001600160a01b031663465bcf058484846040518463ffffffff1660e01b81526004016111a6939291906154e7565b600060405180830381600087803b1580156111c057600080fd5b505af11580156111d4573d6000803e3d6000fd5b50505050505050565b336111e66138cc565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016112119190614c3a565b60206040518083038186803b15801561122957600080fd5b505afa15801561123d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126191906152e3565b6001600160a01b0316146112875760405162461bcd60e51b8152600401610aef9061536b565b61128f61391b565b6001600160a01b031663b8926f2c826040518263ffffffff1660e01b81526004016112ba9190614cd9565b600060405180830381600087803b1580156112d457600080fd5b505af11580156112e8573d6000803e3d6000fd5b5050505050565b60006112fa83612543565b821061135c5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610aef565b506001600160a01b03919091166000908152600860209081526040808320938352929052205490565b3361138e6138cc565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016113b99190614c3a565b60206040518083038186803b1580156113d157600080fd5b505afa1580156113e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140991906152e3565b6001600160a01b03161461142f5760405162461bcd60e51b8152600401610aef9061536b565b6114398282613925565b6000611443613b05565b6040516332b18f6d60e01b815260048101859052602481018490526001600160a01b0391909116906332b18f6d90604401602060405180830381600087803b15801561148e57600080fd5b505af11580156114a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c691906152e3565b90506114d28184613b0f565b6114da6138d6565b6001600160a01b031663465bcf053083866040518463ffffffff1660e01b81526004016111a6939291906154e7565b8033611513613b1a565b6001600160a01b031663cc889b0b836040518263ffffffff1660e01b815260040161154091815260200190565b60606040518083038186803b15801561155857600080fd5b505afa15801561156c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611590919061550b565b602001516001600160a01b0316146115d25760405162461bcd60e51b815260206004820152600560248201526425a218991b60d91b6044820152606401610aef565b6115dc8233613b24565b5050565b336115e96138cc565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016116149190614c3a565b60206040518083038186803b15801561162c57600080fd5b505afa158015611640573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166491906152e3565b6001600160a01b03161461168a5760405162461bcd60e51b8152600401610aef9061536b565b60006116946135f6565b604051909150600090339061271090849084818181858888f193505050503d80600081146116de576040519150601f19603f3d011682016040523d82523d6000602084013e6116e3565b606091505b505090508015611722576116f56138d6565b6001600160a01b031663279862cb836040518263ffffffff1660e01b8152600401610fa891815260200190565b61172a6138d6565b6001600160a01b031663ec720b9b33846040518363ffffffff1660e01b8152600401610fa892919061556c565b61116f838383613c7f565b600c546040516415985d5b1d60da1b60208201526000916001600160a01b031690638eaa6ac0906025016108b2565b3361179a6138cc565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016117c59190614c3a565b60206040518083038186803b1580156117dd57600080fd5b505afa1580156117f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181591906152e3565b6001600160a01b03161461183b5760405162461bcd60e51b8152600401610aef9061536b565b6000806118466138e0565b6001600160a01b0316633d243e8b85856040518363ffffffff1660e01b8152600401611873929190615585565b6040805180830381600087803b15801561188c57600080fd5b505af11580156118a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c4919061559e565b915091506118d3828585613c9a565b6118e66118e1600a836155cc565b613cc3565b80600d60008282546118f891906155ee565b9091555061190690506138d6565b6001600160a01b031663465bcf05600030876040518463ffffffff1660e01b8152600401610e28939291906154e7565b3361193f6138cc565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b815260040161196a9190614c3a565b60206040518083038186803b15801561198257600080fd5b505afa158015611996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ba91906152e3565b6001600160a01b031614156119e15760405162461bcd60e51b8152600401610aef90615441565b60026011541415611a045760405162461bcd60e51b8152600401610aef90615605565b600260115573570aa59a67aE825a0acDfC0deD3e919E1c73666B639e8e66da611a2b61391b565b6001600160a01b031663b3a0ebc9846040518263ffffffff1660e01b8152600401611a5891815260200190565b60006040518083038186803b158015611a7057600080fd5b505afa158015611a84573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611aac9190810190615697565b611ab5846125ca565b426040518463ffffffff1660e01b8152600401611ad493929190615882565b60006040518083038186803b158015611aec57600080fd5b505af4158015611b00573d6000803e3d6000fd5b505050506000611b0f82613d64565b9050611b19613b1a565b60405163c0f4ed3160e01b8152600481018490523360248201523460448201526001600160a01b03919091169063c0f4ed3190606401600060405180830381600087803b158015611b6957600080fd5b505af1158015611b7d573d6000803e3d6000fd5b505050508034611b8d91906155ee565b600d6000828254611b9e91906154cf565b909155505060016011555050565b33611bb56138cc565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401611be09190614c3a565b60206040518083038186803b158015611bf857600080fd5b505afa158015611c0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3091906152e3565b6001600160a01b031614611c565760405162461bcd60e51b8152600401610aef9061536b565b6000611c6061391b565b6001600160a01b031663b3a0ebc9836040518263ffffffff1660e01b8152600401611c8d91815260200190565b60006040518083038186803b158015611ca557600080fd5b505afa158015611cb9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ce19190810190615697565b516001600160a01b03161415611d095760405162461bcd60e51b8152600401610aef906158a7565b30611d138261240b565b6001600160a01b031614611d515760405162461bcd60e51b81526020600482015260056024820152644b4431323160d81b6044820152606401610aef565b611d5a81613f99565b15611d8f5760405162461bcd60e51b8152602060048201526005602482015264096886264760db1b6044820152606401610aef565b611d98816140c8565b611da061391b565b6001600160a01b0316634b455a51826040518263ffffffff1660e01b8152600401611dcd91815260200190565b600060405180830381600087803b158015611de757600080fd5b505af1158015611dfb573d6000803e3d6000fd5b50505050611e076138d6565b6001600160a01b031663465bcf05306000846040518463ffffffff1660e01b81526004016112ba939291906154e7565b6000611e42600a5490565b8210611ea55760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610aef565b600a8281548110611eb857611eb86158c6565b90600052602060002001549050919050565b6060600080611ed761391b565b6001600160a01b031663d028bd66856040518263ffffffff1660e01b8152600401611f029190614cd9565b60006040518083038186803b158015611f1a57600080fd5b505afa158015611f2e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f5691908101906158ff565b905060005b815181101561213a57818181518110611f7657611f766158c6565b6020026020010151600014612128576000611f8f61391b565b6001600160a01b031663b3a0ebc9848481518110611faf57611faf6158c6565b60200260200101516040518263ffffffff1660e01b8152600401611fd591815260200190565b60006040518083038186803b158015611fed57600080fd5b505afa158015612001573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120299190810190615697565b9050428160a00151111580156120435750428160c0015110155b15612126576010600084848151811061205e5761205e6158c6565b60200260200101518152602001908152602001600020838381518110612086576120866158c6565b602002602001015181805461209a90615300565b80601f01602080910402602001604051908101604052809291908181526020018280546120c690615300565b80156121135780601f106120e857610100808354040283529160200191612113565b820191906000526020600020905b8154815290600101906020018083116120f657829003601f168201915b5050505050915094509450505050915091565b505b806121328161598f565b915050611f5b565b50600060405180602001604052806000815250909250925050915091565b600e6020526000908152604090208054819061217390615300565b80601f016020809104026020016040519081016040528092919081815260200182805461219f90615300565b80156121ec5780601f106121c1576101008083540402835291602001916121ec565b820191906000526020600020905b8154815290600101906020018083116121cf57829003601f168201915b505050600190930154919250506001600160a01b031682565b3361220e6138cc565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016122399190614c3a565b60206040518083038186803b15801561225157600080fd5b505afa158015612265573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228991906152e3565b6001600160a01b0316146122af5760405162461bcd60e51b8152600401610aef9061536b565b6000818152600e6020526040812080546122c890615300565b80601f01602080910402602001604051908101604052809291908181526020018280546122f490615300565b80156123415780601f1061231657610100808354040283529160200191612341565b820191906000526020600020905b81548152906001019060200180831161232457829003601f168201915b5050505050905080516000141561236a5760405162461bcd60e51b8152600401610aef9061538a565b6000828152600e60205260409020600101546001600160a01b031661238e8361240b565b6001600160a01b0316146123cc5760405162461bcd60e51b81526020600482015260056024820152644b4431333160d81b6044820152606401610aef565b6123d682826140f9565b6123de6138d6565b6001600160a01b031663746f1b2083836040518363ffffffff1660e01b8152600401610fa8929190615585565b6000818152600460205260408120546001600160a01b03168061096c5760405162461bcd60e51b8152600401610aef906158a7565b600f602052816000526040600020818154811061245c57600080fd5b90600052602060002090600202016000915091505080600001805461248090615300565b80601f01602080910402602001604051908101604052809291908181526020018280546124ac90615300565b80156124f95780601f106124ce576101008083540402835291602001916124f9565b820191906000526020600020905b8154815290600101906020018083116124dc57829003601f168201915b5050506001909301549192505060ff1682565b600c546040516c4d65646961526567697374727960981b60208201526000916001600160a01b031690638eaa6ac090602d016108b2565b60006001600160a01b0382166125ae5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610aef565b506001600160a01b031660009081526005602052604090205490565b6000806125d561391b565b6001600160a01b031663b3a0ebc9846040518263ffffffff1660e01b815260040161260291815260200190565b60006040518083038186803b15801561261a57600080fd5b505afa15801561262e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526126569190810190615697565b905060008160e0015160048111156126705761267061579e565b141561268157610100015192915050565b60018160e0015160048111156126995761269961579e565b141561270357806060015181608001516126b391906155ee565b60608201516126c290426155ee565b8261010001518361012001516126d891906155ee565b6126e291906159aa565b6126ec91906155cc565b8161012001516126fc91906155ee565b9392505050565b60028160e00151600481111561271b5761271b61579e565b14156127a657612729613b1a565b6001600160a01b0316637a3c4c17846040518263ffffffff1660e01b815260040161275691815260200190565b60206040518083038186803b15801561276e57600080fd5b505afa158015612782573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126fc91906154a0565b60038160e0015160048111156127be576127be61579e565b14156127cc576127296138e0565b60048160e0015160048111156127e4576127e461579e565b14156127f35750600092915050565b60405162461bcd60e51b81526020600482015260096024820152681b9bdd08195e1a5cdd60ba1b6044820152606401610aef565b336128306138cc565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b815260040161285b9190614c3a565b60206040518083038186803b15801561287357600080fd5b505afa158015612887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ab91906152e3565b6001600160a01b031614156128d25760405162461bcd60e51b8152600401610aef90615441565b600260115414156128f55760405162461bcd60e51b8152600401610aef90615605565b600260115573570aa59a67aE825a0acDfC0deD3e919E1c73666B63ca2652a861291c61391b565b6001600160a01b031663b3a0ebc9856040518263ffffffff1660e01b815260040161294991815260200190565b60006040518083038186803b15801561296157600080fd5b505afa158015612975573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261299d9190810190615697565b426040518363ffffffff1660e01b81526004016129bb9291906159c9565b60006040518083038186803b1580156129d357600080fd5b505af41580156129e7573d6000803e3d6000fd5b5050505034600d60008282546129fd91906154cf565b90915550612a0b9050613b05565b6001600160a01b031663389ad90e838333346040518563ffffffff1660e01b8152600401612a3c94939291906159dc565b600060405180830381600087803b158015612a5657600080fd5b505af1158015612a6a573d6000803e3d6000fd5b5050600160115550505050565b600c546040516713d999995c909a5960c21b60208201526000916001600160a01b031690638eaa6ac0906028016108b2565b33612ab26138cc565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401612add9190614c3a565b60206040518083038186803b158015612af557600080fd5b505afa158015612b09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b2d91906152e3565b6001600160a01b031614612b535760405162461bcd60e51b8152600401610aef9061536b565b6000612b5d61391b565b6001600160a01b031663e6851b98308a8a8a8a8a8a8a6040518963ffffffff1660e01b8152600401612b96989796959493929190615a11565b602060405180830381600087803b158015612bb057600080fd5b505af1158015612bc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612be891906154a0565b9050612bf5308289613c9a565b612bfd6138d6565b6001600160a01b031663465bcf05600030846040518463ffffffff1660e01b8152600401612c2d939291906154e7565b600060405180830381600087803b158015612c4757600080fd5b505af1158015612c5b573d6000803e3d6000fd5b505050505050505050505050565b600c5460408051631abe729160e31b815290516000926001600160a01b03169163d5f39488916004808301926020929190829003018186803b1580156108fe57600080fd5b600c546040516b4d65646961466163746f727960a01b60208201526000916001600160a01b031690638eaa6ac090602c016108b2565b33612ced6138cc565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401612d189190614c3a565b60206040518083038186803b158015612d3057600080fd5b505afa158015612d44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6891906152e3565b6001600160a01b031614612d8e5760405162461bcd60e51b8152600401610aef9061536b565b612e2081612d9a613b1a565b6001600160a01b031663cc889b0b846040518263ffffffff1660e01b8152600401612dc791815260200190565b60606040518083038186803b158015612ddf57600080fd5b505afa158015612df3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e17919061550b565b60200151613b24565b50565b60606001805461098190615300565b6001600160a01b038216331415612e875760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610aef565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b612efd3383614122565b612f195760405162461bcd60e51b8152600401610aef90615a7f565b612f25848484846141e4565b50505050565b6040516303fb4aab60e41b8152600090739F397D94EC32D43EeC60dCF9A38a44322D54d42A90633fb4aab090612f6990879087908790600401615ad0565b60206040518083038186803b158015612f8157600080fd5b505af4158015612f95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb991906154a0565b949350505050565b6060612fcc82613841565b6130305760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610aef565b60006002805461303f90615300565b9050116130e2576000828152600360205260409020805461305f90615300565b80601f016020809104026020016040519081016040528092919081815260200182805461308b90615300565b80156130d85780601f106130ad576101008083540402835291602001916130d8565b820191906000526020600020905b8154815290600101906020018083116130bb57829003601f168201915b505050505061096c565b600260036000848152602001908152602001600020604051602001613108929190615b7d565b60405160208183030381529060405292915050565b600c54604051651059141bdbdb60d21b60208201526000916001600160a01b031690638eaa6ac0906026016108b2565b336131578361240b565b6001600160a01b03161461317d5760405162461bcd60e51b8152600401610aef9061536b565b6131878282614217565b61318f6138d6565b6001600160a01b0316635bcefb5383836040518363ffffffff1660e01b8152600401610fa8929190615585565b336131c56138cc565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016131f09190614c3a565b60206040518083038186803b15801561320857600080fd5b505afa15801561321c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061324091906152e3565b6001600160a01b031614156132675760405162461bcd60e51b8152600401610aef90615441565b73570aa59a67aE825a0acDfC0deD3e919E1c73666B63b26502ff61328961391b565b6001600160a01b031663b3a0ebc9846040518263ffffffff1660e01b81526004016132b691815260200190565b60006040518083038186803b1580156132ce57600080fd5b505afa1580156132e2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261330a9190810190615697565b613313846125ca565b6040518363ffffffff1660e01b81526004016133309291906159c9565b60006040518083038186803b15801561334857600080fd5b505af415801561335c573d6000803e3d6000fd5b5050505061336861391b565b6001600160a01b0316639c03facb826040518263ffffffff1660e01b815260040161339591815260200190565b600060405180830381600087803b1580156133af57600080fd5b505af11580156133c3573d6000803e3d6000fd5b505050506133d13382613b0f565b6133df6118e1600a346155cc565b6133e76138d6565b604051635dd995b560e01b8152600481018390523460248201523360448201524260648201526001600160a01b039190911690635dd995b590608401600060405180830381600087803b15801561343d57600080fd5b505af1158015613451573d6000803e3d6000fd5b5050505061345d6138d6565b6001600160a01b031663465bcf053033846040518463ffffffff1660e01b81526004016112ba939291906154e7565b336134956138cc565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016134c09190614c3a565b60206040518083038186803b1580156134d857600080fd5b505afa1580156134ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061351091906152e3565b6001600160a01b031614156135375760405162461bcd60e51b8152600401610aef90615441565b73570aa59a67aE825a0acDfC0deD3e919E1c73666B63854d630061355961391b565b6001600160a01b031663b3a0ebc9846040518263ffffffff1660e01b815260040161358691815260200190565b60006040518083038186803b15801561359e57600080fd5b505afa1580156135b2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526135da9190810190615697565b6040518263ffffffff1660e01b81526004016133309190615b92565b6000600d544761093691906155ee565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b3361363d6138cc565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016136689190614c3a565b60206040518083038186803b15801561368057600080fd5b505afa158015613694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136b891906152e3565b6001600160a01b031614156136df5760405162461bcd60e51b8152600401610aef90615441565b60006136ea8261427d565b90506136f46138e0565b6040516315f5a0b160e21b8152600481018490523360248201526001600160a01b0391909116906357d682c490604401600060405180830381600087803b15801561373e57600080fd5b505af1158015613752573d6000803e3d6000fd5b5050505080600d600082825461376891906155ee565b90915550505050565b600c546040516b22bb32b73a22b6b4ba3a32b960a11b60208201526000916001600160a01b031690638eaa6ac090602c016108b2565b601060205260009081526040902080546137c090615300565b80601f01602080910402602001604051908101604052809291908181526020018280546137ec90615300565b80156138395780601f1061380e57610100808354040283529160200191613839565b820191906000526020600020905b81548152906001019060200180831161381c57829003601f168201915b505050505081565b6000908152600460205260409020546001600160a01b0316151590565b600081815260066020526040902080546001600160a01b0319166001600160a01b03841690811790915581906138938261240b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061093661250c565b6000610936613771565b6000610936612a77565b6138f43382614122565b6139105760405162461bcd60e51b8152600401610aef90615a7f565b610a82838383614477565b600061093661311d565b600061392f613b05565b6001600160a01b031663761ce95d846040518263ffffffff1660e01b815260040161395c91815260200190565b60006040518083038186803b15801561397457600080fd5b505afa158015613988573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526139b09190810190615ba5565b905060005b8151811015612f255760008282815181106139d2576139d26158c6565b602002602001015190508060400151600d60008282546139f291906155ee565b909155505081841415613a1857613a13600a82604001516118e191906155cc565b613af2565b600081602001516001600160a01b0316826040015161271090604051600060405180830381858888f193505050503d8060008114613a72576040519150601f19603f3d011682016040523d82523d6000602084013e613a77565b606091505b5050905080613af057613a886138d6565b6001600160a01b031663ec720b9b836020015184604001516040518363ffffffff1660e01b8152600401613abd92919061556c565b600060405180830381600087803b158015613ad757600080fd5b505af1158015613aeb573d6000803e3d6000fd5b505050505b505b5080613afd8161598f565b9150506139b5565b6000610936611133565b6115dc308383614477565b600061093661087e565b600080613b2f613b1a565b6001600160a01b03166337df00c9856040518263ffffffff1660e01b8152600401613b5c91815260200190565b6040805180830381600087803b158015613b7557600080fd5b505af1158015613b89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bad919061559e565b91509150613bb961391b565b6001600160a01b0316639c03facb856040518263ffffffff1660e01b8152600401613be691815260200190565b600060405180830381600087803b158015613c0057600080fd5b505af1158015613c14573d6000803e3d6000fd5b5050505080600d6000828254613c2a91906155ee565b90915550613c3a90508285613b0f565b613c486118e1600a836155cc565b613c506138d6565b6001600160a01b031663465bcf053085876040518463ffffffff1660e01b8152600401610e28939291906154e7565b610a8283838360405180602001604052806000815250612ef3565b613ca48383614610565b60008281526003602090815260409091208251612f2592840190614ba1565b6000613ccd611762565b90506000816001600160a01b03168361271090604051600060405180830381858888f193505050503d8060008114613d21576040519150601f19603f3d011682016040523d82523d6000602084013e613d26565b606091505b5050905080610a8257613d376138d6565b6001600160a01b031663ec720b9b83856040518363ffffffff1660e01b81526004016111a692919061556c565b600080613d6f61391b565b6001600160a01b031663b3a0ebc9846040518263ffffffff1660e01b8152600401613d9c91815260200190565b60006040518083038186803b158015613db457600080fd5b505afa158015613dc8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613df09190810190615697565b90506000613dfc613b1a565b6001600160a01b031663cc889b0b856040518263ffffffff1660e01b8152600401613e2991815260200190565b60606040518083038186803b158015613e4157600080fd5b505afa158015613e55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e79919061550b565b905060028260e001516004811115613e9357613e9361579e565b148015613eac575060208101516001600160a01b031615155b15613f9257600081602001516001600160a01b0316826040015161271090604051600060405180830381858888f193505050503d8060008114613f0b576040519150601f19603f3d011682016040523d82523d6000602084013e613f10565b606091505b505090508160400151935080613f9057613f286138d6565b6001600160a01b031663ec720b9b836020015184604001516040518363ffffffff1660e01b8152600401613f5d92919061556c565b600060405180830381600087803b158015613f7757600080fd5b505af1158015613f8b573d6000803e3d6000fd5b505050505b505b5050919050565b600080613fa4613b1a565b6001600160a01b031663cc889b0b846040518263ffffffff1660e01b8152600401613fd191815260200190565b60606040518083038186803b158015613fe957600080fd5b505afa158015613ffd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614021919061550b565b602001516001600160a01b031614158061096c575061403e613b05565b6001600160a01b031663761ce95d836040518263ffffffff1660e01b815260040161406b91815260200190565b60006040518083038186803b15801561408357600080fd5b505afa158015614097573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526140bf9190810190615ba5565b51151592915050565b6140d18161473c565b6040805160208082018084526000808452858152600390925292902090516115dc9290614ba1565b6000828152601060209081526040909120825161411892840190614ba1565b506115dc826147d1565b600061412d82613841565b61418e5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610aef565b60006141998361240b565b9050806001600160a01b0316846001600160a01b031614806141d45750836001600160a01b03166141c984610a87565b6001600160a01b0316145b80612fb95750612fb98185613606565b6141ef848484614477565b6141fb8484848461484c565b612f255760405162461bcd60e51b8152600401610aef90615cb3565b604080518082018252828152336020808301919091526000858152600e825292909220815180519293919261424f9284920190614ba1565b5060209190910151600190910180546001600160a01b0319166001600160a01b039092169190911790555050565b60008061428861391b565b6001600160a01b031663b3a0ebc9846040518263ffffffff1660e01b81526004016142b591815260200190565b60006040518083038186803b1580156142cd57600080fd5b505afa1580156142e1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526143099190810190615697565b905060006143156138e0565b6001600160a01b03166301b99e04856040518263ffffffff1660e01b815260040161434291815260200190565b60006040518083038186803b15801561435a57600080fd5b505afa15801561436e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526143969190810190615d05565b905060038260e0015160048111156143b0576143b061579e565b1480156143c9575060608101516001600160a01b031615155b15613f9257606081015160808201516040516000926001600160a01b0316916127109184818181858888f193505050503d8060008114614425576040519150601f19603f3d011682016040523d82523d6000602084013e61442a565b606091505b505090508160800151935080613f90576144426138d6565b6001600160a01b031663ec720b9b836060015184608001516040518363ffffffff1660e01b8152600401613f5d92919061556c565b826001600160a01b031661448a8261240b565b6001600160a01b0316146144f25760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610aef565b6001600160a01b0382166145545760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610aef565b61455f838383614959565b61456a60008261385e565b6001600160a01b03831660009081526005602052604081208054600192906145939084906155ee565b90915550506001600160a01b03821660009081526005602052604081208054600192906145c19084906154cf565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b038681169182179092559151849391871691600080516020615e1983398151915291a4505050565b6001600160a01b0382166146665760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610aef565b61466f81613841565b156146bb5760405162461bcd60e51b815260206004820152601c60248201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b6044820152606401610aef565b6146c760008383614959565b6001600160a01b03821660009081526005602052604081208054600192906146f09084906154cf565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839290600080516020615e19833981519152908290a45050565b60006147478261240b565b905061475581600084614959565b61476060008361385e565b6001600160a01b03811660009081526005602052604081208054600192906147899084906155ee565b909155505060008281526004602052604080822080546001600160a01b0319169055518391906001600160a01b03841690600080516020615e19833981519152908390a45050565b6040805160608101825260008183018181528252838152600e602081815293822060018101546001600160a01b031685850152918590528352815180519293919261481f9284920190614ba1565b5060209190910151600190910180546001600160a01b0319166001600160a01b0390921691909117905550565b60006001600160a01b0384163b1561494e57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290614890903390899088908890600401615da8565b602060405180830381600087803b1580156148aa57600080fd5b505af19250505080156148da575060408051601f3d908101601f191682019092526148d791810190615de5565b60015b614934573d808015614908576040519150601f19603f3d011682016040523d82523d6000602084013e61490d565b606091505b50805161492c5760405162461bcd60e51b8152600401610aef90615cb3565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612fb9565b506001949350505050565b6001600160a01b0383166149b4576149af81600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b6149d7565b816001600160a01b0316836001600160a01b0316146149d7576149d78382614a11565b6001600160a01b0382166149ee57610a8281614aae565b826001600160a01b0316826001600160a01b031614610a8257610a828282614b5d565b60006001614a1e84612543565b614a2891906155ee565b600083815260096020526040902054909150808214614a7b576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a54600090614ac0906001906155ee565b6000838152600b6020526040812054600a8054939450909284908110614ae857614ae86158c6565b9060005260206000200154905080600a8381548110614b0957614b096158c6565b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a805480614b4157614b41615e02565b6001900381819060005260206000200160009055905550505050565b6000614b6883612543565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b828054614bad90615300565b90600052602060002090601f016020900481019282614bcf5760008555614c15565b82601f10614be857805160ff1916838001178555614c15565b82800160010185558215614c15579182015b82811115614c15578251825591602001919060010190614bfa565b50614c21929150614c25565b5090565b5b80821115614c215760008155600101614c26565b6001600160a01b0391909116815260200190565b6001600160e01b031981168114612e2057600080fd5b600060208284031215614c7657600080fd5b81356126fc81614c4e565b60005b83811015614c9c578181015183820152602001614c84565b83811115612f255750506000910152565b60008151808452614cc5816020860160208601614c81565b601f01601f19169290920160200192915050565b6020815260006126fc6020830184614cad565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b0381118282101715614d2557614d25614cec565b60405290565b604051608081016001600160401b0381118282101715614d2557614d25614cec565b60405160a081016001600160401b0381118282101715614d2557614d25614cec565b604051601f8201601f191681016001600160401b0381118282101715614d9757614d97614cec565b604052919050565b60006001600160401b03821115614db857614db8614cec565b50601f01601f191660200190565b6000614dd9614dd484614d9f565b614d6f565b9050828152838383011115614ded57600080fd5b828260208301376000602084830101529392505050565b600082601f830112614e1557600080fd5b6126fc83833560208501614dc6565b6001600160a01b0381168114612e2057600080fd5b600080600060608486031215614e4e57600080fd5b83356001600160401b0380821115614e6557600080fd5b614e7187838801614e04565b94506020860135915080821115614e8757600080fd5b50614e9486828701614e04565b9250506040840135614ea581614e24565b809150509250925092565b600060208284031215614ec257600080fd5b5035919050565b60008060408385031215614edc57600080fd5b8235614ee781614e24565b946020939093013593505050565b8015158114612e2057600080fd5b600080600060608486031215614f1857600080fd5b8335925060208401356001600160401b03811115614f3557600080fd5b614f4186828701614e04565b9250506040840135614ea581614ef5565b60008060408385031215614f6557600080fd5b8235614f7081614e24565b915060208301356001600160401b03811115614f8b57600080fd5b614f9785828601614e04565b9150509250929050565b600080600060608486031215614fb657600080fd5b83356001600160401b03811115614fcc57600080fd5b614fd886828701614e04565b9660208601359650604090950135949350505050565b60008060006060848603121561500357600080fd5b833561500e81614e24565b9250602084013561501e81614e24565b929592945050506040919091013590565b60006020828403121561504157600080fd5b81356001600160401b0381111561505757600080fd5b612fb984828501614e04565b6000806040838503121561507657600080fd5b50508035926020909101359150565b6000806040838503121561509857600080fd5b8235915060208301356001600160401b03811115614f8b57600080fd5b6040815260006150c86040830185614cad565b90508260208301529392505050565b6040815260006150ea6040830185614cad565b905060018060a01b03831660208301529392505050565b6040815260006151146040830185614cad565b905082151560208301529392505050565b60006020828403121561513757600080fd5b81356126fc81614e24565b60058110612e2057600080fd5b600080600080600080600060e0888a03121561516a57600080fd5b87356001600160401b038082111561518157600080fd5b61518d8b838c01614e04565b985060208a01359150808211156151a357600080fd5b506151b08a828b01614e04565b96505060408801359450606088013593506080880135925060a08801356151d681615142565b8092505060c0880135905092959891949750929550565b6000806040838503121561520057600080fd5b823561520b81614e24565b9150602083013561521b81614ef5565b809150509250929050565b6000806000806080858703121561523c57600080fd5b843561524781614e24565b9350602085013561525781614e24565b92506040850135915060608501356001600160401b0381111561527957600080fd5b8501601f8101871361528a57600080fd5b61529987823560208401614dc6565b91505092959194509250565b600080604083850312156152b857600080fd5b82356152c381614e24565b9150602083013561521b81614e24565b80516152de81614e24565b919050565b6000602082840312156152f557600080fd5b81516126fc81614e24565b600181811c9082168061531457607f821691505b6020821081141561533557634e487b7160e01b600052602260045260246000fd5b50919050565b674b616c6569646f5f60c01b81526000825161535e816008850160208701614c81565b9190910160080192915050565b60208082526005908201526425a218189960d91b604082015260600190565b60208082526005908201526404b443133360dc1b604082015260600190565b8481526080602082015260006153c26080830186614cad565b82810360408401526153d48186614cad565b915050821515606083015295945050505050565b6001600160a01b0383168152604060208201819052600090612fb990830184614cad565b6001600160a01b0384811682528316602082015260606040820181905260009061543890830184614cad565b95945050505050565b60208082526005908201526412d10c0c4d60da1b604082015260600190565b60a08152600061547360a0830188614cad565b60208301969096525060408101939093526001600160a01b03919091166060830152608090910152919050565b6000602082840312156154b257600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156154e2576154e26154b9565b500190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006060828403121561551d57600080fd5b604051606081016001600160401b038111828210171561553f5761553f614cec565b60405282518152602083015161555481614e24565b60208201526040928301519281019290925250919050565b6001600160a01b03929092168252602082015260400190565b828152604060208201526000612fb96040830184614cad565b600080604083850312156155b157600080fd5b82516155bc81614e24565b6020939093015192949293505050565b6000826155e957634e487b7160e01b600052601260045260246000fd5b500490565b600082821015615600576156006154b9565b500390565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600082601f83011261564d57600080fd5b815161565b614dd482614d9f565b81815284602083860101111561567057600080fd5b612fb9826020830160208701614c81565b80516152de81615142565b80516152de81614ef5565b6000602082840312156156a957600080fd5b81516001600160401b03808211156156c057600080fd5b9083019061016082860312156156d557600080fd5b6156dd614d02565b6156e6836152d3565b81526020830151828111156156fa57600080fd5b6157068782860161563c565b60208301525060408301518281111561571e57600080fd5b61572a8782860161563c565b604083015250606083015160608201526080830151608082015260a083015160a082015260c083015160c082015261576460e08401615681565b60e082015261010083810151908201526101208084015190820152610140915061578f82840161568c565b91810191909152949350505050565b634e487b7160e01b600052602160045260246000fd5b600581106157d257634e487b7160e01b600052602160045260246000fd5b9052565b80516001600160a01b03168252600061016060208301518160208601526157ff82860182614cad565b915050604083015184820360408601526158198282614cad565b915050606083015160608501526080830151608085015260a083015160a085015260c083015160c085015260e083015161585660e08601826157b4565b506101008381015190850152610120808401519085015261014092830151151592909301919091525090565b60608152600061589560608301866157d6565b60208301949094525060400152919050565b60208082526005908201526412d10c4c4d60da1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006001600160401b038211156158f5576158f5614cec565b5060051b60200190565b6000602080838503121561591257600080fd5b82516001600160401b0381111561592857600080fd5b8301601f8101851361593957600080fd5b8051615947614dd4826158dc565b81815260059190911b8201830190838101908783111561596657600080fd5b928401925b828410156159845783518252928401929084019061596b565b979650505050505050565b60006000198214156159a3576159a36154b9565b5060010190565b60008160001904831182151516156159c4576159c46154b9565b500290565b6040815260006150c860408301856157d6565b8481526080602082015260006159f56080830186614cad565b6001600160a01b03949094166040830152506060015292915050565b6001600160a01b038916815261010060208201819052600090615a368382018b614cad565b90508281036040840152615a4a818a614cad565b9150508660608301528560808301528460a0830152615a6c60c08301856157b4565b8260e08301529998505050505050505050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6060815260006158956060830186614cad565b8054600090600181811c9080831680615afd57607f831692505b6020808410821415615b1f57634e487b7160e01b600052602260045260246000fd5b818015615b335760018114615b4457615b71565b60ff19861689528489019650615b71565b60008881526020902060005b86811015615b695781548b820152908501908301615b50565b505084890196505b50505050505092915050565b6000612fb9615b8c8386615ae3565b84615ae3565b6020815260006126fc60208301846157d6565b60006020808385031215615bb857600080fd5b82516001600160401b0380821115615bcf57600080fd5b818501915085601f830112615be357600080fd5b8151615bf1614dd4826158dc565b81815260059190911b83018401908481019088831115615c1057600080fd5b8585015b83811015615ca657805185811115615c2c5760008081fd5b86016080818c03601f1901811315615c445760008081fd5b615c4c614d2b565b898301518152604080840151615c6181614e24565b828c015260608481015182840152928401519289841115615c8457600091508182fd5b615c928f8d8688010161563c565b908301525085525050918601918601615c14565b5098975050505050505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600060208284031215615d1757600080fd5b81516001600160401b0380821115615d2e57600080fd5b9083019060a08286031215615d4257600080fd5b615d4a614d4d565b825182811115615d5957600080fd5b615d658782860161563c565b825250602083015160208201526040830151604082015260608301519150615d8c82614e24565b8160608201526080830151608082015280935050505092915050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090615ddb90830184614cad565b9695505050505050565b600060208284031215615df757600080fd5b81516126fc81614c4e565b634e487b7160e01b600052603160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220703b9e7b9ea8e4b02f517bc5a750a328cba1624fc758cd82496ea8482b415bb364736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061025a5760003560e01c80630106d8eb1461025f57806301ffc9a71461028a57806306fdde03146102ba578063077f224a146102dc578063081812fc146102fe578063095ea7b31461031e57806313c1f2781461033e578063179bcff71461035e57806318160ddd1461037e5780631daf7ff91461039d5780632231c1eb146103b057806323b872dd146103c557806327b7a2f5146103e55780632bc4bc68146104035780632f745c591461042357806332b18f6d1461044357806337df00c9146104635780633ccfd60b1461048357806342842e0e14610498578063430bf08a146104b8578063444115f6146104cd578063454a2ab3146104ed5780634b455a51146105005780634f6ccce71461052057806353c147761461054057806358ba1bb81461056e57806360c5cc3a1461059c5780636352211e146105bc57806365d13a90146105dc5780636a58767e1461060a57806370a082311461061f5780637a3c4c171461063f5780637ccacd491461065f5780637cf175fb14610672578063899c9989146106875780638da5cb5b146106a75780638f6059d6146106bc57806393525d39146106d157806395d89b41146106f1578063a22cb46514610706578063b69ef8a814610726578063b88d4fde14610739578063c531c23614610759578063c87b56dd14610779578063c9cd71b514610799578063d4f6b5ec146107ae578063d8680069146107ce578063d96a094a146107e1578063e6e268f4146107f4578063e985e9c514610809578063ef706adf14610829578063f072629114610849578063f19b82731461085e575b600080fd5b34801561026b57600080fd5b5061027461087e565b6040516102819190614c3a565b60405180910390f35b34801561029657600080fd5b506102aa6102a5366004614c64565b61093b565b6040519015158152602001610281565b3480156102c657600080fd5b506102cf610972565b6040516102819190614cd9565b3480156102e857600080fd5b506102fc6102f7366004614e39565b610a04565b005b34801561030a57600080fd5b50610274610319366004614eb0565b610a87565b34801561032a57600080fd5b506102fc610339366004614ec9565b610b14565b34801561034a57600080fd5b506102fc610359366004614f03565b610c20565b34801561036a57600080fd5b506102fc610379366004614f52565b610e60565b34801561038a57600080fd5b50600a545b604051908152602001610281565b6102fc6103ab366004614fa1565b610fde565b3480156103bc57600080fd5b50610274611133565b3480156103d157600080fd5b506102fc6103e0366004614fee565b611164565b3480156103f157600080fd5b50600c546001600160a01b0316610274565b34801561040f57600080fd5b506102fc61041e36600461502f565b6111dd565b34801561042f57600080fd5b5061038f61043e366004614ec9565b6112ef565b34801561044f57600080fd5b506102fc61045e366004615063565b611385565b34801561046f57600080fd5b506102fc61047e366004614eb0565b611509565b34801561048f57600080fd5b506102fc6115e0565b3480156104a457600080fd5b506102fc6104b3366004614fee565b611757565b3480156104c457600080fd5b50610274611762565b3480156104d957600080fd5b506102fc6104e8366004615085565b611791565b6102fc6104fb366004614eb0565b611936565b34801561050c57600080fd5b506102fc61051b366004614eb0565b611bac565b34801561052c57600080fd5b5061038f61053b366004614eb0565b611e37565b34801561054c57600080fd5b5061056061055b36600461502f565b611eca565b6040516102819291906150b5565b34801561057a57600080fd5b5061058e610589366004614eb0565b612158565b6040516102819291906150d7565b3480156105a857600080fd5b506102fc6105b7366004614eb0565b612205565b3480156105c857600080fd5b506102746105d7366004614eb0565b61240b565b3480156105e857600080fd5b506105fc6105f7366004615063565b612440565b604051610281929190615101565b34801561061657600080fd5b5061027461250c565b34801561062b57600080fd5b5061038f61063a366004615125565b612543565b34801561064b57600080fd5b5061038f61065a366004614eb0565b6125ca565b6102fc61066d366004615085565b612827565b34801561067e57600080fd5b50610274612a77565b34801561069357600080fd5b506102fc6106a236600461514f565b612aa9565b3480156106b357600080fd5b50610274612c69565b3480156106c857600080fd5b50610274612cae565b3480156106dd57600080fd5b506102fc6106ec366004614eb0565b612ce4565b3480156106fd57600080fd5b506102cf612e23565b34801561071257600080fd5b506102fc6107213660046151ed565b612e32565b34801561073257600080fd5b504761038f565b34801561074557600080fd5b506102fc610754366004615226565b612ef3565b34801561076557600080fd5b5061038f610774366004614fa1565b612f2b565b34801561078557600080fd5b506102cf610794366004614eb0565b612fc1565b3480156107a557600080fd5b5061027461311d565b3480156107ba57600080fd5b506102fc6107c9366004615085565b61314d565b6102fc6107dc366004614eb0565b6131bc565b6102fc6107ef366004614eb0565b61348c565b34801561080057600080fd5b5061038f6135f6565b34801561081557600080fd5b506102aa6108243660046152a5565b613606565b34801561083557600080fd5b506102fc610844366004614eb0565b613634565b34801561085557600080fd5b50610274613771565b34801561086a57600080fd5b506102cf610879366004614eb0565b6137a7565b600c546040516d22b733b634b9b420bab1ba34b7b760911b60208201526000916001600160a01b031690638eaa6ac090602e015b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016108e691815260200190565b60206040518083038186803b1580156108fe57600080fd5b505afa158015610912573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093691906152e3565b905090565b60006001600160e01b031982166380ac58cd60e01b148061096c57506001600160e01b03198216635b5e139f60e01b145b92915050565b60606000805461098190615300565b80601f01602080910402602001604051908101604052809291908181526020018280546109ad90615300565b80156109fa5780601f106109cf576101008083540402835291602001916109fa565b820191906000526020600020905b8154815290600101906020018083116109dd57829003601f168201915b5050505050905090565b8251610a17906000906020860190614ba1565b5082604051602001610a29919061533b565b60405160208183030381529060405260019080519060200190610a4d929190614ba1565b508151610a61906002906020850190614ba1565b50600c80546001600160a01b0319166001600160a01b038316179055505050565b505050565b6000610a9282613841565b610af85760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600660205260409020546001600160a01b031690565b6000610b1f8261240b565b9050806001600160a01b0316836001600160a01b03161415610b8d5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610aef565b336001600160a01b0382161480610ba95750610ba98133613606565b610c165760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b6064820152608401610aef565b610a82838361385e565b33610c296138cc565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401610c549190614c3a565b60206040518083038186803b158015610c6c57600080fd5b505afa158015610c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca491906152e3565b6001600160a01b031614610cca5760405162461bcd60e51b8152600401610aef9061536b565b6000838152600e602052604081208054610ce390615300565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0f90615300565b8015610d5c5780601f10610d3157610100808354040283529160200191610d5c565b820191906000526020600020905b815481529060010190602001808311610d3f57829003601f168201915b50505050509050805160001415610d855760405162461bcd60e51b8152600401610aef9061538a565b6000848152600f6020908152604080832081518083019092528682528515158284015280546001810182559084529282902081518051929460020290910192610dd392849290910190614ba1565b50602091909101516001909101805460ff1916911515919091179055610df76138d6565b6001600160a01b0316633ebf7371858386866040518563ffffffff1660e01b8152600401610e2894939291906153a9565b600060405180830381600087803b158015610e4257600080fd5b505af1158015610e56573d6000803e3d6000fd5b5050505050505050565b33610e696138cc565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401610e949190614c3a565b60206040518083038186803b158015610eac57600080fd5b505afa158015610ec0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee491906152e3565b6001600160a01b031614610f0a5760405162461bcd60e51b8152600401610aef9061536b565b610f126138cc565b6001600160a01b031663179bcff783836040518363ffffffff1660e01b8152600401610f3f9291906153e8565b600060405180830381600087803b158015610f5957600080fd5b505af1158015610f6d573d6000803e3d6000fd5b50505050610f796138d6565b6001600160a01b031663262360133084846040518463ffffffff1660e01b8152600401610fa89392919061540c565b600060405180830381600087803b158015610fc257600080fd5b505af1158015610fd6573d6000803e3d6000fd5b505050505050565b33610fe76138cc565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016110129190614c3a565b60206040518083038186803b15801561102a57600080fd5b505afa15801561103e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106291906152e3565b6001600160a01b031614156110895760405162461bcd60e51b8152600401610aef90615441565b6110916138e0565b6001600160a01b031663171a133d84848433346040518663ffffffff1660e01b81526004016110c4959493929190615460565b602060405180830381600087803b1580156110de57600080fd5b505af11580156110f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111691906154a0565b5034600d600082825461112991906154cf565b9091555050505050565b600c546040516613dc195b909a5960ca1b60208201526000916001600160a01b031690638eaa6ac0906027016108b2565b61116f8383836138ea565b6111776138d6565b6001600160a01b031663465bcf058484846040518463ffffffff1660e01b81526004016111a6939291906154e7565b600060405180830381600087803b1580156111c057600080fd5b505af11580156111d4573d6000803e3d6000fd5b50505050505050565b336111e66138cc565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016112119190614c3a565b60206040518083038186803b15801561122957600080fd5b505afa15801561123d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126191906152e3565b6001600160a01b0316146112875760405162461bcd60e51b8152600401610aef9061536b565b61128f61391b565b6001600160a01b031663b8926f2c826040518263ffffffff1660e01b81526004016112ba9190614cd9565b600060405180830381600087803b1580156112d457600080fd5b505af11580156112e8573d6000803e3d6000fd5b5050505050565b60006112fa83612543565b821061135c5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610aef565b506001600160a01b03919091166000908152600860209081526040808320938352929052205490565b3361138e6138cc565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016113b99190614c3a565b60206040518083038186803b1580156113d157600080fd5b505afa1580156113e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140991906152e3565b6001600160a01b03161461142f5760405162461bcd60e51b8152600401610aef9061536b565b6114398282613925565b6000611443613b05565b6040516332b18f6d60e01b815260048101859052602481018490526001600160a01b0391909116906332b18f6d90604401602060405180830381600087803b15801561148e57600080fd5b505af11580156114a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c691906152e3565b90506114d28184613b0f565b6114da6138d6565b6001600160a01b031663465bcf053083866040518463ffffffff1660e01b81526004016111a6939291906154e7565b8033611513613b1a565b6001600160a01b031663cc889b0b836040518263ffffffff1660e01b815260040161154091815260200190565b60606040518083038186803b15801561155857600080fd5b505afa15801561156c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611590919061550b565b602001516001600160a01b0316146115d25760405162461bcd60e51b815260206004820152600560248201526425a218991b60d91b6044820152606401610aef565b6115dc8233613b24565b5050565b336115e96138cc565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016116149190614c3a565b60206040518083038186803b15801561162c57600080fd5b505afa158015611640573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166491906152e3565b6001600160a01b03161461168a5760405162461bcd60e51b8152600401610aef9061536b565b60006116946135f6565b604051909150600090339061271090849084818181858888f193505050503d80600081146116de576040519150601f19603f3d011682016040523d82523d6000602084013e6116e3565b606091505b505090508015611722576116f56138d6565b6001600160a01b031663279862cb836040518263ffffffff1660e01b8152600401610fa891815260200190565b61172a6138d6565b6001600160a01b031663ec720b9b33846040518363ffffffff1660e01b8152600401610fa892919061556c565b61116f838383613c7f565b600c546040516415985d5b1d60da1b60208201526000916001600160a01b031690638eaa6ac0906025016108b2565b3361179a6138cc565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016117c59190614c3a565b60206040518083038186803b1580156117dd57600080fd5b505afa1580156117f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181591906152e3565b6001600160a01b03161461183b5760405162461bcd60e51b8152600401610aef9061536b565b6000806118466138e0565b6001600160a01b0316633d243e8b85856040518363ffffffff1660e01b8152600401611873929190615585565b6040805180830381600087803b15801561188c57600080fd5b505af11580156118a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c4919061559e565b915091506118d3828585613c9a565b6118e66118e1600a836155cc565b613cc3565b80600d60008282546118f891906155ee565b9091555061190690506138d6565b6001600160a01b031663465bcf05600030876040518463ffffffff1660e01b8152600401610e28939291906154e7565b3361193f6138cc565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b815260040161196a9190614c3a565b60206040518083038186803b15801561198257600080fd5b505afa158015611996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ba91906152e3565b6001600160a01b031614156119e15760405162461bcd60e51b8152600401610aef90615441565b60026011541415611a045760405162461bcd60e51b8152600401610aef90615605565b600260115573__$d7d41b463f0c25cd0b86b1d270805192c7$__639e8e66da611a2b61391b565b6001600160a01b031663b3a0ebc9846040518263ffffffff1660e01b8152600401611a5891815260200190565b60006040518083038186803b158015611a7057600080fd5b505afa158015611a84573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611aac9190810190615697565b611ab5846125ca565b426040518463ffffffff1660e01b8152600401611ad493929190615882565b60006040518083038186803b158015611aec57600080fd5b505af4158015611b00573d6000803e3d6000fd5b505050506000611b0f82613d64565b9050611b19613b1a565b60405163c0f4ed3160e01b8152600481018490523360248201523460448201526001600160a01b03919091169063c0f4ed3190606401600060405180830381600087803b158015611b6957600080fd5b505af1158015611b7d573d6000803e3d6000fd5b505050508034611b8d91906155ee565b600d6000828254611b9e91906154cf565b909155505060016011555050565b33611bb56138cc565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401611be09190614c3a565b60206040518083038186803b158015611bf857600080fd5b505afa158015611c0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3091906152e3565b6001600160a01b031614611c565760405162461bcd60e51b8152600401610aef9061536b565b6000611c6061391b565b6001600160a01b031663b3a0ebc9836040518263ffffffff1660e01b8152600401611c8d91815260200190565b60006040518083038186803b158015611ca557600080fd5b505afa158015611cb9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ce19190810190615697565b516001600160a01b03161415611d095760405162461bcd60e51b8152600401610aef906158a7565b30611d138261240b565b6001600160a01b031614611d515760405162461bcd60e51b81526020600482015260056024820152644b4431323160d81b6044820152606401610aef565b611d5a81613f99565b15611d8f5760405162461bcd60e51b8152602060048201526005602482015264096886264760db1b6044820152606401610aef565b611d98816140c8565b611da061391b565b6001600160a01b0316634b455a51826040518263ffffffff1660e01b8152600401611dcd91815260200190565b600060405180830381600087803b158015611de757600080fd5b505af1158015611dfb573d6000803e3d6000fd5b50505050611e076138d6565b6001600160a01b031663465bcf05306000846040518463ffffffff1660e01b81526004016112ba939291906154e7565b6000611e42600a5490565b8210611ea55760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610aef565b600a8281548110611eb857611eb86158c6565b90600052602060002001549050919050565b6060600080611ed761391b565b6001600160a01b031663d028bd66856040518263ffffffff1660e01b8152600401611f029190614cd9565b60006040518083038186803b158015611f1a57600080fd5b505afa158015611f2e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f5691908101906158ff565b905060005b815181101561213a57818181518110611f7657611f766158c6565b6020026020010151600014612128576000611f8f61391b565b6001600160a01b031663b3a0ebc9848481518110611faf57611faf6158c6565b60200260200101516040518263ffffffff1660e01b8152600401611fd591815260200190565b60006040518083038186803b158015611fed57600080fd5b505afa158015612001573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120299190810190615697565b9050428160a00151111580156120435750428160c0015110155b15612126576010600084848151811061205e5761205e6158c6565b60200260200101518152602001908152602001600020838381518110612086576120866158c6565b602002602001015181805461209a90615300565b80601f01602080910402602001604051908101604052809291908181526020018280546120c690615300565b80156121135780601f106120e857610100808354040283529160200191612113565b820191906000526020600020905b8154815290600101906020018083116120f657829003601f168201915b5050505050915094509450505050915091565b505b806121328161598f565b915050611f5b565b50600060405180602001604052806000815250909250925050915091565b600e6020526000908152604090208054819061217390615300565b80601f016020809104026020016040519081016040528092919081815260200182805461219f90615300565b80156121ec5780601f106121c1576101008083540402835291602001916121ec565b820191906000526020600020905b8154815290600101906020018083116121cf57829003601f168201915b505050600190930154919250506001600160a01b031682565b3361220e6138cc565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016122399190614c3a565b60206040518083038186803b15801561225157600080fd5b505afa158015612265573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228991906152e3565b6001600160a01b0316146122af5760405162461bcd60e51b8152600401610aef9061536b565b6000818152600e6020526040812080546122c890615300565b80601f01602080910402602001604051908101604052809291908181526020018280546122f490615300565b80156123415780601f1061231657610100808354040283529160200191612341565b820191906000526020600020905b81548152906001019060200180831161232457829003601f168201915b5050505050905080516000141561236a5760405162461bcd60e51b8152600401610aef9061538a565b6000828152600e60205260409020600101546001600160a01b031661238e8361240b565b6001600160a01b0316146123cc5760405162461bcd60e51b81526020600482015260056024820152644b4431333160d81b6044820152606401610aef565b6123d682826140f9565b6123de6138d6565b6001600160a01b031663746f1b2083836040518363ffffffff1660e01b8152600401610fa8929190615585565b6000818152600460205260408120546001600160a01b03168061096c5760405162461bcd60e51b8152600401610aef906158a7565b600f602052816000526040600020818154811061245c57600080fd5b90600052602060002090600202016000915091505080600001805461248090615300565b80601f01602080910402602001604051908101604052809291908181526020018280546124ac90615300565b80156124f95780601f106124ce576101008083540402835291602001916124f9565b820191906000526020600020905b8154815290600101906020018083116124dc57829003601f168201915b5050506001909301549192505060ff1682565b600c546040516c4d65646961526567697374727960981b60208201526000916001600160a01b031690638eaa6ac090602d016108b2565b60006001600160a01b0382166125ae5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610aef565b506001600160a01b031660009081526005602052604090205490565b6000806125d561391b565b6001600160a01b031663b3a0ebc9846040518263ffffffff1660e01b815260040161260291815260200190565b60006040518083038186803b15801561261a57600080fd5b505afa15801561262e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526126569190810190615697565b905060008160e0015160048111156126705761267061579e565b141561268157610100015192915050565b60018160e0015160048111156126995761269961579e565b141561270357806060015181608001516126b391906155ee565b60608201516126c290426155ee565b8261010001518361012001516126d891906155ee565b6126e291906159aa565b6126ec91906155cc565b8161012001516126fc91906155ee565b9392505050565b60028160e00151600481111561271b5761271b61579e565b14156127a657612729613b1a565b6001600160a01b0316637a3c4c17846040518263ffffffff1660e01b815260040161275691815260200190565b60206040518083038186803b15801561276e57600080fd5b505afa158015612782573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126fc91906154a0565b60038160e0015160048111156127be576127be61579e565b14156127cc576127296138e0565b60048160e0015160048111156127e4576127e461579e565b14156127f35750600092915050565b60405162461bcd60e51b81526020600482015260096024820152681b9bdd08195e1a5cdd60ba1b6044820152606401610aef565b336128306138cc565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b815260040161285b9190614c3a565b60206040518083038186803b15801561287357600080fd5b505afa158015612887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ab91906152e3565b6001600160a01b031614156128d25760405162461bcd60e51b8152600401610aef90615441565b600260115414156128f55760405162461bcd60e51b8152600401610aef90615605565b600260115573__$d7d41b463f0c25cd0b86b1d270805192c7$__63ca2652a861291c61391b565b6001600160a01b031663b3a0ebc9856040518263ffffffff1660e01b815260040161294991815260200190565b60006040518083038186803b15801561296157600080fd5b505afa158015612975573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261299d9190810190615697565b426040518363ffffffff1660e01b81526004016129bb9291906159c9565b60006040518083038186803b1580156129d357600080fd5b505af41580156129e7573d6000803e3d6000fd5b5050505034600d60008282546129fd91906154cf565b90915550612a0b9050613b05565b6001600160a01b031663389ad90e838333346040518563ffffffff1660e01b8152600401612a3c94939291906159dc565b600060405180830381600087803b158015612a5657600080fd5b505af1158015612a6a573d6000803e3d6000fd5b5050600160115550505050565b600c546040516713d999995c909a5960c21b60208201526000916001600160a01b031690638eaa6ac0906028016108b2565b33612ab26138cc565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401612add9190614c3a565b60206040518083038186803b158015612af557600080fd5b505afa158015612b09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b2d91906152e3565b6001600160a01b031614612b535760405162461bcd60e51b8152600401610aef9061536b565b6000612b5d61391b565b6001600160a01b031663e6851b98308a8a8a8a8a8a8a6040518963ffffffff1660e01b8152600401612b96989796959493929190615a11565b602060405180830381600087803b158015612bb057600080fd5b505af1158015612bc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612be891906154a0565b9050612bf5308289613c9a565b612bfd6138d6565b6001600160a01b031663465bcf05600030846040518463ffffffff1660e01b8152600401612c2d939291906154e7565b600060405180830381600087803b158015612c4757600080fd5b505af1158015612c5b573d6000803e3d6000fd5b505050505050505050505050565b600c5460408051631abe729160e31b815290516000926001600160a01b03169163d5f39488916004808301926020929190829003018186803b1580156108fe57600080fd5b600c546040516b4d65646961466163746f727960a01b60208201526000916001600160a01b031690638eaa6ac090602c016108b2565b33612ced6138cc565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401612d189190614c3a565b60206040518083038186803b158015612d3057600080fd5b505afa158015612d44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6891906152e3565b6001600160a01b031614612d8e5760405162461bcd60e51b8152600401610aef9061536b565b612e2081612d9a613b1a565b6001600160a01b031663cc889b0b846040518263ffffffff1660e01b8152600401612dc791815260200190565b60606040518083038186803b158015612ddf57600080fd5b505afa158015612df3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e17919061550b565b60200151613b24565b50565b60606001805461098190615300565b6001600160a01b038216331415612e875760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610aef565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b612efd3383614122565b612f195760405162461bcd60e51b8152600401610aef90615a7f565b612f25848484846141e4565b50505050565b6040516303fb4aab60e41b815260009073__$a79fa16630ef50be54c6520a39abca49df$__90633fb4aab090612f6990879087908790600401615ad0565b60206040518083038186803b158015612f8157600080fd5b505af4158015612f95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb991906154a0565b949350505050565b6060612fcc82613841565b6130305760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610aef565b60006002805461303f90615300565b9050116130e2576000828152600360205260409020805461305f90615300565b80601f016020809104026020016040519081016040528092919081815260200182805461308b90615300565b80156130d85780601f106130ad576101008083540402835291602001916130d8565b820191906000526020600020905b8154815290600101906020018083116130bb57829003601f168201915b505050505061096c565b600260036000848152602001908152602001600020604051602001613108929190615b7d565b60405160208183030381529060405292915050565b600c54604051651059141bdbdb60d21b60208201526000916001600160a01b031690638eaa6ac0906026016108b2565b336131578361240b565b6001600160a01b03161461317d5760405162461bcd60e51b8152600401610aef9061536b565b6131878282614217565b61318f6138d6565b6001600160a01b0316635bcefb5383836040518363ffffffff1660e01b8152600401610fa8929190615585565b336131c56138cc565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016131f09190614c3a565b60206040518083038186803b15801561320857600080fd5b505afa15801561321c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061324091906152e3565b6001600160a01b031614156132675760405162461bcd60e51b8152600401610aef90615441565b73__$d7d41b463f0c25cd0b86b1d270805192c7$__63b26502ff61328961391b565b6001600160a01b031663b3a0ebc9846040518263ffffffff1660e01b81526004016132b691815260200190565b60006040518083038186803b1580156132ce57600080fd5b505afa1580156132e2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261330a9190810190615697565b613313846125ca565b6040518363ffffffff1660e01b81526004016133309291906159c9565b60006040518083038186803b15801561334857600080fd5b505af415801561335c573d6000803e3d6000fd5b5050505061336861391b565b6001600160a01b0316639c03facb826040518263ffffffff1660e01b815260040161339591815260200190565b600060405180830381600087803b1580156133af57600080fd5b505af11580156133c3573d6000803e3d6000fd5b505050506133d13382613b0f565b6133df6118e1600a346155cc565b6133e76138d6565b604051635dd995b560e01b8152600481018390523460248201523360448201524260648201526001600160a01b039190911690635dd995b590608401600060405180830381600087803b15801561343d57600080fd5b505af1158015613451573d6000803e3d6000fd5b5050505061345d6138d6565b6001600160a01b031663465bcf053033846040518463ffffffff1660e01b81526004016112ba939291906154e7565b336134956138cc565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016134c09190614c3a565b60206040518083038186803b1580156134d857600080fd5b505afa1580156134ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061351091906152e3565b6001600160a01b031614156135375760405162461bcd60e51b8152600401610aef90615441565b73__$d7d41b463f0c25cd0b86b1d270805192c7$",
  "libraries": {
    "Ad": "0x9F397D94EC32D43EeC60dCF9A38a44322D54d42A",
    "Purchase": "0x570aa59a67aE825a0acDfC0deD3e919E1c73666B"
  },
  "devdoc": {
    "author": "Shumpei Koike - <shumpei.koike@bridges.inc>",
    "kind": "dev",
    "methods": {
      "acceptOffer(uint256,string)": {
        "details": "Accepts an offer by the Media.",
        "params": {
          "tokenId": "uint256 of the token ID",
          "tokenMetadata": "string of the NFT token metadata"
        }
      },
      "acceptProposal(uint256)": {
        "details": "Accepts the proposal.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "adId(string,uint256,uint256)": {
        "details": "Returns ID based on the space metadata, display start timestamp, and      display end timestamp. These three makes it the unique.",
        "params": {
          "displayEndTimestamp": "uint256 of the end timestamp for the display",
          "displayStartTimestamp": "uint256 of the start timestamp for the display",
          "spaceMetadata": "uint256 of the space metadata"
        }
      },
      "adPoolAddress()": {
        "details": "Gets the address of AdPool."
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balance()": {
        "details": "Returns the balacne deposited on the proxy contract."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "bid(uint256)": {
        "details": "Bids to participate in an auction.      It is defined as an English Auction.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "bidWithProposal(uint256,string)": {
        "details": "Bids to participate in an auction.      It is defined as an Open Bid.",
        "params": {
          "proposalMetadata": "string of the metadata hash",
          "tokenId": "uint256 of the token ID"
        }
      },
      "buy(uint256)": {
        "details": "Buys the token that is defined as the specific period on an ad space.      The price of the token is fixed.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "buyBasedOnTime(uint256)": {
        "details": "Buys the token that is defined as the specific period on an ad space.      The price is decreasing as time goes by, that is defined as an Dutch Auction.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "cancelOffer(uint256)": {
        "details": "Cancels an offer.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "currentPrice(uint256)": {
        "details": "Returns the current price.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "deletePeriod(uint256)": {
        "details": "Deletes a period and its token.      If there is any users locking the fund for the sale, the amount would be transfered      to the user when deleting the period.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "denyProposal(uint256,string,bool)": {
        "details": "Denies the submitted proposal, mentioning what is the problem.",
        "params": {
          "offensive": "bool if the content would offend somebody",
          "reason": "string of the reason why it is rejected",
          "tokenId": "uint256 of the token ID"
        }
      },
      "display(string)": {
        "details": "Displays the ad content that is approved by the media owner.",
        "params": {
          "spaceMetadata": "string of the space metadata"
        }
      },
      "englishAuctionAddress()": {
        "details": "Gets the address of EnglishAuction."
      },
      "eventEmitterAddress()": {
        "details": "Gets the address of EventEmitter."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "initialize(string,string,address)": {
        "details": "Initialize the instance.",
        "params": {
          "baseURI": "string of the base URI",
          "nameRegistry": "address of NameRegistry",
          "title": "string of the title of the instance"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mediaFactoryAddress()": {
        "details": "Gets the address of MediaFactory."
      },
      "mediaRegistryAddress()": {
        "details": "Gets the address of MediaRegistry."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "nameRegistryAddress()": {
        "details": "Gets the address of NameRegistry"
      },
      "newPeriod(string,string,uint256,uint256,uint256,uint8,uint256)": {
        "details": "Create a new period for a space. This function requires some params      to decide which kinds of pricing way and how much price to get started.",
        "params": {
          "displayEndTimestamp": "uint256 of the end timestamp for the display",
          "displayStartTimestamp": "uint256 of the start timestamp for the display",
          "minPrice": "uint256 of the minimum price to sell it out",
          "pricing": "uint256 of the pricing way",
          "saleEndTimestamp": "uint256 of the end timestamp for the sale",
          "spaceMetadata": "string of the space metadata",
          "tokenMetadata": "string of the token metadata"
        }
      },
      "newSpace(string)": {
        "details": "Creates a new space for the media account.",
        "params": {
          "spaceMetadata": "string of the space metadata"
        }
      },
      "offerBidAddress()": {
        "details": "Gets the address of OfferBid."
      },
      "offerPeriod(string,uint256,uint256)": {
        "details": "Offers to buy a period that the sender requests.",
        "params": {
          "displayEndTimestamp": "uint256 of the end timestamp for the display",
          "displayStartTimestamp": "uint256 of the start timestamp for the display",
          "spaceMetadata": "string of the space metadata"
        }
      },
      "openBidAddress()": {
        "details": "Gets the address of OpenBid."
      },
      "owner()": {
        "details": "Gets the owner address."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "propose(uint256,string)": {
        "details": "Proposes the metadata to the token you bought.      Users can propose many times as long as it is accepted.",
        "params": {
          "metadata": "string of the proposal metadata",
          "tokenId": "uint256 of the token ID"
        }
      },
      "pushToSuccessfulBidder(uint256)": {
        "details": "Receives the token you bidded if you are the successful bidder.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "receiveToken(uint256)": {
        "details": "Receives the token you bidded if you are the successful bidder.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Overrides transferFrom to emit an event from the common emitter."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "selectProposal(uint256,uint256)": {
        "details": "Selects the best proposal bidded with.",
        "params": {
          "index": "uint256 of the index number",
          "tokenId": "uint256 of the token ID"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Overrides transferFrom to emit an event from the common emitter."
      },
      "updateMedia(address,string)": {
        "details": "Updates the media EOA and the metadata.",
        "params": {
          "newMediaEOA": "address of a new EOA",
          "newMetadata": "string of a new metadata"
        }
      },
      "vaultAddress()": {
        "details": "Gets the address of Vault."
      },
      "withdraw()": {
        "details": "Withdraws the fund deposited to the proxy contract.      If you put 0 as the amount, you can withdraw as much as possible."
      },
      "withdrawalAmount()": {
        "details": "Returns the withdrawal amount."
      }
    },
    "title": "AdManager - manages ad spaces and its periods to sell them to users.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2511,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2513,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2515,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_baseURI",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2519,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2523,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_owners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2527,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2531,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2537,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2543,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2547,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2550,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_allTokens",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2554,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2131,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_nameRegistry",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(INameRegistry)4553"
      },
      {
        "astId": 3855,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_processingTotal",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3861,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "proposed",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(Proposal)4724_storage)"
      },
      {
        "astId": 3868,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "deniedReasons",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_array(t_struct(Denied)4719_storage)dyn_storage)"
      },
      {
        "astId": 3873,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "accepted",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 114,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_status",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Denied)4719_storage)dyn_storage": {
        "base": "t_struct(Denied)4719_storage",
        "encoding": "dynamic_array",
        "label": "struct Draft.Denied[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(INameRegistry)4553": {
        "encoding": "inplace",
        "label": "contract INameRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(Denied)4719_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Draft.Denied[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Denied)4719_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Proposal)4724_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Draft.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)4724_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Denied)4719_storage": {
        "encoding": "inplace",
        "label": "struct Draft.Denied",
        "members": [
          {
            "astId": 4716,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "reason",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4718,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "offensive",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Proposal)4724_storage": {
        "encoding": "inplace",
        "label": "struct Draft.Proposal",
        "members": [
          {
            "astId": 4721,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "content",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4723,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "proposer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}