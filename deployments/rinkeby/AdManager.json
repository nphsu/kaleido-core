{
  "address": "0x2483b7757b0Fd92DA273952D4d414fb200020A78",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "acceptProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "accepted",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "spaceMetadata",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "displayStartTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "displayEndTimestamp",
          "type": "uint256"
        }
      ],
      "name": "adId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bidding",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buyBasedOnTime",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "currentPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "deletePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deniedReasons",
      "outputs": [
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "offensive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "offensive",
          "type": "bool"
        }
      ],
      "name": "denyProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "spaceMetadata",
          "type": "string"
        }
      ],
      "name": "display",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eventEmitterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "nameRegistry",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mediaFactoryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mediaRegistryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nameRegistryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "spaceMetadata",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenMetadata",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "saleEndTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "displayStartTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "displayEndTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum Ad.Pricing",
          "name": "pricing",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        }
      ],
      "name": "newPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "spaceMetadata",
          "type": "string"
        }
      ],
      "name": "newSpace",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "offered",
      "outputs": [
        {
          "internalType": "string",
          "name": "spaceMetadata",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "displayStartTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "displayEndTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "periods",
      "outputs": [
        {
          "internalType": "address",
          "name": "mediaProxy",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "spaceMetadata",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenMetadata",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "saleStartTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "saleEndTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "displayStartTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "displayEndTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum Ad.Pricing",
          "name": "pricing",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "sold",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "propose",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposed",
      "outputs": [
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "receiveToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "spaced",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "spaceMetadata",
          "type": "string"
        }
      ],
      "name": "tokenIdsOf",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newMediaEOA",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "newMetadata",
          "type": "string"
        }
      ],
      "name": "updateMedia",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd7fc5b71a84d01064623439dcaea550c01f887f041e530f4128b5e70a40046da",
  "receipt": {
    "to": null,
    "from": "0xCdfc500F7f0FCe1278aECb0340b523cD55b3EBbb",
    "contractAddress": "0x2483b7757b0Fd92DA273952D4d414fb200020A78",
    "transactionIndex": 2,
    "gasUsed": "5047369",
    "logsBloom": "0x
    "blockHash": "0x65dfbe1d88c2c49a49e9f7b042f33e63668accda27ed582ec11459d9f3cf64af",
    "transactionHash": "0xd7fc5b71a84d01064623439dcaea550c01f887f041e530f4128b5e70a40046da",
    "logs": [],
    "blockNumber": 9697759,
    "cumulativeGasUsed": "5237136",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "6ca65f67efc8f2cae2a93f9d484f35a0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"acceptProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accepted\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"spaceMetadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"displayStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"displayEndTimestamp\",\"type\":\"uint256\"}],\"name\":\"adId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bidding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyBasedOnTime\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"deletePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deniedReasons\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"offensive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"offensive\",\"type\":\"bool\"}],\"name\":\"denyProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"spaceMetadata\",\"type\":\"string\"}],\"name\":\"display\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventEmitterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"nameRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mediaFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mediaRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"spaceMetadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenMetadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"saleEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"displayStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"displayEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum Ad.Pricing\",\"name\":\"pricing\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"}],\"name\":\"newPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"spaceMetadata\",\"type\":\"string\"}],\"name\":\"newSpace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offered\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"spaceMetadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"displayStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"displayEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"periods\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"mediaProxy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"spaceMetadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenMetadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"saleStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"displayStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"displayEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum Ad.Pricing\",\"name\":\"pricing\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sold\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposed\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"receiveToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"spaced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"spaceMetadata\",\"type\":\"string\"}],\"name\":\"tokenIdsOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMediaEOA\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newMetadata\",\"type\":\"string\"}],\"name\":\"updateMedia\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Shumpei Koike - <shumpei.koike@bridges.inc>\",\"kind\":\"dev\",\"methods\":{\"acceptProposal(uint256)\":{\"details\":\"Accepts the proposal.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"adId(string,uint256,uint256)\":{\"details\":\"Returns ID based on the space metadata, display start timestamp, and      display end timestamp. These three makes it the unique.\",\"params\":{\"displayEndTimestamp\":\"uint256 of the end timestamp for the display\",\"displayStartTimestamp\":\"uint256 of the start timestamp for the display\",\"spaceMetadata\":\"uint256 of the space metadata\"}},\"adPoolAddress()\":{\"details\":\"Gets the address of AdPool.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balance()\":{\"details\":\"Returns the balacne deposited on the proxy contract.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"bid(uint256)\":{\"details\":\"Bids to participate in an auction.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"buy(uint256)\":{\"details\":\"Buys the token that is defined as the specific period on an ad space.      The price of the token is fixed.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"buyBasedOnTime(uint256)\":{\"details\":\"Buys the token that is defined as the specific period on an ad space.      The price is decreasing as time goes by.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"currentPrice(uint256)\":{\"details\":\"Returns the current price.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"deletePeriod(uint256)\":{\"details\":\"Deletes a period and its token.      If there is any users locking the fund for the sale, the amount would be transfered      to the user when deleting the period.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"denyProposal(uint256,string,bool)\":{\"details\":\"Denies the submitted proposal, mentioning what is the problem.\",\"params\":{\"offensive\":\"bool if the content would offend somebody\",\"reason\":\"string of the reason why it is rejected\",\"tokenId\":\"uint256 of the token ID\"}},\"display(string)\":{\"details\":\"Displays the ad content that is approved by the media owner.\",\"params\":{\"spaceMetadata\":\"string of the space metadata\"}},\"eventEmitterAddress()\":{\"details\":\"Gets the address of EventEmitter.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"initialize(string,string,address)\":{\"details\":\"Initialize the instance.\",\"params\":{\"baseURI\":\"string of the base URI\",\"nameRegistry\":\"address of NameRegistry\",\"title\":\"string of the title of the instance\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mediaFactoryAddress()\":{\"details\":\"Gets the address of MediaFactory.\"},\"mediaRegistryAddress()\":{\"details\":\"Gets the address of MediaRegistry.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"nameRegistryAddress()\":{\"details\":\"Gets the address of NameRegistry\"},\"newPeriod(string,string,uint256,uint256,uint256,uint8,uint256)\":{\"details\":\"Create a new period for a space. This function requires some params      to decide which kinds of pricing way and how much price to get started.\",\"params\":{\"displayEndTimestamp\":\"uint256 of the end timestamp for the display\",\"displayStartTimestamp\":\"uint256 of the start timestamp for the display\",\"minPrice\":\"uint256 of the minimum price to sell it out\",\"pricing\":\"uint256 of the pricing way\",\"saleEndTimestamp\":\"uint256 of the end timestamp for the sale\",\"spaceMetadata\":\"string of the space metadata\",\"tokenMetadata\":\"string of the token metadata\"}},\"newSpace(string)\":{\"details\":\"Creates a new space for the media account.\",\"params\":{\"spaceMetadata\":\"string of the space metadata\"}},\"owner()\":{\"details\":\"Gets the owner address.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"propose(uint256,string)\":{\"details\":\"Proposes the metadata to the token you bought.      Users can propose many times as long as it is accepted.\",\"params\":{\"metadata\":\"string of the proposal metadata\",\"tokenId\":\"uint256 of the token ID\"}},\"receiveToken(uint256)\":{\"details\":\"Receives the token you bidded if you are the successful bidder.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Overrides transferFrom to emit an event from the common emitter.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenIdsOf(string)\":{\"details\":\"Returns tokenIds tied with the space metadata\",\"params\":{\"spaceMetadata\":\"string of the space metadata\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Overrides transferFrom to emit an event from the common emitter.\"},\"updateMedia(address,string)\":{\"details\":\"Updates the media EOA and the metadata.\",\"params\":{\"newMediaEOA\":\"address of a new EOA\",\"newMetadata\":\"string of a new metadata\"}},\"vaultAddress()\":{\"details\":\"Gets the address of Vault.\"},\"withdraw(uint256)\":{\"details\":\"Withdraws the fund deposited to the proxy contract.      If you put 0 as the amount, you can withdraw as much as possible.\",\"params\":{\"amount\":\"uint256 of the withdrawal amount\"}},\"withdrawalAmount()\":{\"details\":\"Returns the withdrawal amount.\"}},\"title\":\"AdManager - manages ad spaces and its periods to sell them to users.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AdManager.sol\":\"AdManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":256},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"contracts/AdManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./base/PrimarySales.sol\\\";\\nimport \\\"./base/DistributionRight.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/// @title AdManager - manages ad spaces and its periods to sell them to users.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ncontract AdManager is DistributionRight, PrimarySales, ReentrancyGuard {\\n\\t/// @dev Can call it by only the media\\n\\tmodifier onlyMedia() {\\n\\t\\trequire(_mediaRegistry().ownerOf(address(this)) == msg.sender, \\\"KD012\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Prevents the media from calling by yourself\\n\\tmodifier exceptYourself() {\\n\\t\\trequire(_mediaRegistry().ownerOf(address(this)) != msg.sender, \\\"KD014\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Called by the successful bidder\\n\\tmodifier onlySuccessfulBidder(uint256 tokenId) {\\n\\t\\trequire(bidding[tokenId].bidder == msg.sender, \\\"KD126\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Can call it only once\\n\\tmodifier initializer() {\\n\\t\\trequire(address(_nameRegistry) == address(0x0), \\\"AR000\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Initialize the instance.\\n\\t/// @param title string of the title of the instance\\n\\t/// @param baseURI string of the base URI\\n\\t/// @param nameRegistry address of NameRegistry\\n\\tfunction initialize(\\n\\t\\tstring memory title,\\n\\t\\tstring memory baseURI,\\n\\t\\taddress nameRegistry\\n\\t) external {\\n\\t\\t_name = title;\\n\\t\\t_symbol = string(abi.encodePacked(\\\"Kaleido_\\\", title));\\n\\t\\t_baseURI = baseURI;\\n\\t\\tinitialize(nameRegistry);\\n\\t}\\n\\n\\t/// @dev Updates the media EOA and the metadata.\\n\\t/// @param newMediaEOA address of a new EOA\\n\\t/// @param newMetadata string of a new metadata\\n\\tfunction updateMedia(address newMediaEOA, string memory newMetadata)\\n\\t\\texternal\\n\\t\\tonlyMedia\\n\\t{\\n\\t\\t_mediaRegistry().updateMedia(newMediaEOA, newMetadata);\\n\\t\\t_eventEmitter().emitUpdateMedia(address(this), newMediaEOA, newMetadata);\\n\\t}\\n\\n\\t/// @dev Creates a new space for the media account.\\n\\t/// @param spaceMetadata string of the space metadata\\n\\tfunction newSpace(string memory spaceMetadata) external onlyMedia {\\n\\t\\t_newSpace(spaceMetadata);\\n\\t}\\n\\n\\t/// @dev Create a new period for a space. This function requires some params\\n\\t///      to decide which kinds of pricing way and how much price to get started.\\n\\t/// @param spaceMetadata string of the space metadata\\n\\t/// @param tokenMetadata string of the token metadata\\n\\t/// @param saleEndTimestamp uint256 of the end timestamp for the sale\\n\\t/// @param displayStartTimestamp uint256 of the start timestamp for the display\\n\\t/// @param displayEndTimestamp uint256 of the end timestamp for the display\\n\\t/// @param pricing uint256 of the pricing way\\n\\t/// @param minPrice uint256 of the minimum price to sell it out\\n\\tfunction newPeriod(\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tstring memory tokenMetadata,\\n\\t\\tuint256 saleEndTimestamp,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\tAd.Pricing pricing,\\n\\t\\tuint256 minPrice\\n\\t) external onlyMedia {\\n\\t\\trequire(saleEndTimestamp > _blockTimestamp(), \\\"KD111\\\");\\n\\t\\trequire(saleEndTimestamp < displayStartTimestamp, \\\"KD112\\\");\\n\\t\\trequire(displayStartTimestamp < displayEndTimestamp, \\\"KD113\\\");\\n\\n\\t\\tif (!spaced[spaceMetadata]) {\\n\\t\\t\\t_newSpace(spaceMetadata);\\n\\t\\t}\\n\\t\\t_checkOverlapping(\\n\\t\\t\\tspaceMetadata,\\n\\t\\t\\tdisplayStartTimestamp,\\n\\t\\t\\tdisplayEndTimestamp\\n\\t\\t);\\n\\t\\tuint256 tokenId = Ad.id(\\n\\t\\t\\tspaceMetadata,\\n\\t\\t\\tdisplayStartTimestamp,\\n\\t\\t\\tdisplayEndTimestamp\\n\\t\\t);\\n\\t\\tAd.Period memory period = Ad.Period(\\n\\t\\t\\taddress(this),\\n\\t\\t\\tspaceMetadata,\\n\\t\\t\\ttokenMetadata,\\n\\t\\t\\t_blockTimestamp(),\\n\\t\\t\\tsaleEndTimestamp,\\n\\t\\t\\tdisplayStartTimestamp,\\n\\t\\t\\tdisplayEndTimestamp,\\n\\t\\t\\tpricing,\\n\\t\\t\\tminPrice,\\n\\t\\t\\t0,\\n\\t\\t\\tfalse\\n\\t\\t);\\n\\t\\tperiod.startPrice = _startPrice(period);\\n\\t\\t_savePeriod(spaceMetadata, tokenId, period);\\n\\t\\t_mintRight(address(this), tokenId, tokenMetadata);\\n\\t\\t_eventEmitter().emitNewPeriod(\\n\\t\\t\\ttokenId,\\n\\t\\t\\tspaceMetadata,\\n\\t\\t\\ttokenMetadata,\\n\\t\\t\\t_blockTimestamp(),\\n\\t\\t\\tsaleEndTimestamp,\\n\\t\\t\\tdisplayStartTimestamp,\\n\\t\\t\\tdisplayEndTimestamp,\\n\\t\\t\\tpricing,\\n\\t\\t\\tminPrice\\n\\t\\t);\\n\\t\\t_eventEmitter().emitTransferCustom(address(0), address(this), tokenId);\\n\\t}\\n\\n\\t/// @dev Deletes a period and its token.\\n\\t///      If there is any users locking the fund for the sale, the amount would be transfered\\n\\t///      to the user when deleting the period.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction deletePeriod(uint256 tokenId) external onlyMedia {\\n\\t\\trequire(periods[tokenId].mediaProxy != address(0), \\\"KD114\\\");\\n\\t\\trequire(ownerOf(tokenId) == address(this), \\\"KD121\\\");\\n\\t\\t_refundBiddingAmount(tokenId);\\n\\t\\t_burnRight(tokenId);\\n\\t\\t_deletePeriod(tokenId, periods[tokenId]);\\n\\t\\t_eventEmitter().emitDeletePeriod(tokenId);\\n\\t\\t_eventEmitter().emitTransferCustom(address(this), address(0), tokenId);\\n\\t}\\n\\n\\t/// @dev Buys the token that is defined as the specific period on an ad space.\\n\\t///      The price of the token is fixed.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction buy(uint256 tokenId) external payable exceptYourself {\\n\\t\\t_checkBeforeBuy(tokenId);\\n\\t\\tperiods[tokenId].sold = true;\\n\\t\\t_dropRight(tokenId);\\n\\t\\t_collectFees(msg.value / 10);\\n\\t\\t_eventEmitter().emitBuy(tokenId, msg.value, msg.sender);\\n\\t\\t_eventEmitter().emitTransferCustom(address(this), msg.sender, tokenId);\\n\\t}\\n\\n\\t/// @dev Buys the token that is defined as the specific period on an ad space.\\n\\t///      The price is decreasing as time goes by.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction buyBasedOnTime(uint256 tokenId) external payable exceptYourself {\\n\\t\\t_checkBeforeBuyBasedOnTime(tokenId);\\n\\t\\tperiods[tokenId].sold = true;\\n\\t\\t_dropRight(tokenId);\\n\\t\\t_collectFees(msg.value / 10);\\n\\t\\t_eventEmitter().emitBuy(tokenId, msg.value, msg.sender);\\n\\t\\t_eventEmitter().emitTransferCustom(address(this), msg.sender, tokenId);\\n\\t}\\n\\n\\t/// @dev Bids to participate in an auction.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction bid(uint256 tokenId) external payable exceptYourself nonReentrant {\\n\\t\\t_checkBeforeBid(tokenId);\\n\\t\\t_refundBiddingAmount(tokenId);\\n\\t\\t_biddingTotal += (msg.value - bidding[tokenId].price);\\n\\t\\tbidding[tokenId] = Bidding(tokenId, msg.sender, msg.value);\\n\\t\\t_eventEmitter().emitBid(tokenId, msg.value, msg.sender);\\n\\t}\\n\\n\\t/// @dev Receives the token you bidded if you are the successful bidder.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction receiveToken(uint256 tokenId)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\tonlySuccessfulBidder(tokenId)\\n\\t{\\n\\t\\t_checkBeforeReceiveToken(tokenId);\\n\\t\\tuint256 price = bidding[tokenId].price;\\n\\t\\tperiods[tokenId].sold = true;\\n\\t\\t_biddingTotal -= price;\\n\\t\\t_dropRight(tokenId);\\n\\t\\t_collectFees(price / 10);\\n\\t\\tdelete bidding[tokenId];\\n\\t\\t_eventEmitter().emitReceiveToken(tokenId, price, msg.sender);\\n\\t\\t_eventEmitter().emitTransferCustom(address(this), msg.sender, tokenId);\\n\\t}\\n\\n\\n\\t/// @dev Withdraws the fund deposited to the proxy contract.\\n\\t///      If you put 0 as the amount, you can withdraw as much as possible.\\n\\t/// @param amount uint256 of the withdrawal amount\\n\\tfunction withdraw(uint256 amount) external onlyMedia {\\n\\t\\tuint256 withdrawal = amount == 0 ? withdrawalAmount() : amount;\\n\\t\\tpayable(msg.sender).transfer(withdrawal);\\n\\t\\t_eventEmitter().emitWithdraw(withdrawal);\\n\\t}\\n\\n\\t/// @dev Proposes the metadata to the token you bought.\\n\\t///      Users can propose many times as long as it is accepted.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param metadata string of the proposal metadata\\n\\tfunction propose(uint256 tokenId, string memory metadata) external {\\n\\t\\trequire(ownerOf(tokenId) == msg.sender, \\\"KD012\\\");\\n\\t\\t_proposeToRight(tokenId, metadata);\\n\\t\\t_eventEmitter().emitPropose(tokenId, metadata);\\n\\t}\\n\\n\\t/// @dev Accepts the proposal.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction acceptProposal(uint256 tokenId) external onlyMedia {\\n\\t\\tstring memory metadata = proposed[tokenId].content;\\n\\t\\trequire(bytes(metadata).length != 0, \\\"KD130\\\");\\n\\t\\trequire(ownerOf(tokenId) == proposed[tokenId].proposer, \\\"KD131\\\");\\n\\t\\t_acceptProposal(tokenId, metadata);\\n\\t\\t_eventEmitter().emitAcceptProposal(tokenId, metadata);\\n\\t}\\n\\n\\t/// @dev Denies the submitted proposal, mentioning what is the problem.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param reason string of the reason why it is rejected\\n\\t/// @param offensive bool if the content would offend somebody\\n\\tfunction denyProposal(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory reason,\\n\\t\\tbool offensive\\n\\t) external onlyMedia {\\n\\t\\tstring memory metadata = proposed[tokenId].content;\\n\\t\\trequire(bytes(metadata).length != 0, \\\"KD130\\\");\\n\\t\\tdeniedReasons[tokenId].push(Denied(reason, offensive));\\n\\t\\t_eventEmitter().emitDenyProposal(tokenId, metadata, reason, offensive);\\n\\t}\\n\\n\\t/// @dev Overrides transferFrom to emit an event from the common emitter.\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public override {\\n\\t\\tsuper.transferFrom(from, to, tokenId);\\n\\t\\t_eventEmitter().emitTransferCustom(from, to, tokenId);\\n\\t}\\n\\n\\t/// @dev Overrides transferFrom to emit an event from the common emitter.\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public override {\\n\\t\\tsuper.safeTransferFrom(from, to, tokenId);\\n\\t\\t_eventEmitter().emitTransferCustom(from, to, tokenId);\\n\\t}\\n\\n\\t/// @dev Returns ID based on the space metadata, display start timestamp, and\\n\\t///      display end timestamp. These three makes it the unique.\\n\\t/// @param spaceMetadata uint256 of the space metadata\\n\\t/// @param displayStartTimestamp uint256 of the start timestamp for the display\\n\\t/// @param displayEndTimestamp uint256 of the end timestamp for the display\\n\\tfunction adId(\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp\\n\\t) public pure returns (uint256) {\\n\\t\\treturn Ad.id(spaceMetadata, displayStartTimestamp, displayEndTimestamp);\\n\\t}\\n\\n\\t/// @dev Returns the balacne deposited on the proxy contract.\\n\\tfunction balance() public view returns (uint256) {\\n\\t\\treturn address(this).balance;\\n\\t}\\n\\n\\t/// @dev Returns the withdrawal amount.\\n\\tfunction withdrawalAmount() public view returns (uint256) {\\n\\t\\treturn address(this).balance - _biddingTotal - _offeredTotal;\\n\\t}\\n\\n\\t/// @dev Displays the ad content that is approved by the media owner.\\n\\t/// @param spaceMetadata string of the space metadata\\n\\tfunction display(string memory spaceMetadata)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\tuint256[] memory tokenIds = tokenIdsOf(spaceMetadata);\\n\\t\\tfor (uint256 i = 0; i < tokenIds.length; i++) {\\n\\t\\t\\tAd.Period memory period = periods[tokenIds[i]];\\n\\t\\t\\tif (\\n\\t\\t\\t\\tperiod.displayStartTimestamp <= _blockTimestamp() &&\\n\\t\\t\\t\\tperiod.displayEndTimestamp >= _blockTimestamp()\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn accepted[tokenIds[i]];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn \\\"\\\";\\n\\t}\\n\\n\\tfunction _checkBeforeReceiveToken(uint256 tokenId) internal view {\\n\\t\\trequire(periods[tokenId].pricing == Ad.Pricing.BIDDING, \\\"KD124\\\");\\n\\t\\trequire(!periods[tokenId].sold, \\\"KD121\\\");\\n\\t\\trequire(periods[tokenId].saleEndTimestamp < _blockTimestamp(), \\\"KD125\\\");\\n\\t}\\n\\n\\tfunction _collectFees(uint256 value) internal {\\n\\t\\tpayable(vaultAddress()).transfer(value);\\n\\t}\\n}\\n\",\"keccak256\":\"0x4b5341feeff19d313fd504a14ec28a8f4aa2c4b38b0ee2b053e64b5d5b0e9649\",\"license\":\"UNLICENSED\"},\"contracts/accessors/NameAccessor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"./NameRegistry.sol\\\";\\n\\n/// @title NameAccessor - manages the endpoints.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ncontract NameAccessor {\\n\\tNameRegistry internal _nameRegistry;\\n\\n\\t/// @dev Sets the address of NameRegistry.\\n\\t/// @param nameRegistry address of the NameRegistry\\n\\tfunction initialize(address nameRegistry) internal {\\n\\t\\t_nameRegistry = NameRegistry(nameRegistry);\\n\\t}\\n\\n\\t/// @dev Prevents calling a function from anyone except the accepted contract.\\n\\tmodifier onlyAllowedContract() {\\n\\t\\trequire(_nameRegistry.allowedContracts(msg.sender), \\\"KD013\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyFactory() {\\n\\t\\trequire(msg.sender == mediaFactoryAddress(), \\\"KD010\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Throws if called by any account other than the owner.\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(owner() == msg.sender, \\\"KD012\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Gets the address of NameRegistry\\n\\tfunction nameRegistryAddress() public view returns (address) {\\n\\t\\treturn address(_nameRegistry);\\n\\t}\\n\\n\\t/// @dev Gets the address of AdPool.\\n\\tfunction adPoolAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"AdPool\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of MediaFactory.\\n\\tfunction mediaFactoryAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"MediaFactory\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of MediaRegistry.\\n\\tfunction mediaRegistryAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"MediaRegistry\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of Vault.\\n\\tfunction vaultAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"Vault\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of EventEmitter.\\n\\tfunction eventEmitterAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"EventEmitter\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the owner address.\\n\\tfunction owner() public view returns (address) {\\n\\t\\treturn _nameRegistry.owner();\\n\\t}\\n}\\n\",\"keccak256\":\"0x9927dc19c0bf77d0f42166a495a447d3983696d677606353792ff7bdcb980194\",\"license\":\"UNLICENSED\"},\"contracts/accessors/NameRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title NameRegistry - saves a set of addresses.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ncontract NameRegistry is Ownable {\\n\\tusing Address for address;\\n\\n\\tmapping(address => bool) public allowedContracts;\\n\\tmapping(bytes32 => address) private _addressStorage;\\n\\n\\tconstructor() Ownable() {}\\n\\n\\t/// @dev Sets the address associated with the key name.\\n\\t///      If the address is the contract, not an EOA, it is\\n\\t///      saved as the allowed contract list.\\n\\t/// @param key bytes32 of the key\\n\\t/// @param value address of the value\\n\\tfunction set(bytes32 key, address value) public onlyOwner {\\n\\t\\t_addressStorage[key] = value;\\n\\t\\tif (value.isContract()) {\\n\\t\\t\\tallowedContracts[value] = true;\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev Gets the address associated with the key name.\\n\\t/// @param key bytes32 of the key\\n\\tfunction get(bytes32 key) public view returns (address) {\\n\\t\\treturn _addressStorage[key];\\n\\t}\\n}\\n\",\"keccak256\":\"0xb67818d96ed7d71892d5b83b9174374e758afacfee0d4e13105b40c9467c644c\",\"license\":\"UNLICENSED\"},\"contracts/accessors/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n\\taddress internal _owner;\\n\\n\\tevent OwnershipTransferred(\\n\\t\\taddress indexed previousOwner,\\n\\t\\taddress indexed newOwner\\n\\t);\\n\\n\\t/**\\n\\t * @dev Initializes the contract setting the deployer as the initial owner.\\n\\t */\\n\\tconstructor() {\\n\\t\\t_setOwner(_msgSender());\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address of the current owner.\\n\\t */\\n\\tfunction owner() public view virtual returns (address) {\\n\\t\\treturn _owner;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Throws if called by any account other than the owner.\\n\\t */\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Leaves the contract without owner. It will not be possible to call\\n\\t * `onlyOwner` functions anymore. Can only be called by the current owner.\\n\\t *\\n\\t * NOTE: Renouncing ownership will leave the contract without an owner,\\n\\t * thereby removing any functionality that is only available to the owner.\\n\\t */\\n\\tfunction renounceOwnership() public virtual onlyOwner {\\n\\t\\t_setOwner(address(0));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n\\t * Can only be called by the current owner.\\n\\t */\\n\\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\\n\\t\\trequire(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n\\t\\t_setOwner(newOwner);\\n\\t}\\n\\n\\tfunction _setOwner(address newOwner) private {\\n\\t\\taddress oldOwner = _owner;\\n\\t\\t_owner = newOwner;\\n\\t\\temit OwnershipTransferred(oldOwner, newOwner);\\n\\t}\\n}\\n\",\"keccak256\":\"0xe2505d2c93a1f60b3b74357557c24bc6ec10d36870165ff8454d04adf5e368cf\",\"license\":\"MIT\"},\"contracts/base/DistributionRight.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"../accessors/NameAccessor.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/// @title DistributionRight - represents NFTs based on ad spaces and periods.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ncontract DistributionRight is ERC721 {\\n\\tstruct Denied {\\n\\t\\tstring reason;\\n\\t\\tbool offensive;\\n\\t}\\n\\tstruct Proposal {\\n\\t\\tstring content;\\n\\t\\taddress proposer;\\n\\t}\\n\\tmapping(uint256 => Proposal) public proposed;\\n\\tmapping(uint256 => Denied[]) public deniedReasons;\\n\\tmapping(uint256 => string) public accepted;\\n\\n\\tfunction _mintRight(\\n\\t\\taddress reciever,\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory metadata\\n\\t) internal {\\n\\t\\t_mint(reciever, tokenId);\\n\\t\\t_tokenURIs[tokenId] = metadata;\\n\\t}\\n\\n\\tfunction _burnRight(uint256 tokenId) internal {\\n\\t\\t_burn(tokenId);\\n\\t\\t_tokenURIs[tokenId] = \\\"\\\";\\n\\t}\\n\\n\\tfunction _dropRight(uint256 tokenId) internal {\\n\\t\\t_transfer(address(this), msg.sender, tokenId);\\n\\t}\\n\\n\\tfunction _proposeToRight(uint256 tokenId, string memory metadata) internal {\\n\\t\\tproposed[tokenId] = Proposal(metadata, msg.sender);\\n\\t}\\n\\n\\tfunction _clearProposal(uint256 tokenId) internal {\\n\\t\\tproposed[tokenId] = Proposal(\\\"\\\", msg.sender);\\n\\t}\\n\\n\\tfunction _acceptProposal(uint256 tokenId, string memory metadata) internal {\\n\\t\\taccepted[tokenId] = metadata;\\n\\t\\t_clearProposal(tokenId);\\n\\t}\\n}\\n\",\"keccak256\":\"0x0ce2a728c71b66318239bb839c5c23dfbad3c2c7258b4ae56fbcb8e239389c44\",\"license\":\"UNLICENSED\"},\"contracts/base/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IERC721Metadata.sol\\\";\\nimport \\\"../interfaces/IERC721Receiver.sol\\\";\\nimport \\\"../interfaces/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\ncontract ERC721 is Context, IERC721Enumerable, IERC721Metadata {\\n\\tusing Address for address;\\n\\tusing Strings for uint256;\\n\\n\\tstring internal dummy; // TODO: delete\\n\\n\\t// Token name\\n\\tstring internal _name;\\n\\n\\t// Token symbol\\n\\tstring internal _symbol;\\n\\n\\t// Base URI\\n\\tstring internal _baseURI;\\n\\n\\t// Token URIs\\n\\tmapping(uint256 => string) internal _tokenURIs;\\n\\n\\t// Mapping from token ID to owner address\\n\\tmapping(uint256 => address) internal _owners;\\n\\n\\t// Mapping owner address to token count\\n\\tmapping(address => uint256) internal _balances;\\n\\n\\t// Mapping from token ID to approved address\\n\\tmapping(uint256 => address) internal _tokenApprovals;\\n\\n\\t// Mapping from owner to operator approvals\\n\\tmapping(address => mapping(address => bool)) internal _operatorApprovals;\\n\\n\\t// Mapping from owner to list of owned token IDs\\n\\tmapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n\\t// Mapping from token ID to index of the owner tokens list\\n\\tmapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n\\t// Array with all token ids, used for enumeration\\n\\tuint256[] private _allTokens;\\n\\n\\t// Mapping from token id to position in the allTokens array\\n\\tmapping(uint256 => uint256) private _allTokensIndex;\\n\\n\\t/**\\n\\t * @dev See {IERC165-supportsInterface}.\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId)\\n\\t\\tpublic\\n\\t\\tpure\\n\\t\\tvirtual\\n\\t\\toverride(IERC165)\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn\\n\\t\\t\\tinterfaceId == type(IERC721).interfaceId ||\\n\\t\\t\\tinterfaceId == type(IERC721Metadata).interfaceId;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-balanceOf}.\\n\\t */\\n\\tfunction balanceOf(address owner)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n\\t\\treturn _balances[owner];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-ownerOf}.\\n\\t */\\n\\tfunction ownerOf(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (address)\\n\\t{\\n\\t\\taddress owner = _owners[tokenId];\\n\\t\\trequire(owner != address(0), \\\"KD114\\\");\\n\\t\\treturn owner;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Metadata-name}.\\n\\t */\\n\\tfunction name() public view virtual override returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Metadata-symbol}.\\n\\t */\\n\\tfunction symbol() public view virtual override returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Metadata-tokenURI}.\\n\\t */\\n\\tfunction tokenURI(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\t_exists(tokenId),\\n\\t\\t\\t\\\"ERC721Metadata: URI query for nonexistent token\\\"\\n\\t\\t);\\n\\n\\t\\treturn\\n\\t\\t\\tbytes(_baseURI).length > 0\\n\\t\\t\\t\\t? string(abi.encodePacked(_baseURI, _tokenURIs[tokenId]))\\n\\t\\t\\t\\t: _tokenURIs[tokenId];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-approve}.\\n\\t */\\n\\tfunction approve(address to, uint256 tokenId) public virtual override {\\n\\t\\taddress owner = ownerOf(tokenId);\\n\\t\\trequire(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n\\t\\trequire(\\n\\t\\t\\t_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n\\t\\t\\t\\\"ERC721: approve caller is not owner nor approved for all\\\"\\n\\t\\t);\\n\\n\\t\\t_approve(to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-getApproved}.\\n\\t */\\n\\tfunction getApproved(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (address)\\n\\t{\\n\\t\\trequire(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n\\t\\treturn _tokenApprovals[tokenId];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-setApprovalForAll}.\\n\\t */\\n\\tfunction setApprovalForAll(address operator, bool approved)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t{\\n\\t\\trequire(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n\\t\\t_operatorApprovals[_msgSender()][operator] = approved;\\n\\t\\temit ApprovalForAll(_msgSender(), operator, approved);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-isApprovedForAll}.\\n\\t */\\n\\tfunction isApprovedForAll(address owner, address operator)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn _operatorApprovals[owner][operator];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-transferFrom}.\\n\\t */\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public virtual override {\\n\\t\\t//solhint-disable-next-line max-line-length\\n\\t\\trequire(\\n\\t\\t\\t_isApprovedOrOwner(_msgSender(), tokenId),\\n\\t\\t\\t\\\"ERC721: transfer caller is not owner nor approved\\\"\\n\\t\\t);\\n\\n\\t\\t_transfer(from, to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-safeTransferFrom}.\\n\\t */\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public virtual override {\\n\\t\\tsafeTransferFrom(from, to, tokenId, \\\"\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-safeTransferFrom}.\\n\\t */\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) public virtual override {\\n\\t\\trequire(\\n\\t\\t\\t_isApprovedOrOwner(_msgSender(), tokenId),\\n\\t\\t\\t\\\"ERC721: transfer caller is not owner nor approved\\\"\\n\\t\\t);\\n\\t\\t_safeTransfer(from, to, tokenId, _data);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n\\t * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n\\t *\\n\\t * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n\\t *\\n\\t * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n\\t * implement alternative mechanisms to perform token transfer, such as signature-based.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `from` cannot be the zero address.\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must exist and be owned by `from`.\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _safeTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) internal virtual {\\n\\t\\t_transfer(from, to, tokenId);\\n\\t\\trequire(\\n\\t\\t\\t_checkOnERC721Received(from, to, tokenId, _data),\\n\\t\\t\\t\\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns whether `tokenId` exists.\\n\\t *\\n\\t * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n\\t *\\n\\t * Tokens start existing when they are minted (`_mint`),\\n\\t * and stop existing when they are burned (`_burn`).\\n\\t */\\n\\tfunction _exists(uint256 tokenId) internal view virtual returns (bool) {\\n\\t\\treturn _owners[tokenId] != address(0);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must exist.\\n\\t */\\n\\tfunction _isApprovedOrOwner(address spender, uint256 tokenId)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\trequire(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n\\t\\taddress owner = ownerOf(tokenId);\\n\\t\\treturn (spender == owner ||\\n\\t\\t\\tgetApproved(tokenId) == spender ||\\n\\t\\t\\tisApprovedForAll(owner, spender));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Safely mints `tokenId` and transfers it to `to`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must not exist.\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _safeMint(address to, uint256 tokenId) internal virtual {\\n\\t\\t_safeMint(to, tokenId, \\\"\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n\\t * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n\\t */\\n\\tfunction _safeMint(\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) internal virtual {\\n\\t\\t_mint(to, tokenId);\\n\\t\\trequire(\\n\\t\\t\\t_checkOnERC721Received(address(0), to, tokenId, _data),\\n\\t\\t\\t\\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Mints `tokenId` and transfers it to `to`.\\n\\t *\\n\\t * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must not exist.\\n\\t * - `to` cannot be the zero address.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _mint(address to, uint256 tokenId) internal virtual {\\n\\t\\trequire(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n\\t\\trequire(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n\\t\\t_beforeTokenTransfer(address(0), to, tokenId);\\n\\n\\t\\t_balances[to] += 1;\\n\\t\\t_owners[tokenId] = to;\\n\\n\\t\\temit Transfer(address(0), to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Destroys `tokenId`.\\n\\t * The approval is cleared when the token is burned.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must exist.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _burn(uint256 tokenId) internal virtual {\\n\\t\\taddress owner = ownerOf(tokenId);\\n\\n\\t\\t_beforeTokenTransfer(owner, address(0), tokenId);\\n\\n\\t\\t// Clear approvals\\n\\t\\t_approve(address(0), tokenId);\\n\\n\\t\\t_balances[owner] -= 1;\\n\\t\\tdelete _owners[tokenId];\\n\\n\\t\\temit Transfer(owner, address(0), tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers `tokenId` from `from` to `to`.\\n\\t *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must be owned by `from`.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _transfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) internal virtual {\\n\\t\\trequire(\\n\\t\\t\\townerOf(tokenId) == from,\\n\\t\\t\\t\\\"ERC721: transfer of token that is not own\\\"\\n\\t\\t);\\n\\t\\trequire(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n\\t\\t_beforeTokenTransfer(from, to, tokenId);\\n\\n\\t\\t// Clear approvals from the previous owner\\n\\t\\t_approve(address(0), tokenId);\\n\\n\\t\\t_balances[from] -= 1;\\n\\t\\t_balances[to] += 1;\\n\\t\\t_owners[tokenId] = to;\\n\\n\\t\\temit Transfer(from, to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Approve `to` to operate on `tokenId`\\n\\t *\\n\\t * Emits a {Approval} event.\\n\\t */\\n\\tfunction _approve(address to, uint256 tokenId) internal virtual {\\n\\t\\t_tokenApprovals[tokenId] = to;\\n\\t\\temit Approval(ownerOf(tokenId), to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n\\t * The call is not executed if the target address is not a contract.\\n\\t *\\n\\t * @param from address representing the previous owner of the given token ID\\n\\t * @param to target address that will receive the tokens\\n\\t * @param tokenId uint256 ID of the token to be transferred\\n\\t * @param _data bytes optional data to send along with the call\\n\\t * @return bool whether the call correctly returned the expected magic value\\n\\t */\\n\\tfunction _checkOnERC721Received(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) private returns (bool) {\\n\\t\\tif (to.isContract()) {\\n\\t\\t\\ttry\\n\\t\\t\\t\\tIERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\\n\\t\\t\\treturns (bytes4 retval) {\\n\\t\\t\\t\\treturn retval == IERC721Receiver(to).onERC721Received.selector;\\n\\t\\t\\t} catch (bytes memory reason) {\\n\\t\\t\\t\\tif (reason.length == 0) {\\n\\t\\t\\t\\t\\trevert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tassembly {\\n\\t\\t\\t\\t\\t\\trevert(add(32, reason), mload(reason))\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Hook that is called before any token transfer. This includes minting\\n\\t * and burning.\\n\\t *\\n\\t * Calling conditions:\\n\\t *\\n\\t * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n\\t * transferred to `to`.\\n\\t * - When `from` is zero, `tokenId` will be minted for `to`.\\n\\t * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n\\t * - `from` and `to` are never both zero.\\n\\t *\\n\\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n\\t */\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) internal {\\n\\t\\tif (from == address(0)) {\\n\\t\\t\\t_addTokenToAllTokensEnumeration(tokenId);\\n\\t\\t} else if (from != to) {\\n\\t\\t\\t_removeTokenFromOwnerEnumeration(from, tokenId);\\n\\t\\t}\\n\\t\\tif (to == address(0)) {\\n\\t\\t\\t_removeTokenFromAllTokensEnumeration(tokenId);\\n\\t\\t} else if (to != from) {\\n\\t\\t\\t_addTokenToOwnerEnumeration(to, tokenId);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n\\t */\\n\\tfunction tokenOfOwnerByIndex(address owner, uint256 index)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\tindex < balanceOf(owner),\\n\\t\\t\\t\\\"ERC721Enumerable: owner index out of bounds\\\"\\n\\t\\t);\\n\\t\\treturn _ownedTokens[owner][index];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Enumerable-totalSupply}.\\n\\t */\\n\\tfunction totalSupply() public view virtual override returns (uint256) {\\n\\t\\treturn _allTokens.length;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Enumerable-tokenByIndex}.\\n\\t */\\n\\tfunction tokenByIndex(uint256 index)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\tindex < totalSupply(),\\n\\t\\t\\t\\\"ERC721Enumerable: global index out of bounds\\\"\\n\\t\\t);\\n\\t\\treturn _allTokens[index];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n\\t * @param to address representing the new owner of the given token ID\\n\\t * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n\\t */\\n\\tfunction _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n\\t\\tuint256 length = balanceOf(to);\\n\\t\\t_ownedTokens[to][length] = tokenId;\\n\\t\\t_ownedTokensIndex[tokenId] = length;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to add a token to this extension's token tracking data structures.\\n\\t * @param tokenId uint256 ID of the token to be added to the tokens list\\n\\t */\\n\\tfunction _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n\\t\\t_allTokensIndex[tokenId] = _allTokens.length;\\n\\t\\t_allTokens.push(tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n\\t * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n\\t * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n\\t * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n\\t * @param from address representing the previous owner of the given token ID\\n\\t * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n\\t */\\n\\tfunction _removeTokenFromOwnerEnumeration(address from, uint256 tokenId)\\n\\t\\tprivate\\n\\t{\\n\\t\\t// To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n\\t\\t// then delete the last slot (swap and pop).\\n\\n\\t\\tuint256 lastTokenIndex = balanceOf(from) - 1;\\n\\t\\tuint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n\\t\\t// When the token to delete is the last token, the swap operation is unnecessary\\n\\t\\tif (tokenIndex != lastTokenIndex) {\\n\\t\\t\\tuint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n\\t\\t\\t_ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n\\t\\t\\t_ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\t\\t}\\n\\n\\t\\t// This also deletes the contents at the last position of the array\\n\\t\\tdelete _ownedTokensIndex[tokenId];\\n\\t\\tdelete _ownedTokens[from][lastTokenIndex];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to remove a token from this extension's token tracking data structures.\\n\\t * This has O(1) time complexity, but alters the order of the _allTokens array.\\n\\t * @param tokenId uint256 ID of the token to be removed from the tokens list\\n\\t */\\n\\tfunction _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n\\t\\t// To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n\\t\\t// then delete the last slot (swap and pop).\\n\\n\\t\\tuint256 lastTokenIndex = _allTokens.length - 1;\\n\\t\\tuint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n\\t\\t// When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n\\t\\t// rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n\\t\\t// an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n\\t\\tuint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n\\t\\t_allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n\\t\\t_allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n\\t\\t// This also deletes the contents at the last position of the array\\n\\t\\tdelete _allTokensIndex[tokenId];\\n\\t\\t_allTokens.pop();\\n\\t}\\n}\\n\",\"keccak256\":\"0xeeee7489bb49843b3f0ecd4a5c96130e11f8ddfeabc9dd299b16f302603c07a6\",\"license\":\"UNLICENSED\"},\"contracts/base/PeriodManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"./SpaceManager.sol\\\";\\nimport \\\"../libraries/Ad.sol\\\";\\n\\n/// @title PeriodManager - manages ad periods.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\nabstract contract PeriodManager is SpaceManager {\\n\\t/// @dev tokenId <- metadata * displayStartTimestamp * displayEndTimestamp\\n\\tmapping(uint256 => Ad.Period) public periods;\\n\\n\\t/// @dev Maps the space metadata with tokenIds of ad periods.\\n\\tmapping(string => uint256[]) internal _periodKeys;\\n\\n\\tfunction _checkOverlapping(\\n\\t\\tstring memory metadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp\\n\\t) internal view {\\n\\t\\tfor (uint256 i = 0; i < _periodKeys[metadata].length; i++) {\\n\\t\\t\\tAd.Period memory existing = periods[_periodKeys[metadata][i]];\\n\\t\\t\\tif (\\n\\t\\t\\t\\t_isOverlapped(\\n\\t\\t\\t\\t\\tdisplayStartTimestamp,\\n\\t\\t\\t\\t\\tdisplayEndTimestamp,\\n\\t\\t\\t\\t\\texisting.displayStartTimestamp,\\n\\t\\t\\t\\t\\texisting.displayEndTimestamp\\n\\t\\t\\t\\t)\\n\\t\\t\\t) {\\n\\t\\t\\t\\trevert(\\\"KD110\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _isOverlapped(\\n\\t\\tuint256 newFromTimestamp,\\n\\t\\tuint256 newToTimestamp,\\n\\t\\tuint256 currentFromTimestamp,\\n\\t\\tuint256 currentToTimestamp\\n\\t) internal pure returns (bool) {\\n\\t\\treturn\\n\\t\\t\\t!(_isPast(newToTimestamp, currentFromTimestamp) ||\\n\\t\\t\\t\\t_isFuture(newFromTimestamp, currentToTimestamp));\\n\\t}\\n\\n\\tfunction _deletePeriod(uint256 tokenId, Ad.Period memory period) internal {\\n\\t\\tstring memory spaceMetadata = periods[tokenId].spaceMetadata;\\n\\t\\tuint256 index = 0;\\n\\t\\tfor (uint256 i = 1; i < _periodKeys[spaceMetadata].length + 1; i++) {\\n\\t\\t\\tif (_periodKeys[spaceMetadata][i - 1] == tokenId) {\\n\\t\\t\\t\\tindex = i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\trequire(index != 0, \\\"No deletable keys\\\");\\n\\t\\tdelete _periodKeys[spaceMetadata][index - 1];\\n\\t\\tdelete periods[tokenId];\\n\\t\\t_adPool().deletePeriod(tokenId);\\n\\t}\\n\\n\\tfunction _savePeriod(\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tuint256 tokenId,\\n\\t\\tAd.Period memory period\\n\\t) internal {\\n\\t\\t_periodKeys[spaceMetadata].push(tokenId);\\n\\t\\tperiods[tokenId] = period;\\n\\t\\t_adPool().addPeriod(tokenId, period);\\n\\t}\\n\\n\\tfunction _isPast(uint256 newToTimestamp, uint256 currentFromTimestamp)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn newToTimestamp < currentFromTimestamp;\\n\\t}\\n\\n\\tfunction _isFuture(uint256 newFromTimestamp, uint256 currentToTimestamp)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn currentToTimestamp < newFromTimestamp;\\n\\t}\\n\\n\\tfunction _checkNowOnSale(string memory spaceMetadata) internal view {\\n\\t\\tfor (uint256 i = 0; i < _periodKeys[spaceMetadata].length; i++) {\\n\\t\\t\\tif (!periods[_periodKeys[spaceMetadata][i]].sold) {\\n\\t\\t\\t\\trevert(\\\"now on sale\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev Returns tokenIds tied with the space metadata\\n\\t/// @param spaceMetadata string of the space metadata\\n\\tfunction tokenIdsOf(string memory spaceMetadata)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (uint256[] memory)\\n\\t{\\n\\t\\treturn _periodKeys[spaceMetadata];\\n\\t}\\n}\\n\",\"keccak256\":\"0x701e1cb15419b21a803c30dc969f613ff1b6eb147382c949aefcc33eb420885d\",\"license\":\"UNLICENSED\"},\"contracts/base/PricingStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"./PeriodManager.sol\\\";\\nimport \\\"../common/BlockTimestamp.sol\\\";\\n\\n/// @title PricingStrategy - manages how to sell them out.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\nabstract contract PricingStrategy is PeriodManager, BlockTimestamp {\\n\\tstruct Bidding {\\n\\t\\tuint256 tokenId;\\n\\t\\taddress bidder;\\n\\t\\tuint256 price;\\n\\t}\\n\\tstruct Offer {\\n\\t\\tstring spaceMetadata;\\n\\t\\tuint256 displayStartTimestamp;\\n\\t\\tuint256 displayEndTimestamp;\\n\\t\\taddress sender;\\n\\t\\tuint256 price;\\n\\t}\\n\\t/// @dev Maps tokenId with bidding info\\n\\tmapping(uint256 => Bidding) public bidding;\\n\\n\\t/// @dev Maps tokenId with offer info\\n\\tmapping(uint256 => Offer) public offered;\\n\\n\\t/// @dev The total bidding value\\n\\tuint256 internal _biddingTotal;\\n\\n\\t/// @dev The total value offered by users\\n\\tuint256 internal _offeredTotal;\\n\\n\\t/// @dev Returns the current price.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction currentPrice(uint256 tokenId) public view returns (uint256) {\\n\\t\\tAd.Period memory period = periods[tokenId];\\n\\t\\tif (period.pricing == Ad.Pricing.RRP) {\\n\\t\\t\\treturn period.minPrice;\\n\\t\\t}\\n\\t\\tif (period.pricing == Ad.Pricing.DPBT) {\\n\\t\\t\\treturn\\n\\t\\t\\t\\tperiod.startPrice -\\n\\t\\t\\t\\t((period.startPrice - period.minPrice) *\\n\\t\\t\\t\\t\\t(_blockTimestamp() - period.saleStartTimestamp)) /\\n\\t\\t\\t\\t(period.saleEndTimestamp - period.saleStartTimestamp);\\n\\t\\t}\\n\\t\\tif (period.pricing == Ad.Pricing.BIDDING) {\\n\\t\\t\\treturn bidding[tokenId].price;\\n\\t\\t}\\n\\t\\tif (period.pricing == Ad.Pricing.OFFER) {\\n\\t\\t\\treturn offered[tokenId].price;\\n\\t\\t}\\n\\t\\trevert(\\\"not exist\\\");\\n\\t}\\n\\n\\tfunction _startPrice(Ad.Period memory period)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tif (period.pricing == Ad.Pricing.RRP) {\\n\\t\\t\\treturn period.minPrice;\\n\\t\\t} else if (period.pricing == Ad.Pricing.DPBT) {\\n\\t\\t\\treturn period.minPrice * 10;\\n\\t\\t} else if (period.pricing == Ad.Pricing.BIDDING) {\\n\\t\\t\\treturn period.minPrice;\\n\\t\\t} else if (period.pricing == Ad.Pricing.OFFER) {\\n\\t\\t\\treturn period.minPrice;\\n\\t\\t} else {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xe912b54dd8baf0a13dba9fa62bd65d195ba14628a9cec5a7486f32e4063003d7\",\"license\":\"UNLICENSED\"},\"contracts/base/PrimarySales.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"./PricingStrategy.sol\\\";\\n\\n/// @title PrimarySales - manages how to sell them out.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\nabstract contract PrimarySales is PricingStrategy {\\n\\tfunction _checkBeforeBuy(uint256 tokenId) internal {\\n\\t\\trequire(periods[tokenId].pricing == Ad.Pricing.RRP, \\\"KD120\\\");\\n\\t\\trequire(!periods[tokenId].sold, \\\"KD121\\\");\\n\\t\\trequire(periods[tokenId].minPrice == msg.value, \\\"KD122\\\");\\n\\t}\\n\\n\\tfunction _checkBeforeBuyBasedOnTime(uint256 tokenId) internal {\\n\\t\\trequire(periods[tokenId].pricing == Ad.Pricing.DPBT, \\\"KD123\\\");\\n\\t\\trequire(!periods[tokenId].sold, \\\"KD121\\\");\\n\\t\\trequire(currentPrice(tokenId) <= msg.value, \\\"KD122\\\");\\n\\t}\\n\\n\\tfunction _checkBeforeBid(uint256 tokenId) internal {\\n\\t\\trequire(periods[tokenId].pricing == Ad.Pricing.BIDDING, \\\"KD124\\\");\\n\\t\\trequire(!periods[tokenId].sold, \\\"KD121\\\");\\n\\t\\trequire(currentPrice(tokenId) < msg.value, \\\"KD122\\\");\\n\\t}\\n\\n\\tfunction _refundBiddingAmount(uint256 tokenId) internal returns (bool sent) {\\n\\t\\tif (\\n\\t\\t\\tperiods[tokenId].pricing == Ad.Pricing.BIDDING &&\\n\\t\\t\\tbidding[tokenId].bidder != address(0)\\n\\t\\t) {\\n\\t\\t\\tsent = payable(bidding[tokenId].bidder).send(bidding[tokenId].price);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _refundOfferedAmount(uint256 tokenId) internal returns (bool sent) {\\n\\t\\tif (\\n\\t\\t\\tperiods[tokenId].pricing == Ad.Pricing.OFFER &&\\n\\t\\t\\toffered[tokenId].sender != address(0)\\n\\t\\t) {\\n\\t\\t\\tsent = payable(offered[tokenId].sender).send(offered[tokenId].price);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xce77fecb6d47a62a7a4a2f5b0866573f4ac6e9f1ff76ef91b5f9293abc10d572\",\"license\":\"UNLICENSED\"},\"contracts/base/SpaceManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../accessors/NameAccessor.sol\\\";\\nimport \\\"../peripheries/MediaRegistry.sol\\\";\\nimport \\\"../peripheries/AdPool.sol\\\";\\nimport \\\"../peripheries/EventEmitter.sol\\\";\\n\\n/// @title SpaceManager - manages ad spaces.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\nabstract contract SpaceManager is NameAccessor {\\n\\t/// @dev Returns spaceId that is tied with space metadata.\\n\\tmapping(string => bool) public spaced;\\n\\n\\tfunction _newSpace(string memory spaceMetadata) internal {\\n\\t\\trequire(\\n\\t\\t\\t!spaced[spaceMetadata] && !_adPool().spaced(spaceMetadata),\\n\\t\\t\\t\\\"KD100\\\"\\n\\t\\t);\\n\\t\\tspaced[spaceMetadata] = true;\\n\\t\\t_adPool().addSpace(spaceMetadata);\\n\\t\\t_eventEmitter().emitNewSpace(spaceMetadata);\\n\\t}\\n\\n\\t/**\\n\\t * Accessors\\n\\t */\\n\\tfunction _mediaRegistry() internal view returns (MediaRegistry) {\\n\\t\\treturn MediaRegistry(mediaRegistryAddress());\\n\\t}\\n\\n\\tfunction _adPool() internal view returns (AdPool) {\\n\\t\\treturn AdPool(adPoolAddress());\\n\\t}\\n\\n\\tfunction _eventEmitter() internal view returns (EventEmitter) {\\n\\t\\treturn EventEmitter(eventEmitterAddress());\\n\\t}\\n}\\n\",\"keccak256\":\"0x92949ed869d4c8a53301e39124d4c1faf57919024a33f71849c23df06028229f\",\"license\":\"UNLICENSED\"},\"contracts/common/BlockTimestamp.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\n/// @title BlockTimestamp - gets a block timestamp.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\nabstract contract BlockTimestamp {\\n\\t/// @dev Method that exists purely to be overridden for tests\\n\\tfunction _blockTimestamp() internal view virtual returns (uint256) {\\n\\t\\treturn block.timestamp;\\n\\t}\\n}\\n\",\"keccak256\":\"0x417bf100ecc94b19a01559e899f68e19777eae593c783d8280d13bcabc8e43a2\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n\\t/**\\n\\t * @dev Returns true if this contract implements the interface defined by\\n\\t * `interfaceId`. See the corresponding\\n\\t * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n\\t * to learn more about how these ids are created.\\n\\t *\\n\\t * This function call must use less than 30 000 gas.\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x47fb51ba47a6f1dd885afda05a6d11d7f6bb24d594dbfaa4411c5185c202265e\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n\\t/**\\n\\t * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n\\t */\\n\\tevent Transfer(\\n\\t\\taddress indexed from,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 indexed tokenId\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n\\t */\\n\\tevent Approval(\\n\\t\\taddress indexed owner,\\n\\t\\taddress indexed approved,\\n\\t\\tuint256 indexed tokenId\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n\\t */\\n\\tevent ApprovalForAll(\\n\\t\\taddress indexed owner,\\n\\t\\taddress indexed operator,\\n\\t\\tbool approved\\n\\t);\\n\\n\\t/**\\n\\t * @dev Returns the number of tokens in ``owner``'s account.\\n\\t */\\n\\tfunction balanceOf(address owner) external view returns (uint256 balance);\\n\\n\\t/**\\n\\t * @dev Returns the owner of the `tokenId` token.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must exist.\\n\\t */\\n\\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n\\t/**\\n\\t * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n\\t * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `from` cannot be the zero address.\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must exist and be owned by `from`.\\n\\t * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Transfers `tokenId` token from `from` to `to`.\\n\\t *\\n\\t * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `from` cannot be the zero address.\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must be owned by `from`.\\n\\t * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n\\t * The approval is cleared when the token is transferred.\\n\\t *\\n\\t * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The caller must own the token or be an approved operator.\\n\\t * - `tokenId` must exist.\\n\\t *\\n\\t * Emits an {Approval} event.\\n\\t */\\n\\tfunction approve(address to, uint256 tokenId) external;\\n\\n\\t/**\\n\\t * @dev Returns the account approved for `tokenId` token.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must exist.\\n\\t */\\n\\tfunction getApproved(uint256 tokenId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (address operator);\\n\\n\\t/**\\n\\t * @dev Approve or remove `operator` as an operator for the caller.\\n\\t * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The `operator` cannot be the caller.\\n\\t *\\n\\t * Emits an {ApprovalForAll} event.\\n\\t */\\n\\tfunction setApprovalForAll(address operator, bool _approved) external;\\n\\n\\t/**\\n\\t * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n\\t *\\n\\t * See {setApprovalForAll}\\n\\t */\\n\\tfunction isApprovedForAll(address owner, address operator)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (bool);\\n\\n\\t/**\\n\\t * @dev Safely transfers `tokenId` token from `from` to `to`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `from` cannot be the zero address.\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must exist and be owned by `from`.\\n\\t * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes calldata data\\n\\t) external;\\n}\\n\",\"keccak256\":\"0x40ec6e28a9bb9cd5ffb08f4c1c4b54b61d8789be10153318a6c9418f25305f5a\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\t/**\\n\\t * @dev Returns the total amount of tokens stored by the contract.\\n\\t */\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n\\t * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n\\t */\\n\\tfunction tokenOfOwnerByIndex(address owner, uint256 index)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256 tokenId);\\n\\n\\t/**\\n\\t * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n\\t * Use along with {totalSupply} to enumerate all tokens.\\n\\t */\\n\\tfunction tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc09ef36867349fb40ae5ab24846feeeb1028b2f21b1f021f45c3a094eb685566\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\t/**\\n\\t * @dev Returns the token collection name.\\n\\t */\\n\\tfunction name() external view returns (string memory);\\n\\n\\t/**\\n\\t * @dev Returns the token collection symbol.\\n\\t */\\n\\tfunction symbol() external view returns (string memory);\\n\\n\\t/**\\n\\t * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n\\t */\\n\\tfunction tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6976b834147423dc07cf721d8bb7eaa1951d5f846e7c66f516959168cdbcb915\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n\\t/**\\n\\t * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n\\t * by `operator` from `from`, this function is called.\\n\\t *\\n\\t * It must return its Solidity selector to confirm the token transfer.\\n\\t * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n\\t *\\n\\t * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n\\t */\\n\\tfunction onERC721Received(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes calldata data\\n\\t) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x50af35c8123738f546a52aaa20d00a751d27337697cde9d2f7fbb991825b1dc7\",\"license\":\"MIT\"},\"contracts/libraries/Ad.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nlibrary Ad {\\n\\tuint256 private constant _ID_LENGTH = 100000000000000000000000000000000;\\n\\t// RBP : Recommended Retail Price\\n\\t// DPBT: Dynamic Pricing Based on Time\\n\\t// BIDDING : Auction, Bidding Price\\n\\t// OFFER: Offered by others\\n\\tenum Pricing {\\n\\t\\tRRP,\\n\\t\\tDPBT,\\n\\t\\tBIDDING,\\n\\t\\tOFFER\\n\\t}\\n\\tstruct Period {\\n\\t\\taddress mediaProxy;\\n\\t\\tstring spaceMetadata;\\n\\t\\tstring tokenMetadata;\\n\\t\\tuint256 saleStartTimestamp;\\n\\t\\tuint256 saleEndTimestamp;\\n\\t\\tuint256 displayStartTimestamp;\\n\\t\\tuint256 displayEndTimestamp;\\n\\t\\tPricing pricing;\\n\\t\\tuint256 minPrice;\\n\\t\\tuint256 startPrice;\\n\\t\\tbool sold;\\n\\t}\\n\\n\\tfunction id(\\n\\t\\tstring memory metadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp\\n\\t) public pure returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\tuint256(\\n\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\tabi.encodePacked(metadata, displayStartTimestamp, displayEndTimestamp)\\n\\t\\t\\t\\t)\\n\\t\\t\\t) % _ID_LENGTH;\\n\\t}\\n}\\n\",\"keccak256\":\"0x2a6f64a80bd3d7318051d10a6e82d719a531287f0ddc7ccc8175b336eddbe8ce\",\"license\":\"UNLICENSED\"},\"contracts/peripheries/AdPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../accessors/NameAccessor.sol\\\";\\nimport \\\"../common/BlockTimestamp.sol\\\";\\nimport \\\"../libraries/Ad.sol\\\";\\nimport \\\"./MediaRegistry.sol\\\";\\n\\n/// @title AdPool - stores all ads accorss every space.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ncontract AdPool is BlockTimestamp, NameAccessor {\\n\\t/// @dev tokenId <- metadata * displayStartTimestamp * displayEndTimestamp\\n\\tmapping(uint256 => Ad.Period) public allPeriods;\\n\\t/// @dev Returns spaceId that is tied with space metadata.\\n\\tmapping(string => bool) public spaced;\\n\\n\\tmodifier onlyProxies() {\\n\\t\\trequire(_mediaRegistry().ownerOf(msg.sender) != address(0x0), \\\"KD011\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor(address _nameRegistry) {\\n\\t\\tinitialize(_nameRegistry);\\n\\t}\\n\\n\\tfunction addSpace(string memory spaceMetadata) external onlyProxies {\\n\\t\\tspaced[spaceMetadata] = true;\\n\\t}\\n\\n\\tfunction addPeriod(uint256 tokenId, Ad.Period memory period)\\n\\t\\texternal\\n\\t\\tonlyProxies\\n\\t{\\n\\t\\tallPeriods[tokenId] = period;\\n\\t}\\n\\n\\tfunction deletePeriod(uint256 tokenId) external onlyProxies {\\n\\t\\tdelete allPeriods[tokenId];\\n\\t}\\n\\n\\tfunction mediaProxyOf(uint256 tokenId) public view returns (address) {\\n\\t\\treturn allPeriods[tokenId].mediaProxy;\\n\\t}\\n\\n\\t/**\\n\\t * Accessors\\n\\t */\\n\\tfunction _mediaRegistry() internal view returns (MediaRegistry) {\\n\\t\\treturn MediaRegistry(mediaRegistryAddress());\\n\\t}\\n}\\n\",\"keccak256\":\"0x030fb836bb7dd1671c6d3de464f2fa198791524a79a91e8a8b5327aae729cf83\",\"license\":\"UNLICENSED\"},\"contracts/peripheries/EventEmitter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../accessors/NameAccessor.sol\\\";\\nimport \\\"../common/BlockTimestamp.sol\\\";\\nimport \\\"../peripheries/MediaRegistry.sol\\\";\\nimport \\\"../libraries/Ad.sol\\\";\\n\\n/// @title EventEmitter - emits events on behalf of each proxy.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ncontract EventEmitter is NameAccessor, BlockTimestamp {\\n\\t/// @dev Emitted when a new media is created.\\n\\tevent NewMedia(\\n\\t\\taddress proxy,\\n\\t\\taddress mediaEOA,\\n\\t\\tstring constantMetadata,\\n\\t\\tstring updatableMetadata,\\n\\t\\tuint256 saltNonce\\n\\t);\\n\\tevent UpdateMedia(address proxy, address mediaEOA, string accountMetadata);\\n\\tevent NewSpace(string metadata);\\n\\tevent DeleteSpace(string metadata);\\n\\tevent NewPeriod(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring spaceMetadata,\\n\\t\\tstring tokenMetadata,\\n\\t\\tuint256 saleStartTimestamp,\\n\\t\\tuint256 saleEndTimestamp,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\tAd.Pricing pricing,\\n\\t\\tuint256 minPrice\\n\\t);\\n\\tevent DeletePeriod(uint256 tokenId);\\n\\tevent Buy(uint256 tokenId, uint256 price, address buyer, uint256 timestamp);\\n\\tevent Bid(uint256 tokenId, uint256 price, address buyer, uint256 timestamp);\\n\\tevent ReceiveToken(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 price,\\n\\t\\taddress buyer,\\n\\t\\tuint256 timestamp\\n\\t);\\n\\tevent OfferPeriod(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring spaceMetadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\taddress sender,\\n\\t\\tuint256 price\\n\\t);\\n\\tevent CancelOffer(uint256 tokenId);\\n\\tevent AcceptOffer(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring spaceMetadata,\\n\\t\\tstring tokenMetadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\tuint256 price\\n\\t);\\n\\tevent Withdraw(uint256 amount);\\n\\tevent Propose(uint256 tokenId, string metadata);\\n\\tevent AcceptProposal(uint256 tokenId, string metadata);\\n\\tevent DenyProposal(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring metadata,\\n\\t\\tstring reason,\\n\\t\\tbool offensive\\n\\t);\\n\\tevent TransferCustom(\\n\\t\\taddress indexed from,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 indexed tokenId\\n\\t);\\n\\n\\tconstructor(address _nameRegistry) {\\n\\t\\tinitialize(_nameRegistry);\\n\\t}\\n\\n\\tmodifier onlyProxies() {\\n\\t\\trequire(_mediaRegistry().ownerOf(msg.sender) != address(0x0), \\\"KD011\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction emitNewSpace(string memory metadata) external onlyProxies {\\n\\t\\temit NewSpace(metadata);\\n\\t}\\n\\n\\tfunction emitDeleteSpace(string memory metadata) external onlyProxies {\\n\\t\\temit DeleteSpace(metadata);\\n\\t}\\n\\n\\tfunction emitNewPeriod(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tstring memory tokenMetadata,\\n\\t\\tuint256 saleStartTimestamp,\\n\\t\\tuint256 saleEndTimestamp,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\tAd.Pricing pricing,\\n\\t\\tuint256 minPrice\\n\\t) external onlyProxies {\\n\\t\\temit NewPeriod(\\n\\t\\t\\ttokenId,\\n\\t\\t\\tspaceMetadata,\\n\\t\\t\\ttokenMetadata,\\n\\t\\t\\tsaleStartTimestamp,\\n\\t\\t\\tsaleEndTimestamp,\\n\\t\\t\\tdisplayStartTimestamp,\\n\\t\\t\\tdisplayEndTimestamp,\\n\\t\\t\\tpricing,\\n\\t\\t\\tminPrice\\n\\t\\t);\\n\\t}\\n\\n\\tfunction emitDeletePeriod(uint256 tokenId) external onlyProxies {\\n\\t\\temit DeletePeriod(tokenId);\\n\\t}\\n\\n\\tfunction emitBuy(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 msgValue,\\n\\t\\taddress msgSender\\n\\t) external onlyProxies {\\n\\t\\temit Buy(tokenId, msgValue, msgSender, _blockTimestamp());\\n\\t}\\n\\n\\tfunction emitBid(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 msgValue,\\n\\t\\taddress msgSender\\n\\t) external onlyProxies {\\n\\t\\temit Bid(tokenId, msgValue, msgSender, _blockTimestamp());\\n\\t}\\n\\n\\tfunction emitReceiveToken(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 price,\\n\\t\\taddress buyer\\n\\t) external onlyProxies {\\n\\t\\temit ReceiveToken(tokenId, price, buyer, _blockTimestamp());\\n\\t}\\n\\n\\tfunction emitOfferPeriod(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\taddress sender,\\n\\t\\tuint256 price\\n\\t) external onlyProxies {\\n\\t\\temit OfferPeriod(\\n\\t\\t\\ttokenId,\\n\\t\\t\\tspaceMetadata,\\n\\t\\t\\tdisplayStartTimestamp,\\n\\t\\t\\tdisplayEndTimestamp,\\n\\t\\t\\tsender,\\n\\t\\t\\tprice\\n\\t\\t);\\n\\t}\\n\\n\\tfunction emitCancelOffer(uint256 tokenId) external onlyProxies {\\n\\t\\temit CancelOffer(tokenId);\\n\\t}\\n\\n\\tfunction emitAcceptOffer(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tstring memory tokenMetadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\tuint256 price\\n\\t) external onlyProxies {\\n\\t\\temit AcceptOffer(\\n\\t\\t\\ttokenId,\\n\\t\\t\\tspaceMetadata,\\n\\t\\t\\ttokenMetadata,\\n\\t\\t\\tdisplayStartTimestamp,\\n\\t\\t\\tdisplayEndTimestamp,\\n\\t\\t\\tprice\\n\\t\\t);\\n\\t}\\n\\n\\tfunction emitWithdraw(uint256 amount) external onlyProxies {\\n\\t\\temit Withdraw(amount);\\n\\t}\\n\\n\\tfunction emitPropose(uint256 tokenId, string memory metadata)\\n\\t\\texternal\\n\\t\\tonlyProxies\\n\\t{\\n\\t\\temit Propose(tokenId, metadata);\\n\\t}\\n\\n\\tfunction emitAcceptProposal(uint256 tokenId, string memory metadata)\\n\\t\\texternal\\n\\t\\tonlyProxies\\n\\t{\\n\\t\\temit AcceptProposal(tokenId, metadata);\\n\\t}\\n\\n\\tfunction emitDenyProposal(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory metadata,\\n\\t\\tstring memory reason,\\n\\t\\tbool offensive\\n\\t) external onlyProxies {\\n\\t\\temit DenyProposal(tokenId, metadata, reason, offensive);\\n\\t}\\n\\n\\tfunction emitTransferCustom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) external onlyProxies {\\n\\t\\temit TransferCustom(from, to, tokenId);\\n\\t}\\n\\n\\tfunction emitNewMedia(\\n\\t\\taddress proxy,\\n\\t\\taddress mediaEOA,\\n\\t\\tstring memory constantMetadata,\\n\\t\\tstring memory updatableMetadata,\\n\\t\\tuint256 saltNonce\\n\\t) external onlyFactory {\\n\\t\\temit NewMedia(\\n\\t\\t\\tproxy,\\n\\t\\t\\tmediaEOA,\\n\\t\\t\\tconstantMetadata,\\n\\t\\t\\tupdatableMetadata,\\n\\t\\t\\tsaltNonce\\n\\t\\t);\\n\\t}\\n\\n\\tfunction emitUpdateMedia(\\n\\t\\taddress proxy,\\n\\t\\taddress mediaEOA,\\n\\t\\tstring memory accountMetadata\\n\\t) external onlyProxies {\\n\\t\\temit UpdateMedia(proxy, mediaEOA, accountMetadata);\\n\\t}\\n\\n\\t/**\\n\\t * Accessors\\n\\t */\\n\\tfunction _mediaRegistry() internal view returns (MediaRegistry) {\\n\\t\\treturn MediaRegistry(mediaRegistryAddress());\\n\\t}\\n}\\n\",\"keccak256\":\"0x512e32d963ae5a43c9054e56db5d22c95fbf54713136818bba1a696ce92ea47f\",\"license\":\"UNLICENSED\"},\"contracts/peripheries/MediaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../accessors/NameAccessor.sol\\\";\\nimport \\\"../common/BlockTimestamp.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/// @title MediaRegistry - registers a list of media accounts.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ncontract MediaRegistry is BlockTimestamp, NameAccessor {\\n\\tstruct Account {\\n\\t\\taddress proxy;\\n\\t\\taddress mediaEOA;\\n\\t\\tstring constantMetadata;\\n\\t\\tstring updatableMetadata;\\n\\t}\\n\\tmapping(address => Account) public allAccounts;\\n\\n\\tmodifier onlyProxies() {\\n\\t\\trequire(ownerOf(msg.sender) != address(0), \\\"KD011\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// Constructor\\n\\t/// @dev _nameRegistry address of the NameRegistry\\n\\tconstructor(address _nameRegistry) {\\n\\t\\tinitialize(_nameRegistry);\\n\\t}\\n\\n\\t/// @dev Adds media account.\\n\\t/// @param proxy address of the proxy contract\\n\\t/// @param constantMetadata string of constant metadata for the defailts of the account\\n\\t/// @param updatableMetadata string of constant metadata for the defailts of the account\\n\\t/// @param mediaEOA address of the media account\\n\\tfunction addMedia(\\n\\t\\taddress proxy,\\n\\t\\tstring memory constantMetadata,\\n\\t\\tstring memory updatableMetadata,\\n\\t\\taddress mediaEOA\\n\\t) external onlyFactory {\\n\\t\\tallAccounts[proxy] = Account(\\n\\t\\t\\tproxy,\\n\\t\\t\\tmediaEOA,\\n\\t\\t\\tconstantMetadata,\\n\\t\\t\\tupdatableMetadata\\n\\t\\t);\\n\\t}\\n\\n\\t/// @dev Updates media account.\\n\\t/// @param metadata string of the account metadata\\n\\t/// @param mediaEOA address of the media account\\n\\tfunction updateMedia(address mediaEOA, string memory metadata)\\n\\t\\texternal\\n\\t\\tonlyProxies\\n\\t{\\n\\t\\tallAccounts[msg.sender].mediaEOA = mediaEOA;\\n\\t\\tallAccounts[msg.sender].updatableMetadata = metadata;\\n\\t}\\n\\n\\t/// @dev Returns whether the account has created or not.\\n\\t/// @param proxy address of the proxy contract that represents an account.\\n\\tfunction created(address proxy) public view returns (bool) {\\n\\t\\treturn allAccounts[proxy].proxy != address(0x0);\\n\\t}\\n\\n\\t/// @dev Returns the owner of the account.\\n\\t/// @param proxy address of the proxy contract that represents an account.\\n\\tfunction ownerOf(address proxy) public view returns (address) {\\n\\t\\treturn allAccounts[proxy].mediaEOA;\\n\\t}\\n}\\n\",\"keccak256\":\"0xf719e67d0d95aa9271ebf0cfd385e9f3697b75e89610559a81d2f137d2850759\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060016018556159ef80620000266000396000f3fe6080604052600436106102ae5760003560e01c806365045a6511610175578063c531c236116100dc578063d868006911610095578063e985e9c51161006f578063e985e9c514610894578063ea4a1104146108dd578063f072629114610914578063f19b82731461092957600080fd5b8063d868006914610859578063d96a094a1461086c578063e6e268f41461087f57600080fd5b8063c531c2361461074f578063c87b56dd1461076f578063c9cd71b51461078f578063cc889b0b146107a4578063d028bd661461080c578063d4f6b5ec1461083957600080fd5b80638da5cb5b1161012e5780638da5cb5b146106bd5780638f6059d6146106d257806395d89b41146106e7578063a22cb465146106fc578063b69ef8a81461071c578063b88d4fde1461072f57600080fd5b806365045a65146105df57806365d13a901461061a5780636a58767e1461064857806370a082311461065d5780637a3c4c171461067d578063899c99891461069d57600080fd5b80632e1a7d4d116102195780634b455a51116101d25780634b455a51146105115780634f6ccce71461053157806353c147761461055157806358ba1bb81461057157806360c5cc3a1461059f5780636352211e146105bf57600080fd5b80632e1a7d4d146104765780632f745c591461049657806337df00c9146104b657806342842e0e146104c9578063430bf08a146104e9578063454a2ab3146104fe57600080fd5b806313c1f2781161026b57806313c1f278146103b9578063179bcff7146103d957806318160ddd146103f957806323b872dd1461041857806327b7a2f5146104385780632bc4bc681461045657600080fd5b806301b99e04146102b357806301ffc9a7146102ed57806306fdde031461031d578063077f224a1461033f578063081812fc14610361578063095ea7b314610399575b600080fd5b3480156102bf57600080fd5b506102d36102ce366004614d03565b610949565b6040516102e4959493929190614d74565b60405180910390f35b3480156102f957600080fd5b5061030d610308366004614dca565b610a0c565b60405190151581526020016102e4565b34801561032957600080fd5b50610332610a43565b6040516102e49190614de7565b34801561034b57600080fd5b5061035f61035a366004614ebb565b610ad5565b005b34801561036d57600080fd5b5061038161037c366004614d03565b610b58565b6040516001600160a01b0390911681526020016102e4565b3480156103a557600080fd5b5061035f6103b4366004614f33565b610bf2565b3480156103c557600080fd5b5061035f6103d4366004614f6d565b610d03565b3480156103e557600080fd5b5061035f6103f4366004614fbd565b610f59565b34801561040557600080fd5b50600b545b6040519081526020016102e4565b34801561042457600080fd5b5061035f61043336600461500d565b6110d5565b34801561044457600080fd5b506010546001600160a01b0316610381565b34801561046257600080fd5b5061035f61047136600461504e565b61115a565b34801561048257600080fd5b5061035f610491366004614d03565b61120e565b3480156104a257600080fd5b5061040a6104b1366004614f33565b611332565b61035f6104c4366004614d03565b6113c8565b3480156104d557600080fd5b5061035f6104e436600461500d565b61155e565b3480156104f557600080fd5b50610381611569565b61035f61050c366004614d03565b61161d565b34801561051d57600080fd5b5061035f61052c366004614d03565b61184b565b34801561053d57600080fd5b5061040a61054c366004614d03565b611c3a565b34801561055d57600080fd5b5061033261056c36600461504e565b611ccd565b34801561057d57600080fd5b5061059161058c366004614d03565b611ffb565b6040516102e4929190615083565b3480156105ab57600080fd5b5061035f6105ba366004614d03565b6120a8565b3480156105cb57600080fd5b506103816105da366004614d03565b6122c4565b3480156105eb57600080fd5b5061030d6105fa36600461504e565b805160208183018101805160118252928201919093012091525460ff1681565b34801561062657600080fd5b5061063a6106353660046150ae565b612311565b6040516102e49291906150d0565b34801561065457600080fd5b506103816123dd565b34801561066957600080fd5b5061040a6106783660046150f4565b612414565b34801561068957600080fd5b5061040a610698366004614d03565b61249b565b3480156106a957600080fd5b5061035f6106b8366004615111565b6127b5565b3480156106c957600080fd5b50610381612b57565b3480156106de57600080fd5b50610381612b9c565b3480156106f357600080fd5b50610332612bd2565b34801561070857600080fd5b5061035f6107173660046151b4565b612be1565b34801561072857600080fd5b504761040a565b34801561073b57600080fd5b5061035f61074a3660046151ed565b612ca6565b34801561075b57600080fd5b5061040a61076a36600461526d565b612cde565b34801561077b57600080fd5b5061033261078a366004614d03565b612d74565b34801561079b57600080fd5b50610381612ee0565b3480156107b057600080fd5b506107e96107bf366004614d03565b60146020526000908152604090208054600182015460029092015490916001600160a01b03169083565b604080519384526001600160a01b039092166020840152908201526060016102e4565b34801561081857600080fd5b5061082c61082736600461504e565b612f10565b6040516102e491906152bb565b34801561084557600080fd5b5061035f6108543660046152ff565b612f80565b61035f610867366004614d03565b612fef565b61035f61087a366004614d03565b61319f565b34801561088b57600080fd5b5061040a613269565b3480156108a057600080fd5b5061030d6108af366004615330565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205460ff1690565b3480156108e957600080fd5b506108fd6108f8366004614d03565b613286565b6040516102e49b9a99989796959493929190615396565b34801561092057600080fd5b506103816133fd565b34801561093557600080fd5b50610332610944366004614d03565b613433565b6015602052600090815260409020805481906109649061541c565b80601f01602080910402602001604051908101604052809291908181526020018280546109909061541c565b80156109dd5780601f106109b2576101008083540402835291602001916109dd565b820191906000526020600020905b8154815290600101906020018083116109c057829003601f168201915b505050600184015460028501546003860154600490960154949591949093506001600160a01b03909116915085565b60006001600160e01b031982166380ac58cd60e01b1480610a3d57506001600160e01b03198216635b5e139f60e01b145b92915050565b606060018054610a529061541c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7e9061541c565b8015610acb5780601f10610aa057610100808354040283529160200191610acb565b820191906000526020600020905b815481529060010190602001808311610aae57829003601f168201915b5050505050905090565b8251610ae8906001906020860190614c34565b5082604051602001610afa9190615457565b60405160208183030381529060405260029080519060200190610b1e929190614c34565b508151610b32906003906020850190614c34565b50601080546001600160a01b0319166001600160a01b038316179055505050565b505050565b6000818152600560205260408120546001600160a01b0316610bd65760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600760205260409020546001600160a01b031690565b6000610bfd826122c4565b9050806001600160a01b0316836001600160a01b03161415610c6b5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610bcd565b336001600160a01b0382161480610c875750610c8781336108af565b610cf95760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610bcd565b610b5383836134cd565b33610d0c61353b565b604051630a57ebcf60e11b81523060048201526001600160a01b0391909116906314afd79e9060240160206040518083038186803b158015610d4d57600080fd5b505afa158015610d61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d859190615487565b6001600160a01b031614610dab5760405162461bcd60e51b8152600401610bcd906154a4565b6000838152600d602052604081208054610dc49061541c565b80601f0160208091040260200160405190810160405280929190818152602001828054610df09061541c565b8015610e3d5780601f10610e1257610100808354040283529160200191610e3d565b820191906000526020600020905b815481529060010190602001808311610e2057829003601f168201915b50505050509050805160001415610e7e5760405162461bcd60e51b815260206004820152600560248201526404b443133360dc1b6044820152606401610bcd565b6000848152600e6020908152604080832081518083019092528682528515158284015280546001810182559084529282902081518051929460020290910192610ecc92849290910190614c34565b50602091909101516001909101805460ff1916911515919091179055610ef0613545565b6001600160a01b0316633ebf7371858386866040518563ffffffff1660e01b8152600401610f2194939291906154c3565b600060405180830381600087803b158015610f3b57600080fd5b505af1158015610f4f573d6000803e3d6000fd5b5050505050505050565b33610f6261353b565b604051630a57ebcf60e11b81523060048201526001600160a01b0391909116906314afd79e9060240160206040518083038186803b158015610fa357600080fd5b505afa158015610fb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdb9190615487565b6001600160a01b0316146110015760405162461bcd60e51b8152600401610bcd906154a4565b61100961353b565b6001600160a01b031663179bcff783836040518363ffffffff1660e01b8152600401611036929190615502565b600060405180830381600087803b15801561105057600080fd5b505af1158015611064573d6000803e3d6000fd5b50505050611070613545565b6001600160a01b031663262360133084846040518463ffffffff1660e01b815260040161109f93929190615524565b600060405180830381600087803b1580156110b957600080fd5b505af11580156110cd573d6000803e3d6000fd5b505050505050565b6110e083838361354f565b6110e8613545565b60405163465bcf0560e01b81526001600160a01b038581166004830152848116602483015260448201849052919091169063465bcf05906064015b600060405180830381600087803b15801561113d57600080fd5b505af1158015611151573d6000803e3d6000fd5b50505050505050565b3361116361353b565b604051630a57ebcf60e11b81523060048201526001600160a01b0391909116906314afd79e9060240160206040518083038186803b1580156111a457600080fd5b505afa1580156111b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111dc9190615487565b6001600160a01b0316146112025760405162461bcd60e51b8152600401610bcd906154a4565b61120b81613580565b50565b3361121761353b565b604051630a57ebcf60e11b81523060048201526001600160a01b0391909116906314afd79e9060240160206040518083038186803b15801561125857600080fd5b505afa15801561126c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112909190615487565b6001600160a01b0316146112b65760405162461bcd60e51b8152600401610bcd906154a4565b600081156112c457816112cc565b6112cc613269565b604051909150339082156108fc029083906000818181858888f193505050501580156112fc573d6000803e3d6000fd5b50611305613545565b6001600160a01b031663279862cb826040518263ffffffff1660e01b815260040161109f91815260200190565b600061133d83612414565b821061139f5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610bcd565b506001600160a01b03919091166000908152600960209081526040808320938352929052205490565b60008181526014602052604090206001015481906001600160a01b0316331461141b5760405162461bcd60e51b815260206004820152600560248201526425a218991b60d91b6044820152606401610bcd565b6114248261372e565b60008281526014602090815260408083206002015460129092528220600a01805460ff19166001179055601680549192839261146190849061556f565b90915550611470905083613805565b61148361147e600a83615586565b613810565b60008381526014602052604081208181556001810180546001600160a01b0319169055600201556114b2613545565b6040516306970b1b60e51b815260048101859052602481018390523360448201526001600160a01b03919091169063d2e1636090606401600060405180830381600087803b15801561150357600080fd5b505af1158015611517573d6000803e3d6000fd5b50505050611523613545565b60405163465bcf0560e01b8152306004820152336024820152604481018590526001600160a01b03919091169063465bcf0590606401611123565b6110e0838383613854565b6010546040516415985d5b1d60da1b60208201526000916001600160a01b031690638eaa6ac0906025015b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016115c891815260200190565b60206040518083038186803b1580156115e057600080fd5b505afa1580156115f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116189190615487565b905090565b3361162661353b565b604051630a57ebcf60e11b81523060048201526001600160a01b0391909116906314afd79e9060240160206040518083038186803b15801561166757600080fd5b505afa15801561167b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169f9190615487565b6001600160a01b031614156116de5760405162461bcd60e51b815260206004820152600560248201526412d10c0c4d60da1b6044820152606401610bcd565b600260185414156117315760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610bcd565b600260185561173f8161386f565b6117488161393d565b50600081815260146020526040902060020154611765903461556f565b6016600082825461177691906155a8565b909155505060408051606081018252828152336020808301918252348385019081526000868152601490925293902091518255516001820180546001600160a01b0319166001600160a01b0390921691909117905590516002909101556117db613545565b604051639e7e11d760e01b8152600481018390523460248201523360448201526001600160a01b039190911690639e7e11d790606401600060405180830381600087803b15801561182b57600080fd5b505af115801561183f573d6000803e3d6000fd5b50506001601855505050565b3361185461353b565b604051630a57ebcf60e11b81523060048201526001600160a01b0391909116906314afd79e9060240160206040518083038186803b15801561189557600080fd5b505afa1580156118a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118cd9190615487565b6001600160a01b0316146118f35760405162461bcd60e51b8152600401610bcd906154a4565b6000818152601260205260409020546001600160a01b031661193f5760405162461bcd60e51b815260206004820152600560248201526412d10c4c4d60da1b6044820152606401610bcd565b30611949826122c4565b6001600160a01b03161461196f5760405162461bcd60e51b8152600401610bcd906155c0565b6119788161393d565b50611982816139d6565b6000818152601260209081526040918290208251610160810190935280546001600160a01b03168352600181018054611b5e948694909392908401916119c79061541c565b80601f01602080910402602001604051908101604052809291908181526020018280546119f39061541c565b8015611a405780601f10611a1557610100808354040283529160200191611a40565b820191906000526020600020905b815481529060010190602001808311611a2357829003601f168201915b50505050508152602001600282018054611a599061541c565b80601f0160208091040260200160405190810160405280929190818152602001828054611a859061541c565b8015611ad25780601f10611aa757610100808354040283529160200191611ad2565b820191906000526020600020905b815481529060010190602001808311611ab557829003601f168201915b50505091835250506003828101546020830152600483015460408301526005830154606083015260068301546080830152600783015460a09092019160ff1690811115611b2157611b2161535e565b6003811115611b3257611b3261535e565b81526008820154602082015260098201546040820152600a9091015460ff161515606090910152613a07565b611b66613545565b6001600160a01b031663ccb55a98826040518263ffffffff1660e01b8152600401611b9391815260200190565b600060405180830381600087803b158015611bad57600080fd5b505af1158015611bc1573d6000803e3d6000fd5b50505050611bcd613545565b60405163465bcf0560e01b815230600482015260006024820152604481018390526001600160a01b03919091169063465bcf05906064015b600060405180830381600087803b158015611c1f57600080fd5b505af1158015611c33573d6000803e3d6000fd5b5050505050565b6000611c45600b5490565b8210611ca85760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610bcd565b600b8281548110611cbb57611cbb6155df565b90600052602060002001549050919050565b60606000611cda83612f10565b905060005b8151811015611fe457600060126000848481518110611d0057611d006155df565b60200260200101518152602001908152602001600020604051806101600160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600182018054611d619061541c565b80601f0160208091040260200160405190810160405280929190818152602001828054611d8d9061541c565b8015611dda5780601f10611daf57610100808354040283529160200191611dda565b820191906000526020600020905b815481529060010190602001808311611dbd57829003601f168201915b50505050508152602001600282018054611df39061541c565b80601f0160208091040260200160405190810160405280929190818152602001828054611e1f9061541c565b8015611e6c5780601f10611e4157610100808354040283529160200191611e6c565b820191906000526020600020905b815481529060010190602001808311611e4f57829003601f168201915b50505091835250506003828101546020830152600483015460408301526005830154606083015260068301546080830152600783015460a09092019160ff1690811115611ebb57611ebb61535e565b6003811115611ecc57611ecc61535e565b81526008820154602082015260098201546040820152600a9091015460ff1615156060909101529050428160a0015111158015611f0d5750428160c0015110155b15611fd157600f6000848481518110611f2857611f286155df565b602002602001015181526020019081526020016000208054611f499061541c565b80601f0160208091040260200160405190810160405280929190818152602001828054611f759061541c565b8015611fc25780601f10611f9757610100808354040283529160200191611fc2565b820191906000526020600020905b815481529060010190602001808311611fa557829003601f168201915b50505050509350505050919050565b5080611fdc816155f5565b915050611cdf565b505060408051602081019091526000815292915050565b600d602052600090815260409020805481906120169061541c565b80601f01602080910402602001604051908101604052809291908181526020018280546120429061541c565b801561208f5780601f106120645761010080835404028352916020019161208f565b820191906000526020600020905b81548152906001019060200180831161207257829003601f168201915b505050600190930154919250506001600160a01b031682565b336120b161353b565b604051630a57ebcf60e11b81523060048201526001600160a01b0391909116906314afd79e9060240160206040518083038186803b1580156120f257600080fd5b505afa158015612106573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212a9190615487565b6001600160a01b0316146121505760405162461bcd60e51b8152600401610bcd906154a4565b6000818152600d6020526040812080546121699061541c565b80601f01602080910402602001604051908101604052809291908181526020018280546121959061541c565b80156121e25780601f106121b7576101008083540402835291602001916121e2565b820191906000526020600020905b8154815290600101906020018083116121c557829003601f168201915b505050505090508051600014156122235760405162461bcd60e51b815260206004820152600560248201526404b443133360dc1b6044820152606401610bcd565b6000828152600d60205260409020600101546001600160a01b0316612247836122c4565b6001600160a01b0316146122855760405162461bcd60e51b81526020600482015260056024820152644b4431333160d81b6044820152606401610bcd565b61228f8282613c7e565b612297613545565b6001600160a01b031663746f1b2083836040518363ffffffff1660e01b815260040161109f929190615610565b6000818152600560205260408120546001600160a01b031680610a3d5760405162461bcd60e51b815260206004820152600560248201526412d10c4c4d60da1b6044820152606401610bcd565b600e602052816000526040600020818154811061232d57600080fd5b9060005260206000209060020201600091509150508060000180546123519061541c565b80601f016020809104026020016040519081016040528092919081815260200182805461237d9061541c565b80156123ca5780601f1061239f576101008083540402835291602001916123ca565b820191906000526020600020905b8154815290600101906020018083116123ad57829003601f168201915b5050506001909301549192505060ff1682565b6010546040516c4d65646961526567697374727960981b60208201526000916001600160a01b031690638eaa6ac090602d01611594565b60006001600160a01b03821661247f5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610bcd565b506001600160a01b031660009081526006602052604090205490565b60008181526012602090815260408083208151610160810190925280546001600160a01b031682526001810180548594840191906124d89061541c565b80601f01602080910402602001604051908101604052809291908181526020018280546125049061541c565b80156125515780601f1061252657610100808354040283529160200191612551565b820191906000526020600020905b81548152906001019060200180831161253457829003601f168201915b5050505050815260200160028201805461256a9061541c565b80601f01602080910402602001604051908101604052809291908181526020018280546125969061541c565b80156125e35780601f106125b8576101008083540402835291602001916125e3565b820191906000526020600020905b8154815290600101906020018083116125c657829003601f168201915b50505091835250506003828101546020830152600483015460408301526005830154606083015260068301546080830152600783015460a09092019160ff16908111156126325761263261535e565b60038111156126435761264361535e565b81526008820154602082015260098201546040820152600a9091015460ff161515606090910152905060008160e0015160038111156126845761268461535e565b141561269557610100015192915050565b60018160e0015160038111156126ad576126ad61535e565b141561271757806060015181608001516126c7919061556f565b60608201516126d6904261556f565b8261010001518361012001516126ec919061556f565b6126f69190615629565b6127009190615586565b816101200151612710919061556f565b9392505050565b60028160e00151600381111561272f5761272f61535e565b141561274c57505060009081526014602052604090206002015490565b60038160e0015160038111156127645761276461535e565b141561278157505060009081526015602052604090206004015490565b60405162461bcd60e51b81526020600482015260096024820152681b9bdd08195e1a5cdd60ba1b6044820152606401610bcd565b336127be61353b565b604051630a57ebcf60e11b81523060048201526001600160a01b0391909116906314afd79e9060240160206040518083038186803b1580156127ff57600080fd5b505afa158015612813573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128379190615487565b6001600160a01b03161461285d5760405162461bcd60e51b8152600401610bcd906154a4565b4285116128945760405162461bcd60e51b81526020600482015260056024820152644b4431313160d81b6044820152606401610bcd565b8385106128cb5760405162461bcd60e51b815260206004820152600560248201526425a218989960d91b6044820152606401610bcd565b8284106129025760405162461bcd60e51b81526020600482015260056024820152644b4431313360d81b6044820152606401610bcd565b6011876040516129129190615648565b9081526040519081900360200190205460ff166129325761293287613580565b61293d878585613ca7565b6040516303fb4aab60e41b81526000907382afac187DD0D7C0940614FE8CD7B9DeA79e174090633fb4aab09061297b908b9089908990600401615664565b60206040518083038186803b15801561299357600080fd5b505af41580156129a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129cb9190615689565b90506000604051806101600160405280306001600160a01b031681526020018a81526020018981526020016129fd4290565b8152602001888152602001878152602001868152602001856003811115612a2657612a2661535e565b815260200184815260200160008152602001600015158152509050612a4a81613f5e565b610120820152612a5b89838361400b565b612a6630838a61415c565b612a6e613545565b6001600160a01b0316637bab635a838b8b428c8c8c8c8c6040518a63ffffffff1660e01b8152600401612aa9999897969594939291906156a2565b600060405180830381600087803b158015612ac357600080fd5b505af1158015612ad7573d6000803e3d6000fd5b50505050612ae3613545565b60405163465bcf0560e01b815260006004820152306024820152604481018490526001600160a01b03919091169063465bcf0590606401600060405180830381600087803b158015612b3457600080fd5b505af1158015612b48573d6000803e3d6000fd5b50505050505050505050505050565b60105460408051638da5cb5b60e01b815290516000926001600160a01b031691638da5cb5b916004808301926020929190829003018186803b1580156115e057600080fd5b6010546040516b4d65646961466163746f727960a01b60208201526000916001600160a01b031690638eaa6ac090602c01611594565b606060028054610a529061541c565b6001600160a01b038216331415612c3a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610bcd565b3360008181526008602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b612cb03383614185565b612ccc5760405162461bcd60e51b8152600401610bcd9061570d565b612cd884848484614278565b50505050565b6040516303fb4aab60e41b81526000907382afac187DD0D7C0940614FE8CD7B9DeA79e174090633fb4aab090612d1c90879087908790600401615664565b60206040518083038186803b158015612d3457600080fd5b505af4158015612d48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6c9190615689565b949350505050565b6000818152600560205260409020546060906001600160a01b0316612df35760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610bcd565b600060038054612e029061541c565b905011612ea55760008281526004602052604090208054612e229061541c565b80601f0160208091040260200160405190810160405280929190818152602001828054612e4e9061541c565b8015612e9b5780601f10612e7057610100808354040283529160200191612e9b565b820191906000526020600020905b815481529060010190602001808311612e7e57829003601f168201915b5050505050610a3d565b600360046000848152602001908152602001600020604051602001612ecb9291906157f8565b60405160208183030381529060405292915050565b601054604051651059141bdbdb60d21b60208201526000916001600160a01b031690638eaa6ac090602601611594565b6060601382604051612f229190615648565b9081526040805191829003602090810183208054808302850183019093528284529190830182828015612f7457602002820191906000526020600020905b815481526020019060010190808311612f60575b50505050509050919050565b33612f8a836122c4565b6001600160a01b031614612fb05760405162461bcd60e51b8152600401610bcd906154a4565b612fba82826142ab565b612fc2613545565b6001600160a01b0316635bcefb5383836040518363ffffffff1660e01b815260040161109f929190615610565b33612ff861353b565b604051630a57ebcf60e11b81523060048201526001600160a01b0391909116906314afd79e9060240160206040518083038186803b15801561303957600080fd5b505afa15801561304d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130719190615487565b6001600160a01b031614156130b05760405162461bcd60e51b815260206004820152600560248201526412d10c0c4d60da1b6044820152606401610bcd565b6130b981614311565b6000818152601260205260409020600a01805460ff191660011790556130de81613805565b6130ec61147e600a34615586565b6130f4613545565b60405163385c552160e01b8152600481018390523460248201523360448201526001600160a01b03919091169063385c552190606401600060405180830381600087803b15801561314457600080fd5b505af1158015613158573d6000803e3d6000fd5b50505050613164613545565b60405163465bcf0560e01b8152306004820152336024820152604481018390526001600160a01b03919091169063465bcf0590606401611c05565b336131a861353b565b604051630a57ebcf60e11b81523060048201526001600160a01b0391909116906314afd79e9060240160206040518083038186803b1580156131e957600080fd5b505afa1580156131fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132219190615487565b6001600160a01b031614156132605760405162461bcd60e51b815260206004820152600560248201526412d10c0c4d60da1b6044820152606401610bcd565b6130b9816143e0565b60006017546016544761327c919061556f565b611618919061556f565b601260205260009081526040902080546001820180546001600160a01b0390921692916132b29061541c565b80601f01602080910402602001604051908101604052809291908181526020018280546132de9061541c565b801561332b5780601f106133005761010080835404028352916020019161332b565b820191906000526020600020905b81548152906001019060200180831161330e57829003601f168201915b5050505050908060020180546133409061541c565b80601f016020809104026020016040519081016040528092919081815260200182805461336c9061541c565b80156133b95780601f1061338e576101008083540402835291602001916133b9565b820191906000526020600020905b81548152906001019060200180831161339c57829003601f168201915b50505060038401546004850154600586015460068701546007880154600889015460098a0154600a909a015498999598949750929550909360ff918216939091168b565b6010546040516b22bb32b73a22b6b4ba3a32b960a11b60208201526000916001600160a01b031690638eaa6ac090602c01611594565b600f602052600090815260409020805461344c9061541c565b80601f01602080910402602001604051908101604052809291908181526020018280546134789061541c565b80156134c55780601f1061349a576101008083540402835291602001916134c5565b820191906000526020600020905b8154815290600101906020018083116134a857829003601f168201915b505050505081565b600081815260076020526040902080546001600160a01b0319166001600160a01b0384169081179091558190613502826122c4565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006116186123dd565b60006116186133fd565b6135593382614185565b6135755760405162461bcd60e51b8152600401610bcd9061570d565b610b538383836144b5565b6011816040516135909190615648565b9081526040519081900360200190205460ff1615801561363057506135b3614660565b6001600160a01b03166365045a65826040518263ffffffff1660e01b81526004016135de9190614de7565b60206040518083038186803b1580156135f657600080fd5b505afa15801561360a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061362e919061580d565b155b6136645760405162461bcd60e51b815260206004820152600560248201526404b443130360dc1b6044820152606401610bcd565b60016011826040516136769190615648565b908152604051908190036020019020805491151560ff1990921691909117905561369e614660565b6001600160a01b031663b8926f2c826040518263ffffffff1660e01b81526004016136c99190614de7565b600060405180830381600087803b1580156136e357600080fd5b505af11580156136f7573d6000803e3d6000fd5b50505050613703613545565b6001600160a01b03166378689c64826040518263ffffffff1660e01b8152600401611c059190614de7565b600260008281526012602052604090206007015460ff1660038111156137565761375661535e565b1461378b5760405162461bcd60e51b815260206004820152600560248201526412d10c4c8d60da1b6044820152606401610bcd565b6000818152601260205260409020600a015460ff16156137bd5760405162461bcd60e51b8152600401610bcd906155c0565b426000828152601260205260409020600401541061120b5760405162461bcd60e51b81526020600482015260056024820152644b4431323560d81b6044820152606401610bcd565b61120b3033836144b5565b613818611569565b6001600160a01b03166108fc829081150290604051600060405180830381858888f19350505050158015613850573d6000803e3d6000fd5b5050565b610b5383838360405180602001604052806000815250612ca6565b600260008281526012602052604090206007015460ff1660038111156138975761389761535e565b146138cc5760405162461bcd60e51b815260206004820152600560248201526412d10c4c8d60da1b6044820152606401610bcd565b6000818152601260205260409020600a015460ff16156138fe5760405162461bcd60e51b8152600401610bcd906155c0565b346139088261249b565b1061120b5760405162461bcd60e51b815260206004820152600560248201526425a218991960d91b6044820152606401610bcd565b6000600260008381526012602052604090206007015460ff1660038111156139675761396761535e565b14801561398d57506000828152601460205260409020600101546001600160a01b031615155b156139d157600082815260146020526040808220600181015460029091015491516001600160a01b039091169282156108fc02929190818181858888f19450505050505b919050565b6139df8161466a565b6040805160208082018084526000808452858152600490925292902090516138509290614c34565b60008281526012602052604081206001018054613a239061541c565b80601f0160208091040260200160405190810160405280929190818152602001828054613a4f9061541c565b8015613a9c5780601f10613a7157610100808354040283529160200191613a9c565b820191906000526020600020905b815481529060010190602001808311613a7f57829003601f168201915b50505050509050600080600190505b601383604051613abb9190615648565b90815260405190819003602001902054613ad69060016155a8565b811015613b3f5784601384604051613aee9190615648565b908152604051908190036020019020613b0860018461556f565b81548110613b1857613b186155df565b90600052602060002001541415613b2d578091505b80613b37816155f5565b915050613aab565b5080613b815760405162461bcd60e51b81526020600482015260116024820152704e6f2064656c657461626c65206b65797360781b6044820152606401610bcd565b601382604051613b919190615648565b908152604051908190036020019020613bab60018361556f565b81548110613bbb57613bbb6155df565b60009182526020808320909101829055858252601290526040812080546001600160a01b031916815590613bf26001830182614cb8565b613c00600283016000614cb8565b5060006003820181905560048201819055600582018190556006820181905560078201805460ff19908116909155600883018290556009830191909155600a90910180549091169055613c51614660565b6001600160a01b0316634b455a51856040518263ffffffff1660e01b8152600401610f2191815260200190565b6000828152600f602090815260409091208251613c9d92840190614c34565b5061385082614711565b60005b601384604051613cba9190615648565b90815260405190819003602001902054811015612cd857600060126000601387604051613ce79190615648565b90815260200160405180910390208481548110613d0657613d066155df565b90600052602060002001548152602001908152602001600020604051806101600160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600182018054613d6a9061541c565b80601f0160208091040260200160405190810160405280929190818152602001828054613d969061541c565b8015613de35780601f10613db857610100808354040283529160200191613de3565b820191906000526020600020905b815481529060010190602001808311613dc657829003601f168201915b50505050508152602001600282018054613dfc9061541c565b80601f0160208091040260200160405190810160405280929190818152602001828054613e289061541c565b8015613e755780601f10613e4a57610100808354040283529160200191613e75565b820191906000526020600020905b815481529060010190602001808311613e5857829003601f168201915b50505091835250506003828101546020830152600483015460408301526005830154606083015260068301546080830152600783015460a09092019160ff1690811115613ec457613ec461535e565b6003811115613ed557613ed561535e565b81526008820154602082015260098201546040820152600a9091015460ff16151560609091015260a081015160c0820151919250613f16918691869161477b565b15613f4b5760405162461bcd60e51b815260206004820152600560248201526404b443131360dc1b6044820152606401610bcd565b5080613f56816155f5565b915050613caa565b6000808260e001516003811115613f7757613f7761535e565b1415613f865750610100015190565b60018260e001516003811115613f9e57613f9e61535e565b1415613fb557610100820151610a3d90600a615629565b60028260e001516003811115613fcd57613fcd61535e565b1415613fdc5750610100015190565b60038260e001516003811115613ff457613ff461535e565b14156140035750610100015190565b506000919050565b60138360405161401b9190615648565b9081526040805160209281900383019020805460018082018355600092835284832090910186905585825260128452919020835181546001600160a01b0319166001600160a01b039091161781558383015180518594929361408293908501920190614c34565b506040820151805161409e916002840191602090910190614c34565b50606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff021916908360038111156140f1576140f161535e565b02179055506101008201516008820155610120820151600982015561014090910151600a909101805460ff191691151591909117905561412f614660565b6001600160a01b031663979c249183836040518363ffffffff1660e01b815260040161112392919061582a565b6141668383614794565b60008281526004602090815260409091208251612cd892840190614c34565b6000818152600560205260408120546001600160a01b03166141fe5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610bcd565b6000614209836122c4565b9050806001600160a01b0316846001600160a01b031614806142445750836001600160a01b031661423984610b58565b6001600160a01b0316145b80612d6c57506001600160a01b0380821660009081526008602090815260408083209388168352929052205460ff16612d6c565b6142838484846144b5565b61428f848484846148e2565b612cd85760405162461bcd60e51b8152600401610bcd906158f8565b604080518082018252828152336020808301919091526000858152600d82529290922081518051929391926142e39284920190614c34565b5060209190910151600190910180546001600160a01b0319166001600160a01b039092169190911790555050565b600160008281526012602052604090206007015460ff1660038111156143395761433961535e565b1461436e5760405162461bcd60e51b81526020600482015260056024820152644b4431323360d81b6044820152606401610bcd565b6000818152601260205260409020600a015460ff16156143a05760405162461bcd60e51b8152600401610bcd906155c0565b346143aa8261249b565b111561120b5760405162461bcd60e51b815260206004820152600560248201526425a218991960d91b6044820152606401610bcd565b60008181526012602052604081206007015460ff1660038111156144065761440661535e565b1461443b5760405162461bcd60e51b815260206004820152600560248201526404b443132360dc1b6044820152606401610bcd565b6000818152601260205260409020600a015460ff161561446d5760405162461bcd60e51b8152600401610bcd906155c0565b600081815260126020526040902060080154341461120b5760405162461bcd60e51b815260206004820152600560248201526425a218991960d91b6044820152606401610bcd565b826001600160a01b03166144c8826122c4565b6001600160a01b0316146145305760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610bcd565b6001600160a01b0382166145925760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610bcd565b61459d8383836149ec565b6145a86000826134cd565b6001600160a01b03831660009081526006602052604081208054600192906145d190849061556f565b90915550506001600160a01b03821660009081526006602052604081208054600192906145ff9084906155a8565b909155505060008181526005602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000611618612ee0565b6000614675826122c4565b9050614683816000846149ec565b61468e6000836134cd565b6001600160a01b03811660009081526006602052604081208054600192906146b790849061556f565b909155505060008281526005602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b604080516060810182526000818301818152825233602080840191909152848252600d8152929020815180519293919261474e9284920190614c34565b5060209190910151600190910180546001600160a01b0319166001600160a01b0390921691909117905550565b60008383118061478a57508482105b1595945050505050565b6001600160a01b0382166147ea5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610bcd565b6000818152600560205260409020546001600160a01b03161561484f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610bcd565b61485b600083836149ec565b6001600160a01b03821660009081526006602052604081208054600192906148849084906155a8565b909155505060008181526005602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b156149e457604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061492690339089908890889060040161594a565b602060405180830381600087803b15801561494057600080fd5b505af1925050508015614970575060408051601f3d908101601f1916820190925261496d91810190615986565b60015b6149ca573d80801561499e576040519150601f19603f3d011682016040523d82523d6000602084013e6149a3565b606091505b5080516149c25760405162461bcd60e51b8152600401610bcd906158f8565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612d6c565b506001612d6c565b6001600160a01b038316614a4757614a4281600b80546000838152600c60205260408120829055600182018355919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90155565b614a6a565b816001600160a01b0316836001600160a01b031614614a6a57614a6a8382614aa4565b6001600160a01b038216614a8157610b5381614b41565b826001600160a01b0316826001600160a01b031614610b5357610b538282614bf0565b60006001614ab184612414565b614abb919061556f565b6000838152600a6020526040902054909150808214614b0e576001600160a01b03841660009081526009602090815260408083208584528252808320548484528184208190558352600a90915290208190555b506000918252600a602090815260408084208490556001600160a01b039094168352600981528383209183525290812055565b600b54600090614b539060019061556f565b6000838152600c6020526040812054600b8054939450909284908110614b7b57614b7b6155df565b9060005260206000200154905080600b8381548110614b9c57614b9c6155df565b6000918252602080832090910192909255828152600c9091526040808220849055858252812055600b805480614bd457614bd46159a3565b6001900381819060005260206000200160009055905550505050565b6000614bfb83612414565b6001600160a01b0390931660009081526009602090815260408083208684528252808320859055938252600a9052919091209190915550565b828054614c409061541c565b90600052602060002090601f016020900481019282614c625760008555614ca8565b82601f10614c7b57805160ff1916838001178555614ca8565b82800160010185558215614ca8579182015b82811115614ca8578251825591602001919060010190614c8d565b50614cb4929150614cee565b5090565b508054614cc49061541c565b6000825580601f10614cd4575050565b601f01602090049060005260206000209081019061120b91905b5b80821115614cb45760008155600101614cef565b600060208284031215614d1557600080fd5b5035919050565b60005b83811015614d37578181015183820152602001614d1f565b83811115612cd85750506000910152565b60008151808452614d60816020860160208601614d1c565b601f01601f19169290920160200192915050565b60a081526000614d8760a0830188614d48565b90508560208301528460408301526001600160a01b03841660608301528260808301529695505050505050565b6001600160e01b03198116811461120b57600080fd5b600060208284031215614ddc57600080fd5b813561271081614db4565b6020815260006127106020830184614d48565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115614e2b57614e2b614dfa565b604051601f8501601f19908116603f01168101908282118183101715614e5357614e53614dfa565b81604052809350858152868686011115614e6c57600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112614e9757600080fd5b61271083833560208501614e10565b6001600160a01b038116811461120b57600080fd5b600080600060608486031215614ed057600080fd5b833567ffffffffffffffff80821115614ee857600080fd5b614ef487838801614e86565b94506020860135915080821115614f0a57600080fd5b50614f1786828701614e86565b9250506040840135614f2881614ea6565b809150509250925092565b60008060408385031215614f4657600080fd5b8235614f5181614ea6565b946020939093013593505050565b801515811461120b57600080fd5b600080600060608486031215614f8257600080fd5b83359250602084013567ffffffffffffffff811115614fa057600080fd5b614fac86828701614e86565b9250506040840135614f2881614f5f565b60008060408385031215614fd057600080fd5b8235614fdb81614ea6565b9150602083013567ffffffffffffffff811115614ff757600080fd5b61500385828601614e86565b9150509250929050565b60008060006060848603121561502257600080fd5b833561502d81614ea6565b9250602084013561503d81614ea6565b929592945050506040919091013590565b60006020828403121561506057600080fd5b813567ffffffffffffffff81111561507757600080fd5b612d6c84828501614e86565b6040815260006150966040830185614d48565b90506001600160a01b03831660208301529392505050565b600080604083850312156150c157600080fd5b50508035926020909101359150565b6040815260006150e36040830185614d48565b905082151560208301529392505050565b60006020828403121561510657600080fd5b813561271081614ea6565b600080600080600080600060e0888a03121561512c57600080fd5b873567ffffffffffffffff8082111561514457600080fd5b6151508b838c01614e86565b985060208a013591508082111561516657600080fd5b506151738a828b01614e86565b96505060408801359450606088013593506080880135925060a08801356004811061519d57600080fd5b8092505060c0880135905092959891949750929550565b600080604083850312156151c757600080fd5b82356151d281614ea6565b915060208301356151e281614f5f565b809150509250929050565b6000806000806080858703121561520357600080fd5b843561520e81614ea6565b9350602085013561521e81614ea6565b925060408501359150606085013567ffffffffffffffff81111561524157600080fd5b8501601f8101871361525257600080fd5b61526187823560208401614e10565b91505092959194509250565b60008060006060848603121561528257600080fd5b833567ffffffffffffffff81111561529957600080fd5b6152a586828701614e86565b9660208601359650604090950135949350505050565b6020808252825182820181905260009190848201906040850190845b818110156152f3578351835292840192918401916001016152d7565b50909695505050505050565b6000806040838503121561531257600080fd5b82359150602083013567ffffffffffffffff811115614ff757600080fd5b6000806040838503121561534357600080fd5b823561534e81614ea6565b915060208301356151e281614ea6565b634e487b7160e01b600052602160045260246000fd5b6004811061539257634e487b7160e01b600052602160045260246000fd5b9052565b60006101606001600160a01b038e1683528060208401526153b98184018e614d48565b905082810360408401526153cd818d614d48565b9150508960608301528860808301528760a08301528660c08301526153f560e0830187615374565b84610100830152836101208301528215156101408301529c9b505050505050505050505050565b600181811c9082168061543057607f821691505b6020821081141561545157634e487b7160e01b600052602260045260246000fd5b50919050565b674b616c6569646f5f60c01b81526000825161547a816008850160208701614d1c565b9190910160080192915050565b60006020828403121561549957600080fd5b815161271081614ea6565b60208082526005908201526425a218189960d91b604082015260600190565b8481526080602082015260006154dc6080830186614d48565b82810360408401526154ee8186614d48565b915050821515606083015295945050505050565b6001600160a01b0383168152604060208201526000612d6c6040830184614d48565b60006001600160a01b038086168352808516602084015250606060408301526155506060830184614d48565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561558157615581615559565b500390565b6000826155a357634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156155bb576155bb615559565b500190565b6020808252600590820152644b4431323160d81b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060001982141561560957615609615559565b5060010190565b828152604060208201526000612d6c6040830184614d48565b600081600019048311821515161561564357615643615559565b500290565b6000825161565a818460208701614d1c565b9190910192915050565b6060815260006156776060830186614d48565b60208301949094525060400152919050565b60006020828403121561569b57600080fd5b5051919050565b60006101208b83528060208401526156bc8184018c614d48565b905082810360408401526156d0818b614d48565b9150508760608301528660808301528560a08301528460c08301526156f860e0830185615374565b826101008301529a9950505050505050505050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b8054600090600181811c908083168061577857607f831692505b602080841082141561579a57634e487b7160e01b600052602260045260246000fd5b8180156157ae57600181146157bf576157ec565b60ff198616895284890196506157ec565b60008881526020902060005b868110156157e45781548b8201529085019083016157cb565b505084890196505b50505050505092915050565b6000612d6c615807838661575e565b8461575e565b60006020828403121561581f57600080fd5b815161271081614f5f565b8281526040602082015261584a6040820183516001600160a01b03169052565b600060208301516101608060608501526158686101a0850183614d48565b91506040850151603f198584030160808601526158858382614d48565b925050606085015160a0850152608085015160c085015260a085015160e085015260c0850151610100818187015260e087015191506101206158c981880184615374565b908701516101408781019190915290870151928601929092525084015180151561018085015250949350505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261597c6080830184614d48565b9695505050505050565b60006020828403121561599857600080fd5b815161271081614db4565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220e7790e2ae02fc807b78db662510bf0bf9fcada90a89fe55eb1b8bfd9a4fb30e964736f6c63430008090033",
  "deployedBytecode": "$a79fa16630ef50be54c6520a39abca49df$__90633fb4aab09061297b908b9089908990600401615664565b60206040518083038186803b15801561299357600080fd5b505af41580156129a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129cb9190615689565b90506000604051806101600160405280306001600160a01b031681526020018a81526020018981526020016129fd4290565b8152602001888152602001878152602001868152602001856003811115612a2657612a2661535e565b815260200184815260200160008152602001600015158152509050612a4a81613f5e565b610120820152612a5b89838361400b565b612a6630838a61415c565b612a6e613545565b6001600160a01b0316637bab635a838b8b428c8c8c8c8c6040518a63ffffffff1660e01b8152600401612aa9999897969594939291906156a2565b600060405180830381600087803b158015612ac357600080fd5b505af1158015612ad7573d6000803e3d6000fd5b50505050612ae3613545565b60405163465bcf0560e01b815260006004820152306024820152604481018490526001600160a01b03919091169063465bcf0590606401600060405180830381600087803b158015612b3457600080fd5b505af1158015612b48573d6000803e3d6000fd5b50505050505050505050505050565b60105460408051638da5cb5b60e01b815290516000926001600160a01b031691638da5cb5b916004808301926020929190829003018186803b1580156115e057600080fd5b6010546040516b4d65646961466163746f727960a01b60208201526000916001600160a01b031690638eaa6ac090602c01611594565b606060028054610a529061541c565b6001600160a01b038216331415612c3a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610bcd565b3360008181526008602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b612cb03383614185565b612ccc5760405162461bcd60e51b8152600401610bcd9061570d565b612cd884848484614278565b50505050565b6040516303fb4aab60e41b815260009073__$a79fa16630ef50be54c6520a39abca49df$",
  "libraries": {
    "Ad": "0x82afac187DD0D7C0940614FE8CD7B9DeA79e1740"
  },
  "devdoc": {
    "author": "Shumpei Koike - <shumpei.koike@bridges.inc>",
    "kind": "dev",
    "methods": {
      "acceptProposal(uint256)": {
        "details": "Accepts the proposal.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "adId(string,uint256,uint256)": {
        "details": "Returns ID based on the space metadata, display start timestamp, and      display end timestamp. These three makes it the unique.",
        "params": {
          "displayEndTimestamp": "uint256 of the end timestamp for the display",
          "displayStartTimestamp": "uint256 of the start timestamp for the display",
          "spaceMetadata": "uint256 of the space metadata"
        }
      },
      "adPoolAddress()": {
        "details": "Gets the address of AdPool."
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balance()": {
        "details": "Returns the balacne deposited on the proxy contract."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "bid(uint256)": {
        "details": "Bids to participate in an auction.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "buy(uint256)": {
        "details": "Buys the token that is defined as the specific period on an ad space.      The price of the token is fixed.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "buyBasedOnTime(uint256)": {
        "details": "Buys the token that is defined as the specific period on an ad space.      The price is decreasing as time goes by.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "currentPrice(uint256)": {
        "details": "Returns the current price.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "deletePeriod(uint256)": {
        "details": "Deletes a period and its token.      If there is any users locking the fund for the sale, the amount would be transfered      to the user when deleting the period.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "denyProposal(uint256,string,bool)": {
        "details": "Denies the submitted proposal, mentioning what is the problem.",
        "params": {
          "offensive": "bool if the content would offend somebody",
          "reason": "string of the reason why it is rejected",
          "tokenId": "uint256 of the token ID"
        }
      },
      "display(string)": {
        "details": "Displays the ad content that is approved by the media owner.",
        "params": {
          "spaceMetadata": "string of the space metadata"
        }
      },
      "eventEmitterAddress()": {
        "details": "Gets the address of EventEmitter."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "initialize(string,string,address)": {
        "details": "Initialize the instance.",
        "params": {
          "baseURI": "string of the base URI",
          "nameRegistry": "address of NameRegistry",
          "title": "string of the title of the instance"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mediaFactoryAddress()": {
        "details": "Gets the address of MediaFactory."
      },
      "mediaRegistryAddress()": {
        "details": "Gets the address of MediaRegistry."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "nameRegistryAddress()": {
        "details": "Gets the address of NameRegistry"
      },
      "newPeriod(string,string,uint256,uint256,uint256,uint8,uint256)": {
        "details": "Create a new period for a space. This function requires some params      to decide which kinds of pricing way and how much price to get started.",
        "params": {
          "displayEndTimestamp": "uint256 of the end timestamp for the display",
          "displayStartTimestamp": "uint256 of the start timestamp for the display",
          "minPrice": "uint256 of the minimum price to sell it out",
          "pricing": "uint256 of the pricing way",
          "saleEndTimestamp": "uint256 of the end timestamp for the sale",
          "spaceMetadata": "string of the space metadata",
          "tokenMetadata": "string of the token metadata"
        }
      },
      "newSpace(string)": {
        "details": "Creates a new space for the media account.",
        "params": {
          "spaceMetadata": "string of the space metadata"
        }
      },
      "owner()": {
        "details": "Gets the owner address."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "propose(uint256,string)": {
        "details": "Proposes the metadata to the token you bought.      Users can propose many times as long as it is accepted.",
        "params": {
          "metadata": "string of the proposal metadata",
          "tokenId": "uint256 of the token ID"
        }
      },
      "receiveToken(uint256)": {
        "details": "Receives the token you bidded if you are the successful bidder.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Overrides transferFrom to emit an event from the common emitter."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenIdsOf(string)": {
        "details": "Returns tokenIds tied with the space metadata",
        "params": {
          "spaceMetadata": "string of the space metadata"
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Overrides transferFrom to emit an event from the common emitter."
      },
      "updateMedia(address,string)": {
        "details": "Updates the media EOA and the metadata.",
        "params": {
          "newMediaEOA": "address of a new EOA",
          "newMetadata": "string of a new metadata"
        }
      },
      "vaultAddress()": {
        "details": "Gets the address of Vault."
      },
      "withdraw(uint256)": {
        "details": "Withdraws the fund deposited to the proxy contract.      If you put 0 as the amount, you can withdraw as much as possible.",
        "params": {
          "amount": "uint256 of the withdrawal amount"
        }
      },
      "withdrawalAmount()": {
        "details": "Returns the withdrawal amount."
      }
    },
    "title": "AdManager - manages ad spaces and its periods to sell them to users.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2054,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "dummy",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2056,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2058,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2060,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_baseURI",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2064,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2068,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_owners",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2072,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_balances",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2076,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2082,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2088,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2092,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2095,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_allTokens",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2099,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1916,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "proposed",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(Proposal)1911_storage)"
      },
      {
        "astId": 1922,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "deniedReasons",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_array(t_struct(Denied)1906_storage)dyn_storage)"
      },
      {
        "astId": 1926,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "accepted",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1560,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_nameRegistry",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(NameRegistry)1789"
      },
      {
        "astId": 3797,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "spaced",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 3107,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "periods",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_struct(Period)4172_storage)"
      },
      {
        "astId": 3113,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_periodKeys",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3413,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "bidding",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_struct(Bidding)3396_storage)"
      },
      {
        "astId": 3419,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "offered",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_struct(Offer)3407_storage)"
      },
      {
        "astId": 3422,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_biddingTotal",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 3425,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_offeredTotal",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 10,
        "contract": "contracts/AdManager.sol:AdManager",
        "label": "_status",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Denied)1906_storage)dyn_storage": {
        "base": "t_struct(Denied)1906_storage",
        "encoding": "dynamic_array",
        "label": "struct DistributionRight.Denied[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(NameRegistry)1789": {
        "encoding": "inplace",
        "label": "contract NameRegistry",
        "numberOfBytes": "20"
      },
      "t_enum(Pricing)4148": {
        "encoding": "inplace",
        "label": "enum Ad.Pricing",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(Denied)1906_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DistributionRight.Denied[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Denied)1906_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Bidding)3396_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PricingStrategy.Bidding)",
        "numberOfBytes": "32",
        "value": "t_struct(Bidding)3396_storage"
      },
      "t_mapping(t_uint256,t_struct(Offer)3407_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PricingStrategy.Offer)",
        "numberOfBytes": "32",
        "value": "t_struct(Offer)3407_storage"
      },
      "t_mapping(t_uint256,t_struct(Period)4172_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Ad.Period)",
        "numberOfBytes": "32",
        "value": "t_struct(Period)4172_storage"
      },
      "t_mapping(t_uint256,t_struct(Proposal)1911_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DistributionRight.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)1911_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bidding)3396_storage": {
        "encoding": "inplace",
        "label": "struct PricingStrategy.Bidding",
        "members": [
          {
            "astId": 3391,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3393,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "bidder",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3395,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Denied)1906_storage": {
        "encoding": "inplace",
        "label": "struct DistributionRight.Denied",
        "members": [
          {
            "astId": 1903,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "reason",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1905,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "offensive",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Offer)3407_storage": {
        "encoding": "inplace",
        "label": "struct PricingStrategy.Offer",
        "members": [
          {
            "astId": 3398,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "spaceMetadata",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3400,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "displayStartTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3402,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "displayEndTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3404,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "sender",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 3406,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "price",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Period)4172_storage": {
        "encoding": "inplace",
        "label": "struct Ad.Period",
        "members": [
          {
            "astId": 4150,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "mediaProxy",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4152,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "spaceMetadata",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4154,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "tokenMetadata",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 4156,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "saleStartTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4158,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "saleEndTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4160,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "displayStartTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4162,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "displayEndTimestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4165,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "pricing",
            "offset": 0,
            "slot": "7",
            "type": "t_enum(Pricing)4148"
          },
          {
            "astId": 4167,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "minPrice",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 4169,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "startPrice",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 4171,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "sold",
            "offset": 0,
            "slot": "10",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(Proposal)1911_storage": {
        "encoding": "inplace",
        "label": "struct DistributionRight.Proposal",
        "members": [
          {
            "astId": 1908,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "content",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1910,
            "contract": "contracts/AdManager.sol:AdManager",
            "label": "proposer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}