{
  "address": "0xb81aFD23d139c159591695Bc7420Ec212f753086",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nameRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "adPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "bidding",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "bidder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct Sale.Bidding",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "currentPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "englishAuctionAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eventEmitterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mediaFactoryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mediaRegistryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nameRegistryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offerBidAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openBidAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalReviewAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "receiveToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xef04a4933061d57be08cb713f2c6b1c0677d9eb0ebff81969a2048dfbd31ba90",
  "receipt": {
    "to": null,
    "from": "0xCdfc500F7f0FCe1278aECb0340b523cD55b3EBbb",
    "contractAddress": "0xb81aFD23d139c159591695Bc7420Ec212f753086",
    "transactionIndex": 0,
    "gasUsed": "808996",
    "logsBloom": "0x
    "blockHash": "0xfe4a6d44782b695f951bb2fa4e1ccfdbf1b86982f28874c9fe3d396da3edc818",
    "transactionHash": "0xef04a4933061d57be08cb713f2c6b1c0677d9eb0ebff81969a2048dfbd31ba90",
    "logs": [],
    "blockNumber": 9760108,
    "cumulativeGasUsed": "808996",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x173E3862BaE7bD155a7a371Ee3b855de01aa63dd"
  ],
  "solcInputHash": "289fa2710193a113c0b3ec7823c19cab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nameRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"adPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"bidding\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct Sale.Bidding\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"englishAuctionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventEmitterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mediaFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mediaRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offerBidAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openBidAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalReviewAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"receiveToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"adPoolAddress()\":{\"details\":\"Gets the address of AdPool.\"},\"englishAuctionAddress()\":{\"details\":\"Gets the address of EnglishAuction.\"},\"eventEmitterAddress()\":{\"details\":\"Gets the address of EventEmitter.\"},\"mediaFactoryAddress()\":{\"details\":\"Gets the address of MediaFactory.\"},\"mediaRegistryAddress()\":{\"details\":\"Gets the address of MediaRegistry.\"},\"nameRegistryAddress()\":{\"details\":\"Gets the address of NameRegistry\"},\"offerBidAddress()\":{\"details\":\"Gets the address of OfferBid.\"},\"openBidAddress()\":{\"details\":\"Gets the address of OpenBid.\"},\"owner()\":{\"details\":\"Gets the owner address.\"},\"proposalReviewAddress()\":{\"details\":\"Gets the address of ProposalReview.\"},\"vaultAddress()\":{\"details\":\"Gets the address of Vault.\"}},\"stateVariables\":{\"_bidding\":{\"details\":\"Maps a tokenId with bidding info\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/peripheries/EnglishAuction.sol\":\"EnglishAuction\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/accessors/NameAccessor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/INameRegistry.sol\\\";\\n\\n/// @title NameAccessor - manages the endpoints.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ncontract NameAccessor {\\n\\tINameRegistry internal _nameRegistry;\\n\\n\\t/// @dev Sets the address of NameRegistry.\\n\\t/// @param nameRegistry address of the NameRegistry\\n\\tfunction initialize(address nameRegistry) internal {\\n\\t\\t_nameRegistry = INameRegistry(nameRegistry);\\n\\t}\\n\\n\\t/// @dev Prevents calling a function from anyone except the accepted contracts.\\n\\tmodifier onlyAllowedContract() {\\n\\t\\trequire(_nameRegistry.allowedContracts(msg.sender), \\\"KD013\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Throws if not called by MediaFactory.\\n\\tmodifier onlyFactory() {\\n\\t\\trequire(msg.sender == mediaFactoryAddress(), \\\"KD010\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Throws if called by any account other than the owner.\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(owner() == msg.sender, \\\"KD012\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Gets the address of NameRegistry\\n\\tfunction nameRegistryAddress() public view returns (address) {\\n\\t\\treturn address(_nameRegistry);\\n\\t}\\n\\n\\t/// @dev Gets the address of AdPool.\\n\\tfunction adPoolAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"AdPool\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of MediaFactory.\\n\\tfunction mediaFactoryAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"MediaFactory\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of MediaRegistry.\\n\\tfunction mediaRegistryAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"MediaRegistry\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of Vault.\\n\\tfunction vaultAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"Vault\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of EventEmitter.\\n\\tfunction eventEmitterAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"EventEmitter\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of EnglishAuction.\\n\\tfunction englishAuctionAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"EnglishAuction\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of OpenBid.\\n\\tfunction openBidAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"OpenBid\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of OfferBid.\\n\\tfunction offerBidAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"OfferBid\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of ProposalReview.\\n\\tfunction proposalReviewAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"ProposalReview\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the owner address.\\n\\tfunction owner() public view returns (address) {\\n\\t\\treturn _nameRegistry.deployer();\\n\\t}\\n}\\n\",\"keccak256\":\"0x92a0809b892e7b89f6a5d845aca491a2eda6bd56a5cbe69db31809f9e7c15b2a\",\"license\":\"UNLICENSED\"},\"contracts/common/BlockTimestamp.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\n/// @title BlockTimestamp - gets a block timestamp.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\nabstract contract BlockTimestamp {\\n\\t/// @dev Method that exists purely to be overridden for tests\\n\\tfunction _blockTimestamp() internal view virtual returns (uint256) {\\n\\t\\treturn block.timestamp;\\n\\t}\\n}\\n\",\"keccak256\":\"0x417bf100ecc94b19a01559e899f68e19777eae593c783d8280d13bcabc8e43a2\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IAdPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../libraries/Ad.sol\\\";\\nimport \\\"../libraries/Sale.sol\\\";\\n\\n/// @title IAdPool - stores all ads accorss every space.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface IAdPool {\\n\\tfunction allPeriods(uint256 tokenId) external view returns (Ad.Period memory);\\n\\n\\tfunction spaced(string memory spaceMetadata) external view returns (bool);\\n\\n\\tfunction addSpace(string memory spaceMetadata) external;\\n\\n\\tfunction addPeriod(\\n\\t\\taddress proxy,\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tstring memory tokenMetadata,\\n\\t\\tuint256 saleEndTimestamp,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\tAd.Pricing pricing,\\n\\t\\tuint256 minPrice\\n\\t) external returns (uint256);\\n\\n\\tfunction deletePeriod(uint256 tokenId) external;\\n\\n\\tfunction sold(uint256 tokenId) external;\\n\\n\\tfunction acceptOffer(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory tokenMetadata,\\n\\t\\tSale.Offer memory offer\\n\\t) external;\\n\\n\\tfunction mediaProxyOf(uint256 tokenId) external view returns (address);\\n\\n\\tfunction displayStart(uint256 tokenId) external view returns (uint256);\\n\\n\\tfunction displayEnd(uint256 tokenId) external view returns (uint256);\\n\\n\\tfunction tokenIdsOf(string memory spaceMetadata)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x9db94679b25b0afc4b4b94048dd2d040fd466be2024d8849d9d1d6b667dd9b1f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IEnglishAuction.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../libraries/Sale.sol\\\";\\n\\n/// @title IEnglishAuction\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface IEnglishAuction {\\n\\tfunction bid(\\n\\t\\tuint256 tokenId,\\n\\t\\taddress sender,\\n\\t\\tuint256 amount\\n\\t) external;\\n\\n\\tfunction receiveToken(uint256 tokenId) external returns (address, uint256);\\n\\n\\tfunction bidding(uint256 tokenId) external view returns (Sale.Bidding memory);\\n\\n\\tfunction currentPrice(uint256 tokenId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x886e11338d2034f24fc592c247d028009c3e032202d23b76b5b741c07846a3f8\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IEventEmitter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../libraries/Ad.sol\\\";\\n\\n/// @title IEventEmitter - emits events.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface IEventEmitter {\\n\\tfunction emitNewSpace(string memory metadata) external;\\n\\n\\tfunction emitNewPeriod(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tstring memory tokenMetadata,\\n\\t\\tuint256 saleStartTimestamp,\\n\\t\\tuint256 saleEndTimestamp,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\tAd.Pricing pricing,\\n\\t\\tuint256 minPrice\\n\\t) external;\\n\\n\\tfunction emitDeletePeriod(uint256 tokenId) external;\\n\\n\\tfunction emitBuy(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 msgValue,\\n\\t\\taddress msgSender,\\n\\t\\tuint256 blockTimestamp\\n\\t) external;\\n\\n\\tfunction emitBid(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 msgValue,\\n\\t\\taddress msgSender,\\n\\t\\tuint256 blockTimestamp\\n\\t) external;\\n\\n\\tfunction emitBidWithProposal(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 msgValue,\\n\\t\\taddress msgSender,\\n\\t\\tstring memory metadata,\\n\\t\\tuint256 blockTimestamp\\n\\t) external;\\n\\n\\tfunction emitSelectProposal(uint256 tokenId, address successfulBidder)\\n\\t\\texternal;\\n\\n\\tfunction emitReceiveToken(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 price,\\n\\t\\taddress buyer,\\n\\t\\tuint256 blockTimestamp\\n\\t) external;\\n\\n\\tfunction emitOfferPeriod(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\taddress sender,\\n\\t\\tuint256 price\\n\\t) external;\\n\\n\\tfunction emitCancelOffer(uint256 tokenId) external;\\n\\n\\tfunction emitAcceptOffer(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tstring memory tokenMetadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\tuint256 price\\n\\t) external;\\n\\n\\tfunction emitWithdraw(uint256 amount) external;\\n\\n\\tfunction emitPropose(uint256 tokenId, string memory metadata) external;\\n\\n\\tfunction emitAcceptProposal(uint256 tokenId, string memory metadata) external;\\n\\n\\tfunction emitDenyProposal(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory metadata,\\n\\t\\tstring memory reason,\\n\\t\\tbool offensive\\n\\t) external;\\n\\n\\tfunction emitTransferCustom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) external;\\n\\n\\tfunction emitNewMedia(\\n\\t\\taddress proxy,\\n\\t\\taddress mediaEOA,\\n\\t\\tstring memory applicationMetadata,\\n\\t\\tstring memory updatableMetadata,\\n\\t\\tuint256 saltNonce\\n\\t) external;\\n\\n\\tfunction emitUpdateMedia(\\n\\t\\taddress proxy,\\n\\t\\taddress mediaEOA,\\n\\t\\tstring memory accountMetadata\\n\\t) external;\\n\\n\\tfunction emitPaymentFailure(address receiver, uint256 price) external;\\n\\n\\tfunction emitReceived(address receiver, uint256 price) external;\\n}\\n\",\"keccak256\":\"0xb8824b144c059b4b6ce8f7453a5f68fd420481e29b18a4d0e5f35fa163bc4e8a\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IMediaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../libraries/Ad.sol\\\";\\n\\n/// @title MediaRegistry - registers a list of media accounts.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface IMediaRegistry {\\n\\tstruct Account {\\n\\t\\taddress proxy;\\n\\t\\taddress mediaEOA;\\n\\t\\tstring applicationMetadata;\\n\\t\\tstring updatableMetadata;\\n\\t}\\n\\n\\tfunction allAccounts(address proxy)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\taddress,\\n\\t\\t\\taddress,\\n\\t\\t\\tstring memory,\\n\\t\\t\\tstring memory\\n\\t\\t);\\n\\n\\t/// @dev Adds media account.\\n\\t/// @param proxy address of the proxy contract\\n\\t/// @param applicationMetadata string of constant metadata for the defailts of the account\\n\\t/// @param updatableMetadata string of constant metadata for the defailts of the account\\n\\t/// @param mediaEOA address of the media account\\n\\tfunction addMedia(\\n\\t\\taddress proxy,\\n\\t\\tstring memory applicationMetadata,\\n\\t\\tstring memory updatableMetadata,\\n\\t\\taddress mediaEOA\\n\\t) external;\\n\\n\\t/// @dev Updates media account.\\n\\t/// @param metadata string of the account metadata\\n\\t/// @param mediaEOA address of the media account\\n\\tfunction updateMedia(address mediaEOA, string memory metadata) external;\\n\\n\\tfunction updateApplicationMetadata(address proxy, string memory metadata)\\n\\t\\texternal;\\n\\n\\t/// @dev Returns whether the account has created or not.\\n\\t/// @param proxy address of the proxy contract that represents an account.\\n\\tfunction created(address proxy) external view returns (bool);\\n\\n\\t/// @dev Returns the owner of the account.\\n\\t/// @param proxy address of the proxy contract that represents an account.\\n\\tfunction ownerOf(address proxy) external view returns (address);\\n}\\n\",\"keccak256\":\"0x63655aa8531480b3da0c4b3f6cd63d72c3ca678661fa52dd90e5ab1a89b43131\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/INameRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\n/// @title INameRegistry - saves a set of addresses used in the system.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface INameRegistry {\\n\\t/// @dev Sets the address associated with the key name.\\n\\t///      If the address is the contract, not an EOA, it is\\n\\t///      saved as the allowed contract list.\\n\\t/// @param key bytes32 of the key\\n\\t/// @param value address of the value\\n\\tfunction set(bytes32 key, address value) external;\\n\\n\\t/// @dev Gets the address associated with the key name.\\n\\t/// @param key bytes32 of the key\\n\\tfunction get(bytes32 key) external view returns (address);\\n\\n\\t/// @dev Returns whether or not the address is the one that we deployed.\\n\\t/// @param caller address of the msg.sender\\n\\tfunction allowedContracts(address caller) external returns (bool);\\n\\n\\t/// @dev Gets the deployer of NameRegistry.\\n\\tfunction deployer() external view returns (address);\\n}\\n\",\"keccak256\":\"0xb4612b34aa95a45ed84877f60adc23f5f8eb941a00a2644dc29ecea26c1c032f\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Ad.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nlibrary Ad {\\n\\tuint256 private constant _ID_LENGTH = 100000000000000000000000000000000;\\n\\t// 0.RRP     : Recommended Retail Price\\n\\t// 1.DUTCH   : Dutch Auction\\n\\t// 2.ENGLISH : English Acction\\n\\t// 3.OFFER   : Offered by Others\\n\\t// 4.OPEN    : Open Bid by revealing the content\\n\\tenum Pricing {\\n\\t\\tRRP,\\n\\t\\tDUTCH,\\n\\t\\tENGLISH,\\n\\t\\tOFFER,\\n\\t\\tOPEN\\n\\t}\\n\\tstruct Period {\\n\\t\\taddress mediaProxy;\\n\\t\\tstring spaceMetadata;\\n\\t\\tstring tokenMetadata;\\n\\t\\tuint256 saleStartTimestamp;\\n\\t\\tuint256 saleEndTimestamp;\\n\\t\\tuint256 displayStartTimestamp;\\n\\t\\tuint256 displayEndTimestamp;\\n\\t\\tPricing pricing;\\n\\t\\tuint256 minPrice;\\n\\t\\tuint256 startPrice;\\n\\t\\tbool sold;\\n\\t}\\n\\n\\tfunction id(\\n\\t\\tstring memory metadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp\\n\\t) public pure returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\tuint256(\\n\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\tabi.encodePacked(metadata, displayStartTimestamp, displayEndTimestamp)\\n\\t\\t\\t\\t)\\n\\t\\t\\t) % _ID_LENGTH;\\n\\t}\\n}\\n\",\"keccak256\":\"0x98b8f7d36adbd4e0b75ef9c5a0ec7045e0661b9015a90beffa30004f35ff7039\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Purchase.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"./Ad.sol\\\";\\n\\nlibrary Purchase {\\n\\tfunction checkBeforeBuy(Ad.Period memory period, uint256 msgValue)\\n\\t\\tpublic\\n\\t\\tpure\\n\\t{\\n\\t\\trequire(period.pricing == Ad.Pricing.RRP, \\\"KD120\\\");\\n\\t\\trequire(!period.sold, \\\"KD121\\\");\\n\\t\\trequire(period.minPrice == msgValue, \\\"KD122\\\");\\n\\t}\\n\\n\\tfunction checkBeforeBuyBasedOnTime(\\n\\t\\tAd.Period memory period,\\n\\t\\tuint256 currentPrice,\\n\\t\\tuint256 msgValue\\n\\t) public pure {\\n\\t\\trequire(period.pricing == Ad.Pricing.DUTCH, \\\"KD123\\\");\\n\\t\\trequire(!period.sold, \\\"KD121\\\");\\n\\t\\trequire(currentPrice <= msgValue, \\\"KD122\\\");\\n\\t}\\n\\n\\tfunction checkBeforeBid(\\n\\t\\tAd.Period memory period,\\n\\t\\tuint256 currentPrice,\\n\\t\\tuint256 blockTimestamp,\\n\\t\\tuint256 msgValue\\n\\t) public pure {\\n\\t\\trequire(period.pricing == Ad.Pricing.ENGLISH, \\\"KD124\\\");\\n\\t\\trequire(!period.sold, \\\"KD121\\\");\\n\\t\\trequire(currentPrice < msgValue, \\\"KD122\\\");\\n\\t\\trequire(period.saleEndTimestamp >= blockTimestamp, \\\"KD129\\\");\\n\\t}\\n\\n\\tfunction checkBeforeBidWithProposal(\\n\\t\\tAd.Period memory period,\\n\\t\\tuint256 blockTimestamp,\\n\\t\\tuint256 msgValue\\n\\t) public pure {\\n\\t\\trequire(period.pricing == Ad.Pricing.OPEN, \\\"KD127\\\");\\n\\t\\trequire(!period.sold, \\\"KD121\\\");\\n\\t\\trequire(period.minPrice <= msgValue, \\\"KD122\\\");\\n\\t\\trequire(period.saleEndTimestamp >= blockTimestamp, \\\"KD129\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0x633c0d134cd93c15076fab913e86ca4a1d2927bae73f4974bd684b15754779d4\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Sale.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"./Ad.sol\\\";\\n\\nlibrary Sale {\\n\\tstruct Bidding {\\n\\t\\tuint256 tokenId;\\n\\t\\taddress bidder;\\n\\t\\tuint256 price;\\n\\t}\\n\\tstruct Offer {\\n\\t\\tstring spaceMetadata;\\n\\t\\tuint256 displayStartTimestamp;\\n\\t\\tuint256 displayEndTimestamp;\\n\\t\\taddress sender;\\n\\t\\tuint256 price;\\n\\t}\\n\\tstruct OpenBid {\\n\\t\\tuint256 tokenId;\\n\\t\\taddress sender;\\n\\t\\tuint256 price;\\n\\t\\tstring content;\\n\\t}\\n\\n\\tfunction startPrice(Ad.Period memory period) public pure returns (uint256) {\\n\\t\\tif (period.pricing == Ad.Pricing.RRP) {\\n\\t\\t\\treturn period.minPrice;\\n\\t\\t} else if (period.pricing == Ad.Pricing.DUTCH) {\\n\\t\\t\\treturn period.minPrice * 10;\\n\\t\\t} else if (period.pricing == Ad.Pricing.ENGLISH) {\\n\\t\\t\\treturn period.minPrice;\\n\\t\\t} else if (period.pricing == Ad.Pricing.OFFER) {\\n\\t\\t\\treturn period.minPrice;\\n\\t\\t} else if (period.pricing == Ad.Pricing.OPEN) {\\n\\t\\t\\treturn period.minPrice;\\n\\t\\t} else {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x1a32666b69f927d29b818c643d9b31e10f08e5663ed2a8409ff13522ad38bd38\",\"license\":\"UNLICENSED\"},\"contracts/peripheries/EnglishAuction.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../libraries/Ad.sol\\\";\\nimport \\\"../libraries/Purchase.sol\\\";\\nimport \\\"../accessors/NameAccessor.sol\\\";\\nimport \\\"../common/BlockTimestamp.sol\\\";\\nimport \\\"../interfaces/IAdPool.sol\\\";\\nimport \\\"../interfaces/IEventEmitter.sol\\\";\\nimport \\\"../interfaces/IEnglishAuction.sol\\\";\\nimport \\\"../interfaces/IMediaRegistry.sol\\\";\\n\\ncontract EnglishAuction is IEnglishAuction, BlockTimestamp, NameAccessor {\\n\\t/// @dev Maps a tokenId with bidding info\\n\\tmapping(uint256 => Sale.Bidding) internal _bidding;\\n\\n\\tmodifier onlyProxies() {\\n\\t\\trequire(_mediaRegistry().ownerOf(msg.sender) != address(0x0), \\\"KD011\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor(address _nameRegistry) {\\n\\t\\tinitialize(_nameRegistry);\\n\\t}\\n\\n\\tfunction bid(\\n\\t\\tuint256 tokenId,\\n\\t\\taddress sender,\\n\\t\\tuint256 value\\n\\t) external virtual override onlyProxies {\\n\\t\\t_bidding[tokenId] = Sale.Bidding(tokenId, sender, value);\\n\\t\\t_eventEmitter().emitBid(tokenId, value, sender, _blockTimestamp());\\n\\t}\\n\\n\\tfunction receiveToken(uint256 tokenId)\\n\\t\\texternal\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\tonlyProxies\\n\\t\\treturns (address bidder, uint256 price)\\n\\t{\\n\\t\\t_checkBeforeReceiveToken(tokenId);\\n\\t\\tbidder = _bidding[tokenId].bidder;\\n\\t\\tprice = _bidding[tokenId].price;\\n\\t\\tdelete _bidding[tokenId];\\n\\t\\t_eventEmitter().emitReceiveToken(tokenId, price, bidder, _blockTimestamp());\\n\\t}\\n\\n\\tfunction bidding(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (Sale.Bidding memory)\\n\\t{\\n\\t\\treturn _bidding[tokenId];\\n\\t}\\n\\n\\tfunction currentPrice(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn _bidding[tokenId].price;\\n\\t}\\n\\n\\tfunction _checkBeforeReceiveToken(uint256 tokenId)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (Ad.Period memory period)\\n\\t{\\n\\t\\tperiod = _adPool().allPeriods(tokenId);\\n\\t\\trequire(period.pricing == Ad.Pricing.ENGLISH, \\\"KD124\\\");\\n\\t\\trequire(!period.sold, \\\"KD121\\\");\\n\\t\\trequire(period.saleEndTimestamp < _blockTimestamp(), \\\"KD125\\\");\\n\\t}\\n\\n\\t/**\\n\\t * Accessors\\n\\t */\\n\\tfunction _adPool() internal view returns (IAdPool) {\\n\\t\\treturn IAdPool(adPoolAddress());\\n\\t}\\n\\n\\tfunction _eventEmitter() internal view virtual returns (IEventEmitter) {\\n\\t\\treturn IEventEmitter(eventEmitterAddress());\\n\\t}\\n\\n\\tfunction _mediaRegistry() internal view returns (IMediaRegistry) {\\n\\t\\treturn IMediaRegistry(mediaRegistryAddress());\\n\\t}\\n}\\n\",\"keccak256\":\"0x87b0a8d37910e04c5e1580061b59db53c02d0b2fb64202480ab67ca9846460f8\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610dcb380380610dcb83398101604081905261002f91610050565b600080546001600160a01b0319166001600160a01b03831617905550610080565b60006020828403121561006257600080fd5b81516001600160a01b038116811461007957600080fd5b9392505050565b610d3c8061008f6000396000f3fe608060405234801561001057600080fd5b50600436106100c55760003560e01c80630106d8eb146100ca5780632231c1eb146100e857806327b7a2f5146100f057806337df00c914610101578063430bf08a146101335780636a58767e1461013b5780637a3c4c17146101435780637cf175fb146101745780638da5cb5b1461017c5780638f6059d614610184578063c0f4ed311461018c578063c9cd71b5146101a1578063cc889b0b146101a9578063e2f5fc78146101e7578063f0726291146101ef575b600080fd5b6100d26101f7565b6040516100df91906109e1565b60405180910390f35b6100d26102b4565b6000546001600160a01b03166100d2565b61011461010f3660046109f5565b6102e5565b604080516001600160a01b0390931683526020830191909152016100df565b6100d2610454565b6100d2610483565b6101666101513660046109f5565b60009081526001602052604090206002015490565b6040519081526020016100df565b6100d26104ba565b6100d26104ec565b6100d261053b565b61019f61019a366004610a26565b610571565b005b6100d26106e6565b6101bc6101b73660046109f5565b610716565b60408051825181526020808401516001600160a01b03169082015291810151908201526060016100df565b6100d2610784565b6100d26107bc565b600080546040516d22b733b634b9b420bab1ba34b7b760911b60208201526001600160a01b0390911690638eaa6ac090602e015b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161025f91815260200190565b60206040518083038186803b15801561027757600080fd5b505afa15801561028b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102af9190610a69565b905090565b600080546040516613dc195b909a5960ca1b60208201526001600160a01b0390911690638eaa6ac09060270161022b565b600080806102f16107f2565b6001600160a01b03166314afd79e336040518263ffffffff1660e01b815260040161031c91906109e1565b60206040518083038186803b15801561033457600080fd5b505afa158015610348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036c9190610a69565b6001600160a01b0316141561039c5760405162461bcd60e51b815260040161039390610a8d565b60405180910390fd5b6103a5836107fc565b505050600081815260016020819052604082209081018054600283018054938590556001600160a01b031982169092559290556001600160a01b03909116906103ec610957565b6001600160a01b031663b287b60f848385426040518563ffffffff1660e01b815260040161041d9493929190610aac565b600060405180830381600087803b15801561043757600080fd5b505af115801561044b573d6000803e3d6000fd5b50505050915091565b600080546040516415985d5b1d60da1b60208201526001600160a01b0390911690638eaa6ac09060250161022b565b600080546040516c4d65646961526567697374727960981b60208201526001600160a01b0390911690638eaa6ac090602d0161022b565b600080546040516713d999995c909a5960c21b60208201526001600160a01b0390911690638eaa6ac09060280161022b565b60008060009054906101000a90046001600160a01b03166001600160a01b031663d5f394886040518163ffffffff1660e01b815260040160206040518083038186803b15801561027757600080fd5b600080546040516b4d65646961466163746f727960a01b60208201526001600160a01b0390911690638eaa6ac090602c0161022b565b600061057b6107f2565b6001600160a01b03166314afd79e336040518263ffffffff1660e01b81526004016105a691906109e1565b60206040518083038186803b1580156105be57600080fd5b505afa1580156105d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f69190610a69565b6001600160a01b0316141561061d5760405162461bcd60e51b815260040161039390610a8d565b604080516060810182528481526001600160a01b03848116602080840191825283850186815260008981526001928390529590952093518455905190830180546001600160a01b03191691909216179055905160029091015561067e610957565b6001600160a01b0316635b50ca69848385426040518563ffffffff1660e01b81526004016106af9493929190610aac565b600060405180830381600087803b1580156106c957600080fd5b505af11580156106dd573d6000803e3d6000fd5b50505050505050565b60008054604051651059141bdbdb60d21b60208201526001600160a01b0390911690638eaa6ac09060260161022b565b61074360405180606001604052806000815260200160006001600160a01b03168152602001600081525090565b50600090815260016020818152604092839020835160608101855281548152928101546001600160a01b031691830191909152600201549181019190915290565b600080546040516d50726f706f73616c52657669657760901b60208201526001600160a01b0390911690638eaa6ac090602e0161022b565b600080546040516b22bb32b73a22b6b4ba3a32b960a11b60208201526001600160a01b0390911690638eaa6ac090602c0161022b565b60006102af610483565b61080461096b565b61080c610961565b6001600160a01b031663b3a0ebc9836040518263ffffffff1660e01b815260040161083991815260200190565b60006040518083038186803b15801561085157600080fd5b505afa158015610865573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261088d9190810190610be9565b905060028160e0015160048111156108a7576108a7610cf0565b146108dc5760405162461bcd60e51b815260206004820152600560248201526412d10c4c8d60da1b6044820152606401610393565b806101400151156109175760405162461bcd60e51b81526020600482015260056024820152644b4431323160d81b6044820152606401610393565b428160800151106109525760405162461bcd60e51b81526020600482015260056024820152644b4431323560d81b6044820152606401610393565b919050565b60006102af6107bc565b60006102af6106e6565b60405180610160016040528060006001600160a01b03168152602001606081526020016060815260200160008152602001600081526020016000815260200160008152602001600060048111156109c4576109c4610cf0565b815260200160008152602001600081526020016000151581525090565b6001600160a01b0391909116815260200190565b600060208284031215610a0757600080fd5b5035919050565b6001600160a01b0381168114610a2357600080fd5b50565b600080600060608486031215610a3b57600080fd5b833592506020840135610a4d81610a0e565b929592945050506040919091013590565b805161095281610a0e565b600060208284031215610a7b57600080fd5b8151610a8681610a0e565b9392505050565b6020808252600590820152644b4430313160d81b604082015260600190565b93845260208401929092526001600160a01b03166040830152606082015260800190565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b0381118282101715610b0957610b09610ad0565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610b3757610b37610ad0565b604052919050565b600082601f830112610b5057600080fd5b81516001600160401b03811115610b6957610b69610ad0565b6020610b7d601f8301601f19168201610b0f565b8281528582848701011115610b9157600080fd5b60005b83811015610baf578581018301518282018401528201610b94565b83811115610bc05760008385840101525b5095945050505050565b80516005811061095257600080fd5b8051801515811461095257600080fd5b600060208284031215610bfb57600080fd5b81516001600160401b0380821115610c1257600080fd5b908301906101608286031215610c2757600080fd5b610c2f610ae6565b610c3883610a5e565b8152602083015182811115610c4c57600080fd5b610c5887828601610b3f565b602083015250604083015182811115610c7057600080fd5b610c7c87828601610b3f565b604083015250606083015160608201526080830151608082015260a083015160a082015260c083015160c0820152610cb660e08401610bca565b60e0820152610100838101519082015261012080840151908201526101409150610ce1828401610bd9565b91810191909152949350505050565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220ac6de4eb39fcecd765b26054fce676e7d987fdeea991652d0734ca97baf7fdac64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c55760003560e01c80630106d8eb146100ca5780632231c1eb146100e857806327b7a2f5146100f057806337df00c914610101578063430bf08a146101335780636a58767e1461013b5780637a3c4c17146101435780637cf175fb146101745780638da5cb5b1461017c5780638f6059d614610184578063c0f4ed311461018c578063c9cd71b5146101a1578063cc889b0b146101a9578063e2f5fc78146101e7578063f0726291146101ef575b600080fd5b6100d26101f7565b6040516100df91906109e1565b60405180910390f35b6100d26102b4565b6000546001600160a01b03166100d2565b61011461010f3660046109f5565b6102e5565b604080516001600160a01b0390931683526020830191909152016100df565b6100d2610454565b6100d2610483565b6101666101513660046109f5565b60009081526001602052604090206002015490565b6040519081526020016100df565b6100d26104ba565b6100d26104ec565b6100d261053b565b61019f61019a366004610a26565b610571565b005b6100d26106e6565b6101bc6101b73660046109f5565b610716565b60408051825181526020808401516001600160a01b03169082015291810151908201526060016100df565b6100d2610784565b6100d26107bc565b600080546040516d22b733b634b9b420bab1ba34b7b760911b60208201526001600160a01b0390911690638eaa6ac090602e015b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161025f91815260200190565b60206040518083038186803b15801561027757600080fd5b505afa15801561028b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102af9190610a69565b905090565b600080546040516613dc195b909a5960ca1b60208201526001600160a01b0390911690638eaa6ac09060270161022b565b600080806102f16107f2565b6001600160a01b03166314afd79e336040518263ffffffff1660e01b815260040161031c91906109e1565b60206040518083038186803b15801561033457600080fd5b505afa158015610348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036c9190610a69565b6001600160a01b0316141561039c5760405162461bcd60e51b815260040161039390610a8d565b60405180910390fd5b6103a5836107fc565b505050600081815260016020819052604082209081018054600283018054938590556001600160a01b031982169092559290556001600160a01b03909116906103ec610957565b6001600160a01b031663b287b60f848385426040518563ffffffff1660e01b815260040161041d9493929190610aac565b600060405180830381600087803b15801561043757600080fd5b505af115801561044b573d6000803e3d6000fd5b50505050915091565b600080546040516415985d5b1d60da1b60208201526001600160a01b0390911690638eaa6ac09060250161022b565b600080546040516c4d65646961526567697374727960981b60208201526001600160a01b0390911690638eaa6ac090602d0161022b565b600080546040516713d999995c909a5960c21b60208201526001600160a01b0390911690638eaa6ac09060280161022b565b60008060009054906101000a90046001600160a01b03166001600160a01b031663d5f394886040518163ffffffff1660e01b815260040160206040518083038186803b15801561027757600080fd5b600080546040516b4d65646961466163746f727960a01b60208201526001600160a01b0390911690638eaa6ac090602c0161022b565b600061057b6107f2565b6001600160a01b03166314afd79e336040518263ffffffff1660e01b81526004016105a691906109e1565b60206040518083038186803b1580156105be57600080fd5b505afa1580156105d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f69190610a69565b6001600160a01b0316141561061d5760405162461bcd60e51b815260040161039390610a8d565b604080516060810182528481526001600160a01b03848116602080840191825283850186815260008981526001928390529590952093518455905190830180546001600160a01b03191691909216179055905160029091015561067e610957565b6001600160a01b0316635b50ca69848385426040518563ffffffff1660e01b81526004016106af9493929190610aac565b600060405180830381600087803b1580156106c957600080fd5b505af11580156106dd573d6000803e3d6000fd5b50505050505050565b60008054604051651059141bdbdb60d21b60208201526001600160a01b0390911690638eaa6ac09060260161022b565b61074360405180606001604052806000815260200160006001600160a01b03168152602001600081525090565b50600090815260016020818152604092839020835160608101855281548152928101546001600160a01b031691830191909152600201549181019190915290565b600080546040516d50726f706f73616c52657669657760901b60208201526001600160a01b0390911690638eaa6ac090602e0161022b565b600080546040516b22bb32b73a22b6b4ba3a32b960a11b60208201526001600160a01b0390911690638eaa6ac090602c0161022b565b60006102af610483565b61080461096b565b61080c610961565b6001600160a01b031663b3a0ebc9836040518263ffffffff1660e01b815260040161083991815260200190565b60006040518083038186803b15801561085157600080fd5b505afa158015610865573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261088d9190810190610be9565b905060028160e0015160048111156108a7576108a7610cf0565b146108dc5760405162461bcd60e51b815260206004820152600560248201526412d10c4c8d60da1b6044820152606401610393565b806101400151156109175760405162461bcd60e51b81526020600482015260056024820152644b4431323160d81b6044820152606401610393565b428160800151106109525760405162461bcd60e51b81526020600482015260056024820152644b4431323560d81b6044820152606401610393565b919050565b60006102af6107bc565b60006102af6106e6565b60405180610160016040528060006001600160a01b03168152602001606081526020016060815260200160008152602001600081526020016000815260200160008152602001600060048111156109c4576109c4610cf0565b815260200160008152602001600081526020016000151581525090565b6001600160a01b0391909116815260200190565b600060208284031215610a0757600080fd5b5035919050565b6001600160a01b0381168114610a2357600080fd5b50565b600080600060608486031215610a3b57600080fd5b833592506020840135610a4d81610a0e565b929592945050506040919091013590565b805161095281610a0e565b600060208284031215610a7b57600080fd5b8151610a8681610a0e565b9392505050565b6020808252600590820152644b4430313160d81b604082015260600190565b93845260208401929092526001600160a01b03166040830152606082015260800190565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b0381118282101715610b0957610b09610ad0565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610b3757610b37610ad0565b604052919050565b600082601f830112610b5057600080fd5b81516001600160401b03811115610b6957610b69610ad0565b6020610b7d601f8301601f19168201610b0f565b8281528582848701011115610b9157600080fd5b60005b83811015610baf578581018301518282018401528201610b94565b83811115610bc05760008385840101525b5095945050505050565b80516005811061095257600080fd5b8051801515811461095257600080fd5b600060208284031215610bfb57600080fd5b81516001600160401b0380821115610c1257600080fd5b908301906101608286031215610c2757600080fd5b610c2f610ae6565b610c3883610a5e565b8152602083015182811115610c4c57600080fd5b610c5887828601610b3f565b602083015250604083015182811115610c7057600080fd5b610c7c87828601610b3f565b604083015250606083015160608201526080830151608082015260a083015160a082015260c083015160c0820152610cb660e08401610bca565b60e0820152610100838101519082015261012080840151908201526101409150610ce1828401610bd9565b91810191909152949350505050565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220ac6de4eb39fcecd765b26054fce676e7d987fdeea991652d0734ca97baf7fdac64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "adPoolAddress()": {
        "details": "Gets the address of AdPool."
      },
      "englishAuctionAddress()": {
        "details": "Gets the address of EnglishAuction."
      },
      "eventEmitterAddress()": {
        "details": "Gets the address of EventEmitter."
      },
      "mediaFactoryAddress()": {
        "details": "Gets the address of MediaFactory."
      },
      "mediaRegistryAddress()": {
        "details": "Gets the address of MediaRegistry."
      },
      "nameRegistryAddress()": {
        "details": "Gets the address of NameRegistry"
      },
      "offerBidAddress()": {
        "details": "Gets the address of OfferBid."
      },
      "openBidAddress()": {
        "details": "Gets the address of OpenBid."
      },
      "owner()": {
        "details": "Gets the owner address."
      },
      "proposalReviewAddress()": {
        "details": "Gets the address of ProposalReview."
      },
      "vaultAddress()": {
        "details": "Gets the address of Vault."
      }
    },
    "stateVariables": {
      "_bidding": {
        "details": "Maps a tokenId with bidding info"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2345,
        "contract": "contracts/peripheries/EnglishAuction.sol:EnglishAuction",
        "label": "_nameRegistry",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(INameRegistry)4466"
      },
      {
        "astId": 5986,
        "contract": "contracts/peripheries/EnglishAuction.sol:EnglishAuction",
        "label": "_bidding",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Bidding)4913_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(INameRegistry)4466": {
        "encoding": "inplace",
        "label": "contract INameRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Bidding)4913_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Sale.Bidding)",
        "numberOfBytes": "32",
        "value": "t_struct(Bidding)4913_storage"
      },
      "t_struct(Bidding)4913_storage": {
        "encoding": "inplace",
        "label": "struct Sale.Bidding",
        "members": [
          {
            "astId": 4908,
            "contract": "contracts/peripheries/EnglishAuction.sol:EnglishAuction",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4910,
            "contract": "contracts/peripheries/EnglishAuction.sol:EnglishAuction",
            "label": "bidder",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4912,
            "contract": "contracts/peripheries/EnglishAuction.sol:EnglishAuction",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}