{
  "address": "0x8022E32437e788C6348592062D8Ff18F968179aA",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenMetadata",
          "type": "string"
        }
      ],
      "name": "acceptOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "acceptProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "spaceMetadata",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "displayStartTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "displayEndTimestamp",
          "type": "uint256"
        }
      ],
      "name": "adId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "proposalMetadata",
          "type": "string"
        }
      ],
      "name": "bidWithProposal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buyBasedOnTime",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "deletePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "offensive",
          "type": "bool"
        }
      ],
      "name": "denyProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "englishAuctionAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eventEmitterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenMetadata",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "mediaEOA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nameRegistry",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mediaFactoryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mediaRegistryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nameRegistryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "spaceMetadata",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenMetadata",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "saleEndTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "displayStartTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "displayEndTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum Ad.Pricing",
          "name": "pricing",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        }
      ],
      "name": "newPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "spaceMetadata",
          "type": "string"
        }
      ],
      "name": "newSpace",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offerBidAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "spaceMetadata",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "displayStartTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "displayEndTimestamp",
          "type": "uint256"
        }
      ],
      "name": "offerPeriod",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openBidAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalReviewAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "propose",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "pushToSuccessfulBidder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "receiveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "selectProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newMediaEOA",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "newMetadata",
          "type": "string"
        }
      ],
      "name": "updateMedia",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3182c6429fe5a41285bd347b16df196dc94d906e4babe7ff226a02c1a43a921d",
  "receipt": {
    "to": null,
    "from": "0xCdfc500F7f0FCe1278aECb0340b523cD55b3EBbb",
    "contractAddress": "0x8022E32437e788C6348592062D8Ff18F968179aA",
    "transactionIndex": 0,
    "gasUsed": "3822346",
    "logsBloom": "0x
    "blockHash": "0xaf8020a5e5da8b3f81338d7c0284760d0a150f13bf88a14d17d4d06c0297741a",
    "transactionHash": "0x3182c6429fe5a41285bd347b16df196dc94d906e4babe7ff226a02c1a43a921d",
    "logs": [],
    "blockNumber": 9769925,
    "cumulativeGasUsed": "3822346",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "3b843421c7cbc4186a9b782888b147b3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenMetadata\",\"type\":\"string\"}],\"name\":\"acceptOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"acceptProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"spaceMetadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"displayStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"displayEndTimestamp\",\"type\":\"uint256\"}],\"name\":\"adId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proposalMetadata\",\"type\":\"string\"}],\"name\":\"bidWithProposal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyBasedOnTime\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"deletePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"offensive\",\"type\":\"bool\"}],\"name\":\"denyProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"englishAuctionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventEmitterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenMetadata\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"mediaEOA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nameRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mediaFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mediaRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"spaceMetadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenMetadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"saleEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"displayStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"displayEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum Ad.Pricing\",\"name\":\"pricing\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"}],\"name\":\"newPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"spaceMetadata\",\"type\":\"string\"}],\"name\":\"newSpace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offerBidAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"spaceMetadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"displayStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"displayEndTimestamp\",\"type\":\"uint256\"}],\"name\":\"offerPeriod\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openBidAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalReviewAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"pushToSuccessfulBidder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"receiveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"selectProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMediaEOA\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newMetadata\",\"type\":\"string\"}],\"name\":\"updateMedia\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Shumpei Koike - <shumpei.koike@bridges.inc>\",\"kind\":\"dev\",\"methods\":{\"acceptOffer(uint256,string)\":{\"details\":\"Accepts an offer by the Media.\",\"params\":{\"tokenId\":\"uint256 of the token ID\",\"tokenMetadata\":\"string of the NFT token metadata\"}},\"acceptProposal(uint256)\":{\"details\":\"Accepts the proposal.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"adId(string,uint256,uint256)\":{\"details\":\"Returns ID based on the space metadata, display start timestamp, and      display end timestamp. These three makes it the unique.\",\"params\":{\"displayEndTimestamp\":\"uint256 of the end timestamp for the display\",\"displayStartTimestamp\":\"uint256 of the start timestamp for the display\",\"spaceMetadata\":\"uint256 of the space metadata\"}},\"adPoolAddress()\":{\"details\":\"Gets the address of AdPool.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balance()\":{\"details\":\"Returns the balacne deposited on the proxy contract.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"bid(uint256)\":{\"details\":\"Bids to participate in an auction.      It is defined as an English Auction.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"bidWithProposal(uint256,string)\":{\"details\":\"Bids to participate in an auction.      It is defined as an Open Bid.\",\"params\":{\"proposalMetadata\":\"string of the metadata hash\",\"tokenId\":\"uint256 of the token ID\"}},\"buy(uint256)\":{\"details\":\"Buys the token that is defined as the specific period on an ad space.      The price of the token is fixed.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"buyBasedOnTime(uint256)\":{\"details\":\"Buys the token that is defined as the specific period on an ad space.      The price is decreasing as time goes by, that is defined as an Dutch Auction.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"cancelOffer(uint256)\":{\"details\":\"Cancels an offer.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"deletePeriod(uint256)\":{\"details\":\"Deletes a period and its token.      If there is any users locking the fund for the sale, the amount would be transfered      to the user when deleting the period.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"denyProposal(uint256,string,bool)\":{\"details\":\"Denies the submitted proposal, mentioning what is the problem.\",\"params\":{\"offensive\":\"bool if the content would offend somebody\",\"reason\":\"string of the reason why it is rejected\",\"tokenId\":\"uint256 of the token ID\"}},\"englishAuctionAddress()\":{\"details\":\"Gets the address of EnglishAuction.\"},\"eventEmitterAddress()\":{\"details\":\"Gets the address of EventEmitter.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"initialize(string,string,string,address,address)\":{\"details\":\"Initialize the instance.\",\"params\":{\"baseURI\":\"string of the base URI\",\"mediaEOA\":\"address of the media owner\",\"nameRegistry\":\"address of NameRegistry\",\"title\":\"string of the title of the instance\",\"tokenMetadata\":\"string of the token metadata\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mediaFactoryAddress()\":{\"details\":\"Gets the address of MediaFactory.\"},\"mediaRegistryAddress()\":{\"details\":\"Gets the address of MediaRegistry.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"nameRegistryAddress()\":{\"details\":\"Gets the address of NameRegistry\"},\"newPeriod(string,string,uint256,uint256,uint256,uint8,uint256)\":{\"details\":\"Create a new period for a space. This function requires some params      to decide which kinds of pricing way and how much price to get started.\",\"params\":{\"displayEndTimestamp\":\"uint256 of the end timestamp for the display\",\"displayStartTimestamp\":\"uint256 of the start timestamp for the display\",\"minPrice\":\"uint256 of the minimum price to sell it out\",\"pricing\":\"uint256 of the pricing way\",\"saleEndTimestamp\":\"uint256 of the end timestamp for the sale\",\"spaceMetadata\":\"string of the space metadata\",\"tokenMetadata\":\"string of the token metadata\"}},\"newSpace(string)\":{\"details\":\"Creates a new space for the media account.\",\"params\":{\"spaceMetadata\":\"string of the space metadata\"}},\"offerBidAddress()\":{\"details\":\"Gets the address of OfferBid.\"},\"offerPeriod(string,uint256,uint256)\":{\"details\":\"Offers to buy a period that the sender requests.\",\"params\":{\"displayEndTimestamp\":\"uint256 of the end timestamp for the display\",\"displayStartTimestamp\":\"uint256 of the start timestamp for the display\",\"spaceMetadata\":\"string of the space metadata\"}},\"openBidAddress()\":{\"details\":\"Gets the address of OpenBid.\"},\"owner()\":{\"details\":\"Gets the owner address.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"proposalReviewAddress()\":{\"details\":\"Gets the address of ProposalReview.\"},\"propose(uint256,string)\":{\"details\":\"Proposes the metadata to the token you bought.      Users can propose many times as long as it is accepted.\",\"params\":{\"metadata\":\"string of the proposal metadata\",\"tokenId\":\"uint256 of the token ID\"}},\"pushToSuccessfulBidder(uint256)\":{\"details\":\"Receives the token you bidded if you are the successful bidder.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"receiveToken(uint256)\":{\"details\":\"Receives the token you bidded if you are the successful bidder.\",\"params\":{\"tokenId\":\"uint256 of the token ID\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Overrides transferFrom to emit an event from the common emitter.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"selectProposal(uint256,uint256)\":{\"details\":\"Selects the best proposal bidded with.\",\"params\":{\"index\":\"uint256 of the index number\",\"tokenId\":\"uint256 of the token ID\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Overrides transferFrom to emit an event from the common emitter.\"},\"updateMedia(address,string)\":{\"details\":\"Updates the media EOA and the metadata.\",\"params\":{\"newMediaEOA\":\"address of a new EOA\",\"newMetadata\":\"string of a new metadata\"}},\"vaultAddress()\":{\"details\":\"Gets the address of Vault.\"},\"withdraw()\":{\"details\":\"Withdraws the fund deposited to the proxy contract.\"},\"withdrawalAmount()\":{\"details\":\"Returns the withdrawal amount.\"}},\"title\":\"MediaFacade - A root contract that calls the processes of each media.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MediaFacade.sol\":\"MediaFacade\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"contracts/MediaFacade.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./base/ERC721.sol\\\";\\nimport \\\"./base/Storage.sol\\\";\\nimport \\\"./libraries/Sale.sol\\\";\\nimport \\\"./common/BlockTimestamp.sol\\\";\\nimport \\\"./accessors/NameAccessor.sol\\\";\\nimport \\\"./interfaces/IMediaRegistry.sol\\\";\\nimport \\\"./interfaces/IAdPool.sol\\\";\\nimport \\\"./interfaces/IEnglishAuction.sol\\\";\\nimport \\\"./interfaces/IEventEmitter.sol\\\";\\nimport \\\"./interfaces/IOpenBid.sol\\\";\\nimport \\\"./interfaces/IOfferBid.sol\\\";\\nimport \\\"./interfaces/IProposalReview.sol\\\";\\n\\n/// @title MediaFacade - A root contract that calls the processes of each media.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ncontract MediaFacade is\\n\\tERC721,\\n\\tReentrancyGuard,\\n\\tNameAccessor,\\n\\tBlockTimestamp,\\n\\tStorage\\n{\\n\\t/// @dev Can call it by only the media\\n\\tmodifier onlyMedia() {\\n\\t\\trequire(_mediaRegistry().ownerOf(address(this)) == msg.sender, \\\"KD012\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Prevents the media from calling by yourself\\n\\tmodifier exceptMedia() {\\n\\t\\trequire(_mediaRegistry().ownerOf(address(this)) != msg.sender, \\\"KD014\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Called by the successful bidder\\n\\tmodifier onlySuccessfulBidder(uint256 tokenId) {\\n\\t\\trequire(_english().bidding(tokenId).bidder == msg.sender, \\\"KD126\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Can call it only once\\n\\tmodifier initializer() {\\n\\t\\trequire(address(_nameRegistry) == address(0x0), \\\"AR000\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Initialize the instance.\\n\\t/// @param title string of the title of the instance\\n\\t/// @param baseURI string of the base URI\\n\\t/// @param tokenMetadata string of the token metadata\\n\\t/// @param mediaEOA address of the media owner\\n\\t/// @param nameRegistry address of NameRegistry\\n\\tfunction initialize(\\n\\t\\tstring memory title,\\n\\t\\tstring memory baseURI,\\n\\t\\tstring memory tokenMetadata,\\n\\t\\taddress mediaEOA,\\n\\t\\taddress nameRegistry\\n\\t) external virtual initializer {\\n\\t\\t_name = title;\\n\\t\\t_symbol = string(abi.encodePacked(\\\"Kaleido_\\\", title));\\n\\t\\t_baseURI = baseURI;\\n\\t\\t_mintRight(mediaEOA, 0, tokenMetadata);\\n\\t\\tinitialize(nameRegistry);\\n\\t}\\n\\n\\t/// @dev Updates the media EOA and the metadata.\\n\\t/// @param newMediaEOA address of a new EOA\\n\\t/// @param newMetadata string of a new metadata\\n\\tfunction updateMedia(address newMediaEOA, string memory newMetadata)\\n\\t\\texternal\\n\\t\\tvirtual\\n\\t\\tonlyMedia\\n\\t{\\n\\t\\t_mediaRegistry().updateMedia(newMediaEOA, newMetadata);\\n\\t}\\n\\n\\t/// @dev Creates a new space for the media account.\\n\\t/// @param spaceMetadata string of the space metadata\\n\\tfunction newSpace(string memory spaceMetadata) external virtual onlyMedia {\\n\\t\\t_adPool().addSpace(spaceMetadata);\\n\\t}\\n\\n\\t/// @dev Create a new period for a space. This function requires some params\\n\\t///      to decide which kinds of pricing way and how much price to get started.\\n\\t/// @param spaceMetadata string of the space metadata\\n\\t/// @param tokenMetadata string of the token metadata\\n\\t/// @param saleEndTimestamp uint256 of the end timestamp for the sale\\n\\t/// @param displayStartTimestamp uint256 of the start timestamp for the display\\n\\t/// @param displayEndTimestamp uint256 of the end timestamp for the display\\n\\t/// @param pricing uint256 of the pricing way\\n\\t/// @param minPrice uint256 of the minimum price to sell it out\\n\\tfunction newPeriod(\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tstring memory tokenMetadata,\\n\\t\\tuint256 saleEndTimestamp,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\tAd.Pricing pricing,\\n\\t\\tuint256 minPrice\\n\\t) external virtual onlyMedia {\\n\\t\\tuint256 tokenId = _adPool().addPeriod(\\n\\t\\t\\taddress(this),\\n\\t\\t\\tspaceMetadata,\\n\\t\\t\\ttokenMetadata,\\n\\t\\t\\tsaleEndTimestamp,\\n\\t\\t\\tdisplayStartTimestamp,\\n\\t\\t\\tdisplayEndTimestamp,\\n\\t\\t\\tpricing,\\n\\t\\t\\tminPrice\\n\\t\\t);\\n\\t\\t_mintRight(address(this), tokenId, tokenMetadata);\\n\\t}\\n\\n\\t/// @dev Deletes a period and its token.\\n\\t///      If there is any users locking the fund for the sale, the amount would be transfered\\n\\t///      to the user when deleting the period.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction deletePeriod(uint256 tokenId) external virtual onlyMedia {\\n\\t\\trequire(ownerOf(tokenId) == address(this), \\\"KD121\\\");\\n\\t\\t_adPool().deletePeriod(tokenId);\\n\\t\\t_burnRight(tokenId);\\n\\t}\\n\\n\\t/// @dev Buys the token that is defined as the specific period on an ad space.\\n\\t///      The price of the token is fixed.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction buy(uint256 tokenId) external payable virtual exceptMedia {\\n\\t\\t_adPool().soldByFixedPrice(tokenId, msg.value);\\n\\t\\t_dropRight(msg.sender, tokenId);\\n\\t\\t_collectFees(msg.value / 10);\\n\\t\\t_event().emitBuy(tokenId, msg.value, msg.sender, _blockTimestamp());\\n\\t}\\n\\n\\t/// @dev Buys the token that is defined as the specific period on an ad space.\\n\\t///      The price is decreasing as time goes by, that is defined as an Dutch Auction.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction buyBasedOnTime(uint256 tokenId)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\tvirtual\\n\\t\\texceptMedia\\n\\t{\\n\\t\\t_adPool().soldByDutchAuction(tokenId, msg.value);\\n\\t\\t_dropRight(msg.sender, tokenId);\\n\\t\\t_collectFees(msg.value / 10);\\n\\t\\t_event().emitBuy(tokenId, msg.value, msg.sender, _blockTimestamp());\\n\\t}\\n\\n\\t/// @dev Bids to participate in an auction.\\n\\t///      It is defined as an English Auction.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction bid(uint256 tokenId)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\tvirtual\\n\\t\\texceptMedia\\n\\t\\tnonReentrant\\n\\t{\\n\\t\\tSale.Bidding memory prev = _adPool().bidByEnglishAuction(\\n\\t\\t\\ttokenId,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tmsg.value\\n\\t\\t);\\n\\t\\t_refundBiddingAmount(prev);\\n\\t\\t_processingTotal += (msg.value - prev.price);\\n\\t}\\n\\n\\t/// @dev Bids to participate in an auction.\\n\\t///      It is defined as an Open Bid.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param proposalMetadata string of the metadata hash\\n\\tfunction bidWithProposal(uint256 tokenId, string memory proposalMetadata)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\tvirtual\\n\\t\\texceptMedia\\n\\t{\\n\\t\\t_adPool().bidWithProposal(tokenId, proposalMetadata, msg.sender, msg.value);\\n\\t\\t_processingTotal += msg.value;\\n\\t}\\n\\n\\t/// @dev Selects the best proposal bidded with.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param index uint256 of the index number\\n\\tfunction selectProposal(uint256 tokenId, uint256 index)\\n\\t\\texternal\\n\\t\\tvirtual\\n\\t\\tonlyMedia\\n\\t\\tnonReentrant\\n\\t{\\n\\t\\t(\\n\\t\\t\\tSale.OpenBid memory selected,\\n\\t\\t\\tSale.OpenBid[] memory nonSelected\\n\\t\\t) = _openBid().selectProposal(tokenId, index);\\n\\t\\t_dropRight(selected.sender, tokenId);\\n\\t\\t_processingTotal -= selected.price;\\n\\t\\t_collectFees(selected.price / 10);\\n\\t\\t_refundToProposers(nonSelected);\\n\\t}\\n\\n\\t/// @dev Receives the token you bidded if you are the successful bidder.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction receiveToken(uint256 tokenId)\\n\\t\\texternal\\n\\t\\tvirtual\\n\\t\\tonlySuccessfulBidder(tokenId)\\n\\t{\\n\\t\\t_toSuccessfulBidder(tokenId, msg.sender);\\n\\t}\\n\\n\\t/// @dev Receives the token you bidded if you are the successful bidder.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction pushToSuccessfulBidder(uint256 tokenId) external virtual onlyMedia {\\n\\t\\t_toSuccessfulBidder(tokenId, _english().bidding(tokenId).bidder);\\n\\t}\\n\\n\\t/// @dev Offers to buy a period that the sender requests.\\n\\t/// @param spaceMetadata string of the space metadata\\n\\t/// @param displayStartTimestamp uint256 of the start timestamp for the display\\n\\t/// @param displayEndTimestamp uint256 of the end timestamp for the display\\n\\tfunction offerPeriod(\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp\\n\\t) external payable virtual exceptMedia {\\n\\t\\t_offerBid().offer(\\n\\t\\t\\tspaceMetadata,\\n\\t\\t\\tdisplayStartTimestamp,\\n\\t\\t\\tdisplayEndTimestamp,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tmsg.value\\n\\t\\t);\\n\\t\\t_processingTotal += msg.value;\\n\\t}\\n\\n\\t/// @dev Cancels an offer.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction cancelOffer(uint256 tokenId)\\n\\t\\texternal\\n\\t\\tvirtual\\n\\t\\texceptMedia\\n\\t\\tnonReentrant\\n\\t{\\n\\t\\tSale.Offer memory prev = _offerBid().cancel(tokenId, msg.sender);\\n\\t\\t_refundOfferedAmount(prev);\\n\\t\\t_processingTotal -= prev.price;\\n\\t}\\n\\n\\t/// @dev Accepts an offer by the Media.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param tokenMetadata string of the NFT token metadata\\n\\tfunction acceptOffer(uint256 tokenId, string memory tokenMetadata)\\n\\t\\texternal\\n\\t\\tvirtual\\n\\t\\tonlyMedia\\n\\t{\\n\\t\\tSale.Offer memory target = _offerBid().accept(tokenId);\\n\\t\\t_adPool().acceptOffer(tokenId, tokenMetadata, target);\\n\\t\\t_mintRight(target.sender, tokenId, tokenMetadata);\\n\\t\\t_collectFees(target.price / 10);\\n\\t\\t_processingTotal -= target.price;\\n\\t}\\n\\n\\t/// @dev Withdraws the fund deposited to the proxy contract.\\n\\tfunction withdraw() external virtual onlyMedia {\\n\\t\\tuint256 withdrawal = withdrawalAmount();\\n\\t\\tbool success = _pay(msg.sender, withdrawal);\\n\\t\\tif (success) _event().emitWithdraw(withdrawal);\\n\\t}\\n\\n\\t/// @dev Proposes the metadata to the token you bought.\\n\\t///      Users can propose many times as long as it is accepted.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param metadata string of the proposal metadata\\n\\tfunction propose(uint256 tokenId, string memory metadata) external virtual {\\n\\t\\trequire(ownerOf(tokenId) == msg.sender, \\\"KD012\\\");\\n\\t\\t_review().propose(tokenId, metadata, msg.sender);\\n\\t}\\n\\n\\t/// @dev Accepts the proposal.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction acceptProposal(uint256 tokenId) external virtual onlyMedia {\\n\\t\\trequire(ownerOf(tokenId) == _review().proposer(tokenId), \\\"KD131\\\");\\n\\t\\t_review().accept(tokenId);\\n\\t}\\n\\n\\t/// @dev Denies the submitted proposal, mentioning what is the problem.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param reason string of the reason why it is rejected\\n\\t/// @param offensive bool if the content would offend somebody\\n\\tfunction denyProposal(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory reason,\\n\\t\\tbool offensive\\n\\t) external virtual onlyMedia {\\n\\t\\t_review().denyProposal(tokenId, reason, offensive);\\n\\t}\\n\\n\\t/// @dev Overrides transferFrom to emit an event from the common emitter.\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public virtual override {\\n\\t\\tsuper.transferFrom(from, to, tokenId);\\n\\t\\t_event().emitTransferCustom(from, to, tokenId);\\n\\t}\\n\\n\\t/// @dev Overrides transferFrom to emit an event from the common emitter.\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public virtual override {\\n\\t\\tsuper.safeTransferFrom(from, to, tokenId);\\n\\t\\t_event().emitTransferCustom(from, to, tokenId);\\n\\t}\\n\\n\\t/// @dev Returns ID based on the space metadata, display start timestamp, and\\n\\t///      display end timestamp. These three makes it the unique.\\n\\t/// @param spaceMetadata uint256 of the space metadata\\n\\t/// @param displayStartTimestamp uint256 of the start timestamp for the display\\n\\t/// @param displayEndTimestamp uint256 of the end timestamp for the display\\n\\tfunction adId(\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp\\n\\t) public pure virtual returns (uint256) {\\n\\t\\treturn Ad.id(spaceMetadata, displayStartTimestamp, displayEndTimestamp);\\n\\t}\\n\\n\\t/// @dev Returns the balacne deposited on the proxy contract.\\n\\tfunction balance() public view virtual returns (uint256) {\\n\\t\\treturn address(this).balance;\\n\\t}\\n\\n\\t/// @dev Returns the withdrawal amount.\\n\\tfunction withdrawalAmount() public view virtual returns (uint256) {\\n\\t\\treturn address(this).balance - _processingTotal;\\n\\t}\\n\\n\\tfunction _mintRight(\\n\\t\\taddress reciever,\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory metadata\\n\\t) internal virtual {\\n\\t\\t_mint(reciever, tokenId);\\n\\t\\t_tokenURIs[tokenId] = metadata;\\n\\t\\tif (tokenId != 0)\\n\\t\\t\\t_event().emitTransferCustom(address(0), reciever, tokenId);\\n\\t}\\n\\n\\tfunction _burnRight(uint256 tokenId) internal virtual {\\n\\t\\t_burn(tokenId);\\n\\t\\t_tokenURIs[tokenId] = \\\"\\\";\\n\\t\\t_event().emitTransferCustom(address(this), address(0), tokenId);\\n\\t}\\n\\n\\tfunction _dropRight(address receiver, uint256 tokenId) internal virtual {\\n\\t\\t_transfer(address(this), receiver, tokenId);\\n\\t\\t_event().emitTransferCustom(address(this), receiver, tokenId);\\n\\t}\\n\\n\\tfunction _refundBiddingAmount(Sale.Bidding memory prev) internal virtual {\\n\\t\\t_pay(prev.bidder, prev.price);\\n\\t}\\n\\n\\tfunction _refundOfferedAmount(Sale.Offer memory prev) internal virtual {\\n\\t\\t_pay(prev.sender, prev.price);\\n\\t}\\n\\n\\tfunction _refundToProposers(Sale.OpenBid[] memory nonSelected)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < nonSelected.length; i++) {\\n\\t\\t\\tSale.OpenBid memory target = nonSelected[i];\\n\\t\\t\\tif (target.price != 0) {\\n\\t\\t\\t\\t_processingTotal -= target.price;\\n\\t\\t\\t\\t_pay(target.sender, target.price);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _pay(address receiver, uint256 price)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t\\treturns (bool success)\\n\\t{\\n\\t\\t(success, ) = payable(receiver).call{ value: price, gas: 10000 }(\\\"\\\");\\n\\t\\tif (!success) {\\n\\t\\t\\t_event().emitPaymentFailure(receiver, price);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _toSuccessfulBidder(uint256 tokenId, address receiver)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t{\\n\\t\\t(, uint256 price) = _adPool().soldByEnglishAuction(tokenId);\\n\\t\\t_processingTotal -= price;\\n\\t\\t_dropRight(receiver, tokenId);\\n\\t\\t_collectFees(price / 10);\\n\\t}\\n\\n\\tfunction _collectFees(uint256 value) internal virtual {\\n\\t\\t_pay(vaultAddress(), value);\\n\\t}\\n\\n\\t/**\\n\\t * Accessors\\n\\t */\\n\\tfunction _mediaRegistry() internal view virtual returns (IMediaRegistry) {\\n\\t\\treturn IMediaRegistry(mediaRegistryAddress());\\n\\t}\\n\\n\\tfunction _adPool() internal view virtual returns (IAdPool) {\\n\\t\\treturn IAdPool(adPoolAddress());\\n\\t}\\n\\n\\tfunction _event() internal view virtual returns (IEventEmitter) {\\n\\t\\treturn IEventEmitter(eventEmitterAddress());\\n\\t}\\n\\n\\tfunction _english() internal view virtual returns (IEnglishAuction) {\\n\\t\\treturn IEnglishAuction(englishAuctionAddress());\\n\\t}\\n\\n\\tfunction _openBid() internal view virtual returns (IOpenBid) {\\n\\t\\treturn IOpenBid(openBidAddress());\\n\\t}\\n\\n\\tfunction _offerBid() internal view virtual returns (IOfferBid) {\\n\\t\\treturn IOfferBid(offerBidAddress());\\n\\t}\\n\\n\\tfunction _review() internal view virtual returns (IProposalReview) {\\n\\t\\treturn IProposalReview(proposalReviewAddress());\\n\\t}\\n}\\n\",\"keccak256\":\"0xba8744087c5cdd0268352e5750cbb3740d1ebe764134ea0794fa5e13e9769a67\",\"license\":\"UNLICENSED\"},\"contracts/accessors/NameAccessor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/INameRegistry.sol\\\";\\n\\n/// @title NameAccessor - manages the endpoints.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ncontract NameAccessor {\\n\\tINameRegistry internal _nameRegistry;\\n\\n\\t/// @dev Sets the address of NameRegistry.\\n\\t/// @param nameRegistry address of the NameRegistry\\n\\tfunction initialize(address nameRegistry) internal {\\n\\t\\t_nameRegistry = INameRegistry(nameRegistry);\\n\\t}\\n\\n\\t/// @dev Prevents calling a function from anyone except the accepted contracts.\\n\\tmodifier onlyAllowedContract() {\\n\\t\\trequire(_nameRegistry.allowedContracts(msg.sender), \\\"KD013\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Throws if called by any account other than the owner.\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(owner() == msg.sender, \\\"KD012\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Gets the address of NameRegistry\\n\\tfunction nameRegistryAddress() public view returns (address) {\\n\\t\\treturn address(_nameRegistry);\\n\\t}\\n\\n\\t/// @dev Gets the address of AdPool.\\n\\tfunction adPoolAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"AdPool\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of MediaFactory.\\n\\tfunction mediaFactoryAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"MediaFactory\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of MediaRegistry.\\n\\tfunction mediaRegistryAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"MediaRegistry\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of Vault.\\n\\tfunction vaultAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"Vault\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of EventEmitter.\\n\\tfunction eventEmitterAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"EventEmitter\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of EnglishAuction.\\n\\tfunction englishAuctionAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"EnglishAuction\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of OpenBid.\\n\\tfunction openBidAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"OpenBid\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of OfferBid.\\n\\tfunction offerBidAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"OfferBid\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of ProposalReview.\\n\\tfunction proposalReviewAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"ProposalReview\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the owner address.\\n\\tfunction owner() public view returns (address) {\\n\\t\\treturn _nameRegistry.deployer();\\n\\t}\\n}\\n\",\"keccak256\":\"0x1cd127d9c865e6441a0039bfe6af64ac60f5cf5c338d27e9f928f2eec21ca244\",\"license\":\"UNLICENSED\"},\"contracts/base/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/IERC721Metadata.sol\\\";\\nimport \\\"../interfaces/IERC721Receiver.sol\\\";\\nimport \\\"../interfaces/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\ncontract ERC721 is Context, IERC721Enumerable, IERC721Metadata {\\n\\tusing Address for address;\\n\\tusing Strings for uint256;\\n\\n\\t// Token name\\n\\tstring internal _name;\\n\\n\\t// Token symbol\\n\\tstring internal _symbol;\\n\\n\\t// Base URI\\n\\tstring internal _baseURI;\\n\\n\\t// Token URIs\\n\\tmapping(uint256 => string) internal _tokenURIs;\\n\\n\\t// Mapping from token ID to owner address\\n\\tmapping(uint256 => address) internal _owners;\\n\\n\\t// Mapping owner address to token count\\n\\tmapping(address => uint256) internal _balances;\\n\\n\\t// Mapping from token ID to approved address\\n\\tmapping(uint256 => address) internal _tokenApprovals;\\n\\n\\t// Mapping from owner to operator approvals\\n\\tmapping(address => mapping(address => bool)) internal _operatorApprovals;\\n\\n\\t// Mapping from owner to list of owned token IDs\\n\\tmapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n\\t// Mapping from token ID to index of the owner tokens list\\n\\tmapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n\\t// Array with all token ids, used for enumeration\\n\\tuint256[] private _allTokens;\\n\\n\\t// Mapping from token id to position in the allTokens array\\n\\tmapping(uint256 => uint256) private _allTokensIndex;\\n\\n\\t/**\\n\\t * @dev See {IERC165-supportsInterface}.\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId)\\n\\t\\tpublic\\n\\t\\tpure\\n\\t\\tvirtual\\n\\t\\toverride(IERC165)\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn\\n\\t\\t\\tinterfaceId == type(IERC721).interfaceId ||\\n\\t\\t\\tinterfaceId == type(IERC721Metadata).interfaceId;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-balanceOf}.\\n\\t */\\n\\tfunction balanceOf(address owner)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n\\t\\treturn _balances[owner];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-ownerOf}.\\n\\t */\\n\\tfunction ownerOf(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (address)\\n\\t{\\n\\t\\taddress owner = _owners[tokenId];\\n\\t\\trequire(owner != address(0), \\\"KD114\\\");\\n\\t\\treturn owner;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Metadata-name}.\\n\\t */\\n\\tfunction name() public view virtual override returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Metadata-symbol}.\\n\\t */\\n\\tfunction symbol() public view virtual override returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Metadata-tokenURI}.\\n\\t */\\n\\tfunction tokenURI(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\t_exists(tokenId),\\n\\t\\t\\t\\\"ERC721Metadata: URI query for nonexistent token\\\"\\n\\t\\t);\\n\\n\\t\\treturn\\n\\t\\t\\tbytes(_baseURI).length > 0\\n\\t\\t\\t\\t? string(abi.encodePacked(_baseURI, _tokenURIs[tokenId]))\\n\\t\\t\\t\\t: _tokenURIs[tokenId];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-approve}.\\n\\t */\\n\\tfunction approve(address to, uint256 tokenId) public virtual override {\\n\\t\\taddress owner = ownerOf(tokenId);\\n\\t\\trequire(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n\\t\\trequire(\\n\\t\\t\\t_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n\\t\\t\\t\\\"ERC721: approve caller is not owner nor approved for all\\\"\\n\\t\\t);\\n\\n\\t\\t_approve(to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-getApproved}.\\n\\t */\\n\\tfunction getApproved(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (address)\\n\\t{\\n\\t\\trequire(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n\\t\\treturn _tokenApprovals[tokenId];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-setApprovalForAll}.\\n\\t */\\n\\tfunction setApprovalForAll(address operator, bool approved)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t{\\n\\t\\trequire(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n\\t\\t_operatorApprovals[_msgSender()][operator] = approved;\\n\\t\\temit ApprovalForAll(_msgSender(), operator, approved);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-isApprovedForAll}.\\n\\t */\\n\\tfunction isApprovedForAll(address owner, address operator)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn _operatorApprovals[owner][operator];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-transferFrom}.\\n\\t */\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public virtual override {\\n\\t\\t//solhint-disable-next-line max-line-length\\n\\t\\trequire(\\n\\t\\t\\t_isApprovedOrOwner(_msgSender(), tokenId),\\n\\t\\t\\t\\\"ERC721: transfer caller is not owner nor approved\\\"\\n\\t\\t);\\n\\n\\t\\t_transfer(from, to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-safeTransferFrom}.\\n\\t */\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public virtual override {\\n\\t\\tsafeTransferFrom(from, to, tokenId, \\\"\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-safeTransferFrom}.\\n\\t */\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) public virtual override {\\n\\t\\trequire(\\n\\t\\t\\t_isApprovedOrOwner(_msgSender(), tokenId),\\n\\t\\t\\t\\\"ERC721: transfer caller is not owner nor approved\\\"\\n\\t\\t);\\n\\t\\t_safeTransfer(from, to, tokenId, _data);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n\\t * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n\\t *\\n\\t * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n\\t *\\n\\t * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n\\t * implement alternative mechanisms to perform token transfer, such as signature-based.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `from` cannot be the zero address.\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must exist and be owned by `from`.\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _safeTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) internal virtual {\\n\\t\\t_transfer(from, to, tokenId);\\n\\t\\trequire(\\n\\t\\t\\t_checkOnERC721Received(from, to, tokenId, _data),\\n\\t\\t\\t\\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns whether `tokenId` exists.\\n\\t *\\n\\t * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n\\t *\\n\\t * Tokens start existing when they are minted (`_mint`),\\n\\t * and stop existing when they are burned (`_burn`).\\n\\t */\\n\\tfunction _exists(uint256 tokenId) internal view virtual returns (bool) {\\n\\t\\treturn _owners[tokenId] != address(0);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must exist.\\n\\t */\\n\\tfunction _isApprovedOrOwner(address spender, uint256 tokenId)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\trequire(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n\\t\\taddress owner = ownerOf(tokenId);\\n\\t\\treturn (spender == owner ||\\n\\t\\t\\tgetApproved(tokenId) == spender ||\\n\\t\\t\\tisApprovedForAll(owner, spender));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Safely mints `tokenId` and transfers it to `to`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must not exist.\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _safeMint(address to, uint256 tokenId) internal virtual {\\n\\t\\t_safeMint(to, tokenId, \\\"\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n\\t * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n\\t */\\n\\tfunction _safeMint(\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) internal virtual {\\n\\t\\t_mint(to, tokenId);\\n\\t\\trequire(\\n\\t\\t\\t_checkOnERC721Received(address(0), to, tokenId, _data),\\n\\t\\t\\t\\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Mints `tokenId` and transfers it to `to`.\\n\\t *\\n\\t * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must not exist.\\n\\t * - `to` cannot be the zero address.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _mint(address to, uint256 tokenId) internal virtual {\\n\\t\\trequire(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n\\t\\trequire(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n\\t\\t_beforeTokenTransfer(address(0), to, tokenId);\\n\\n\\t\\t_balances[to] += 1;\\n\\t\\t_owners[tokenId] = to;\\n\\n\\t\\temit Transfer(address(0), to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Destroys `tokenId`.\\n\\t * The approval is cleared when the token is burned.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must exist.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _burn(uint256 tokenId) internal virtual {\\n\\t\\taddress owner = ownerOf(tokenId);\\n\\n\\t\\t_beforeTokenTransfer(owner, address(0), tokenId);\\n\\n\\t\\t// Clear approvals\\n\\t\\t_approve(address(0), tokenId);\\n\\n\\t\\t_balances[owner] -= 1;\\n\\t\\tdelete _owners[tokenId];\\n\\n\\t\\temit Transfer(owner, address(0), tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers `tokenId` from `from` to `to`.\\n\\t *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must be owned by `from`.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _transfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) internal virtual {\\n\\t\\trequire(\\n\\t\\t\\townerOf(tokenId) == from,\\n\\t\\t\\t\\\"ERC721: transfer of token that is not own\\\"\\n\\t\\t);\\n\\t\\trequire(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n\\t\\t_beforeTokenTransfer(from, to, tokenId);\\n\\n\\t\\t// Clear approvals from the previous owner\\n\\t\\t_approve(address(0), tokenId);\\n\\n\\t\\t_balances[from] -= 1;\\n\\t\\t_balances[to] += 1;\\n\\t\\t_owners[tokenId] = to;\\n\\n\\t\\temit Transfer(from, to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Approve `to` to operate on `tokenId`\\n\\t *\\n\\t * Emits a {Approval} event.\\n\\t */\\n\\tfunction _approve(address to, uint256 tokenId) internal virtual {\\n\\t\\t_tokenApprovals[tokenId] = to;\\n\\t\\temit Approval(ownerOf(tokenId), to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n\\t * The call is not executed if the target address is not a contract.\\n\\t *\\n\\t * @param from address representing the previous owner of the given token ID\\n\\t * @param to target address that will receive the tokens\\n\\t * @param tokenId uint256 ID of the token to be transferred\\n\\t * @param _data bytes optional data to send along with the call\\n\\t * @return bool whether the call correctly returned the expected magic value\\n\\t */\\n\\tfunction _checkOnERC721Received(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) private returns (bool) {\\n\\t\\tif (to.isContract()) {\\n\\t\\t\\ttry\\n\\t\\t\\t\\tIERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\\n\\t\\t\\treturns (bytes4 retval) {\\n\\t\\t\\t\\treturn retval == IERC721Receiver(to).onERC721Received.selector;\\n\\t\\t\\t} catch (bytes memory reason) {\\n\\t\\t\\t\\tif (reason.length == 0) {\\n\\t\\t\\t\\t\\trevert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tassembly {\\n\\t\\t\\t\\t\\t\\trevert(add(32, reason), mload(reason))\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Hook that is called before any token transfer. This includes minting\\n\\t * and burning.\\n\\t *\\n\\t * Calling conditions:\\n\\t *\\n\\t * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n\\t * transferred to `to`.\\n\\t * - When `from` is zero, `tokenId` will be minted for `to`.\\n\\t * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n\\t * - `from` and `to` are never both zero.\\n\\t *\\n\\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n\\t */\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) internal {\\n\\t\\tif (from == address(0)) {\\n\\t\\t\\t_addTokenToAllTokensEnumeration(tokenId);\\n\\t\\t} else if (from != to) {\\n\\t\\t\\t_removeTokenFromOwnerEnumeration(from, tokenId);\\n\\t\\t}\\n\\t\\tif (to == address(0)) {\\n\\t\\t\\t_removeTokenFromAllTokensEnumeration(tokenId);\\n\\t\\t} else if (to != from) {\\n\\t\\t\\t_addTokenToOwnerEnumeration(to, tokenId);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n\\t */\\n\\tfunction tokenOfOwnerByIndex(address owner, uint256 index)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\tindex < balanceOf(owner),\\n\\t\\t\\t\\\"ERC721Enumerable: owner index out of bounds\\\"\\n\\t\\t);\\n\\t\\treturn _ownedTokens[owner][index];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Enumerable-totalSupply}.\\n\\t */\\n\\tfunction totalSupply() public view virtual override returns (uint256) {\\n\\t\\treturn _allTokens.length;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Enumerable-tokenByIndex}.\\n\\t */\\n\\tfunction tokenByIndex(uint256 index)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\tindex < totalSupply(),\\n\\t\\t\\t\\\"ERC721Enumerable: global index out of bounds\\\"\\n\\t\\t);\\n\\t\\treturn _allTokens[index];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n\\t * @param to address representing the new owner of the given token ID\\n\\t * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n\\t */\\n\\tfunction _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n\\t\\tuint256 length = balanceOf(to);\\n\\t\\t_ownedTokens[to][length] = tokenId;\\n\\t\\t_ownedTokensIndex[tokenId] = length;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to add a token to this extension's token tracking data structures.\\n\\t * @param tokenId uint256 ID of the token to be added to the tokens list\\n\\t */\\n\\tfunction _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n\\t\\t_allTokensIndex[tokenId] = _allTokens.length;\\n\\t\\t_allTokens.push(tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n\\t * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n\\t * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n\\t * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n\\t * @param from address representing the previous owner of the given token ID\\n\\t * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n\\t */\\n\\tfunction _removeTokenFromOwnerEnumeration(address from, uint256 tokenId)\\n\\t\\tprivate\\n\\t{\\n\\t\\t// To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n\\t\\t// then delete the last slot (swap and pop).\\n\\n\\t\\tuint256 lastTokenIndex = balanceOf(from) - 1;\\n\\t\\tuint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n\\t\\t// When the token to delete is the last token, the swap operation is unnecessary\\n\\t\\tif (tokenIndex != lastTokenIndex) {\\n\\t\\t\\tuint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n\\t\\t\\t_ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n\\t\\t\\t_ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\t\\t}\\n\\n\\t\\t// This also deletes the contents at the last position of the array\\n\\t\\tdelete _ownedTokensIndex[tokenId];\\n\\t\\tdelete _ownedTokens[from][lastTokenIndex];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to remove a token from this extension's token tracking data structures.\\n\\t * This has O(1) time complexity, but alters the order of the _allTokens array.\\n\\t * @param tokenId uint256 ID of the token to be removed from the tokens list\\n\\t */\\n\\tfunction _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n\\t\\t// To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n\\t\\t// then delete the last slot (swap and pop).\\n\\n\\t\\tuint256 lastTokenIndex = _allTokens.length - 1;\\n\\t\\tuint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n\\t\\t// When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n\\t\\t// rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n\\t\\t// an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n\\t\\tuint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n\\t\\t_allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n\\t\\t_allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n\\t\\t// This also deletes the contents at the last position of the array\\n\\t\\tdelete _allTokensIndex[tokenId];\\n\\t\\t_allTokens.pop();\\n\\t}\\n}\\n\",\"keccak256\":\"0xc37482bc9dc8a727e4d1c45a6fe3a0f7cd37dc45fe745ebc652fbaafa3fc7b3e\",\"license\":\"UNLICENSED\"},\"contracts/base/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\n/// @title Storage - saves state values. Note that the order of the state values\\n///                  should not be reordered when upgrading because the slot would be shifted.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\nabstract contract Storage {\\n\\t/// @dev Temporal amount that is deposited by bid or offered.\\n\\tuint256 internal _processingTotal;\\n}\\n\",\"keccak256\":\"0x97d304964b6f4ab7ea60423e3a2c4ea618e69c7b4c8749ed31b2e8e211b3931b\",\"license\":\"UNLICENSED\"},\"contracts/common/BlockTimestamp.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\n/// @title BlockTimestamp - gets a block timestamp.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\nabstract contract BlockTimestamp {\\n\\t/// @dev Method that exists purely to be overridden for tests\\n\\tfunction _blockTimestamp() internal view virtual returns (uint256) {\\n\\t\\treturn block.timestamp;\\n\\t}\\n}\\n\",\"keccak256\":\"0x6991a9f03b7e615563901bb2fb1dadcb4fb6cf3f0e7c15a39d22d5929f530940\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IAdPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Ad.sol\\\";\\nimport \\\"../libraries/Sale.sol\\\";\\n\\n/// @title IAdPool - stores all ads accorss every space.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface IAdPool {\\n\\tfunction allPeriods(uint256 tokenId) external view returns (Ad.Period memory);\\n\\n\\tfunction spaced(string memory spaceMetadata) external view returns (bool);\\n\\n\\t/// @dev Creates a new space for the media account.\\n\\t/// @param spaceMetadata string of the space metadata\\n\\tfunction addSpace(string memory spaceMetadata) external;\\n\\n\\t/// @dev Create a new period for a space. This function requires some params\\n\\t///      to decide which kinds of pricing way and how much price to get started.\\n\\t/// @param proxy address of the media proxy\\n\\t/// @param spaceMetadata string of the space metadata\\n\\t/// @param tokenMetadata string of the token metadata\\n\\t/// @param saleEndTimestamp uint256 of the end timestamp for the sale\\n\\t/// @param displayStartTimestamp uint256 of the start timestamp for the display\\n\\t/// @param displayEndTimestamp uint256 of the end timestamp for the display\\n\\t/// @param pricing uint256 of the pricing way\\n\\t/// @param minPrice uint256 of the minimum price to sell it out\\n\\tfunction addPeriod(\\n\\t\\taddress proxy,\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tstring memory tokenMetadata,\\n\\t\\tuint256 saleEndTimestamp,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\tAd.Pricing pricing,\\n\\t\\tuint256 minPrice\\n\\t) external returns (uint256);\\n\\n\\t/// @dev Deletes a period and its token.\\n\\t///      If there is any users locking the fund for the sale, the amount would be transfered\\n\\t///      to the user when deleting the period.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction deletePeriod(uint256 tokenId) external;\\n\\n\\t/// @dev Buys the token that is defined as the specific period on an ad space.\\n\\t///      The price of the token is fixed.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param msgValue uint256 of the price\\n\\tfunction soldByFixedPrice(uint256 tokenId, uint256 msgValue) external;\\n\\n\\t/// @dev Buys the token that is defined as the specific period on an ad space.\\n\\t///      The price is decreasing as time goes by, that is defined as an Dutch Auction.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param msgValue uint256 of the price\\n\\tfunction soldByDutchAuction(uint256 tokenId, uint256 msgValue) external;\\n\\n\\t/// @dev Bids to participate in an auction.\\n\\t///      It is defined as an English Auction.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param msgSender address of the sender\\n\\t/// @param msgValue uint256 of the price\\n\\tfunction bidByEnglishAuction(\\n\\t\\tuint256 tokenId,\\n\\t\\taddress msgSender,\\n\\t\\tuint256 msgValue\\n\\t) external returns (Sale.Bidding memory);\\n\\n\\t/// @dev Receives the token you bidded if you are the successful bidder.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction soldByEnglishAuction(uint256 tokenId)\\n\\t\\texternal\\n\\t\\treturns (address, uint256);\\n\\n\\t/// @dev Bids to participate in an auction.\\n\\t///      It is defined as an Open Bid.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param proposalMetadata string of the metadata hash\\n\\t/// @param msgSender address of the sender\\n\\t/// @param msgValue uint256 of the price\\n\\tfunction bidWithProposal(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory proposalMetadata,\\n\\t\\taddress msgSender,\\n\\t\\tuint256 msgValue\\n\\t) external;\\n\\n\\t/// @dev Accepts an offer by the Media.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param tokenMetadata string of the NFT token metadata\\n\\t/// @param offer Sale.Offer\\n\\tfunction acceptOffer(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory tokenMetadata,\\n\\t\\tSale.Offer memory offer\\n\\t) external;\\n\\n\\tfunction mediaProxyOf(uint256 tokenId) external view returns (address);\\n\\n\\t/// @dev Returns tokenIds tied with the space metadata\\n\\t/// @param spaceMetadata string of the space metadata\\n\\tfunction tokenIdsOf(string memory spaceMetadata)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256[] memory);\\n\\n\\t/// @dev Returns the current price.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction currentPrice(uint256 tokenId) external view returns (uint256);\\n\\n\\t/// @dev Displays the ad content that is approved by the media owner.\\n\\t/// @param spaceMetadata string of the space metadata\\n\\tfunction display(string memory spaceMetadata)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (string memory, uint256);\\n}\\n\",\"keccak256\":\"0x5852d66c1c377716df5e33f0d416f5083e7209cbc1d7f51593f46bd9ae49b728\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n\\t/**\\n\\t * @dev Returns true if this contract implements the interface defined by\\n\\t * `interfaceId`. See the corresponding\\n\\t * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n\\t * to learn more about how these ids are created.\\n\\t *\\n\\t * This function call must use less than 30 000 gas.\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x47fb51ba47a6f1dd885afda05a6d11d7f6bb24d594dbfaa4411c5185c202265e\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n\\t/**\\n\\t * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n\\t */\\n\\tevent Transfer(\\n\\t\\taddress indexed from,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 indexed tokenId\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n\\t */\\n\\tevent Approval(\\n\\t\\taddress indexed owner,\\n\\t\\taddress indexed approved,\\n\\t\\tuint256 indexed tokenId\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n\\t */\\n\\tevent ApprovalForAll(\\n\\t\\taddress indexed owner,\\n\\t\\taddress indexed operator,\\n\\t\\tbool approved\\n\\t);\\n\\n\\t/**\\n\\t * @dev Returns the number of tokens in ``owner``'s account.\\n\\t */\\n\\tfunction balanceOf(address owner) external view returns (uint256 balance);\\n\\n\\t/**\\n\\t * @dev Returns the owner of the `tokenId` token.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must exist.\\n\\t */\\n\\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n\\t/**\\n\\t * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n\\t * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `from` cannot be the zero address.\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must exist and be owned by `from`.\\n\\t * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Transfers `tokenId` token from `from` to `to`.\\n\\t *\\n\\t * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `from` cannot be the zero address.\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must be owned by `from`.\\n\\t * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n\\t * The approval is cleared when the token is transferred.\\n\\t *\\n\\t * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The caller must own the token or be an approved operator.\\n\\t * - `tokenId` must exist.\\n\\t *\\n\\t * Emits an {Approval} event.\\n\\t */\\n\\tfunction approve(address to, uint256 tokenId) external;\\n\\n\\t/**\\n\\t * @dev Returns the account approved for `tokenId` token.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must exist.\\n\\t */\\n\\tfunction getApproved(uint256 tokenId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (address operator);\\n\\n\\t/**\\n\\t * @dev Approve or remove `operator` as an operator for the caller.\\n\\t * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The `operator` cannot be the caller.\\n\\t *\\n\\t * Emits an {ApprovalForAll} event.\\n\\t */\\n\\tfunction setApprovalForAll(address operator, bool _approved) external;\\n\\n\\t/**\\n\\t * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n\\t *\\n\\t * See {setApprovalForAll}\\n\\t */\\n\\tfunction isApprovedForAll(address owner, address operator)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (bool);\\n\\n\\t/**\\n\\t * @dev Safely transfers `tokenId` token from `from` to `to`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `from` cannot be the zero address.\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must exist and be owned by `from`.\\n\\t * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes calldata data\\n\\t) external;\\n}\\n\",\"keccak256\":\"0x40ec6e28a9bb9cd5ffb08f4c1c4b54b61d8789be10153318a6c9418f25305f5a\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\t/**\\n\\t * @dev Returns the total amount of tokens stored by the contract.\\n\\t */\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n\\t * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n\\t */\\n\\tfunction tokenOfOwnerByIndex(address owner, uint256 index)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256 tokenId);\\n\\n\\t/**\\n\\t * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n\\t * Use along with {totalSupply} to enumerate all tokens.\\n\\t */\\n\\tfunction tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc09ef36867349fb40ae5ab24846feeeb1028b2f21b1f021f45c3a094eb685566\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\t/**\\n\\t * @dev Returns the token collection name.\\n\\t */\\n\\tfunction name() external view returns (string memory);\\n\\n\\t/**\\n\\t * @dev Returns the token collection symbol.\\n\\t */\\n\\tfunction symbol() external view returns (string memory);\\n\\n\\t/**\\n\\t * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n\\t */\\n\\tfunction tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6976b834147423dc07cf721d8bb7eaa1951d5f846e7c66f516959168cdbcb915\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n\\t/**\\n\\t * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n\\t * by `operator` from `from`, this function is called.\\n\\t *\\n\\t * It must return its Solidity selector to confirm the token transfer.\\n\\t * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n\\t *\\n\\t * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n\\t */\\n\\tfunction onERC721Received(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes calldata data\\n\\t) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x50af35c8123738f546a52aaa20d00a751d27337697cde9d2f7fbb991825b1dc7\",\"license\":\"MIT\"},\"contracts/interfaces/IEnglishAuction.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Sale.sol\\\";\\n\\n/// @title IEnglishAuction\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface IEnglishAuction {\\n\\t/// @dev Bids to participate in an auction.\\n\\t///      It is defined as an English Auction.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param sender address of the msg.sender\\n\\t/// @param amount uint256 of the msg.value\\n\\tfunction bid(\\n\\t\\tuint256 tokenId,\\n\\t\\taddress sender,\\n\\t\\tuint256 amount\\n\\t) external returns (Sale.Bidding memory);\\n\\n\\t/// @dev Receives the token you bidded if you are the successful bidder.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction receiveToken(uint256 tokenId) external returns (address, uint256);\\n\\n\\t/// @dev Returns the current price.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction currentPrice(uint256 tokenId) external view returns (uint256);\\n\\n\\tfunction bidding(uint256 tokenId) external view returns (Sale.Bidding memory);\\n}\\n\",\"keccak256\":\"0x10039d8981b4321e404958c819ead418f83b2e50df7fce30fa5847f33ab595e4\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IEventEmitter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Ad.sol\\\";\\n\\n/// @title IEventEmitter - emits events.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface IEventEmitter {\\n\\tfunction emitNewSpace(string memory metadata) external;\\n\\n\\tfunction emitNewPeriod(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tstring memory tokenMetadata,\\n\\t\\tuint256 saleStartTimestamp,\\n\\t\\tuint256 saleEndTimestamp,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\tAd.Pricing pricing,\\n\\t\\tuint256 minPrice\\n\\t) external;\\n\\n\\tfunction emitDeletePeriod(uint256 tokenId) external;\\n\\n\\tfunction emitBuy(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 msgValue,\\n\\t\\taddress msgSender,\\n\\t\\tuint256 blockTimestamp\\n\\t) external;\\n\\n\\tfunction emitBid(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 msgValue,\\n\\t\\taddress msgSender,\\n\\t\\tuint256 blockTimestamp\\n\\t) external;\\n\\n\\tfunction emitBidWithProposal(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 msgValue,\\n\\t\\taddress msgSender,\\n\\t\\tstring memory metadata,\\n\\t\\tuint256 blockTimestamp\\n\\t) external;\\n\\n\\tfunction emitSelectProposal(uint256 tokenId, address successfulBidder)\\n\\t\\texternal;\\n\\n\\tfunction emitReceiveToken(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 price,\\n\\t\\taddress buyer,\\n\\t\\tuint256 blockTimestamp\\n\\t) external;\\n\\n\\tfunction emitOfferPeriod(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\taddress sender,\\n\\t\\tuint256 price\\n\\t) external;\\n\\n\\tfunction emitCancelOffer(uint256 tokenId) external;\\n\\n\\tfunction emitAcceptOffer(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tstring memory tokenMetadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\tuint256 price\\n\\t) external;\\n\\n\\tfunction emitWithdraw(uint256 amount) external;\\n\\n\\tfunction emitPropose(uint256 tokenId, string memory metadata) external;\\n\\n\\tfunction emitAcceptProposal(uint256 tokenId, string memory metadata) external;\\n\\n\\tfunction emitDenyProposal(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory metadata,\\n\\t\\tstring memory reason,\\n\\t\\tbool offensive\\n\\t) external;\\n\\n\\tfunction emitTransferCustom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) external;\\n\\n\\tfunction emitNewMedia(\\n\\t\\taddress proxy,\\n\\t\\taddress mediaEOA,\\n\\t\\tstring memory applicationMetadata,\\n\\t\\tstring memory updatableMetadata,\\n\\t\\tuint256 saltNonce\\n\\t) external;\\n\\n\\tfunction emitUpdateMedia(\\n\\t\\taddress proxy,\\n\\t\\taddress mediaEOA,\\n\\t\\tstring memory accountMetadata\\n\\t) external;\\n\\n\\tfunction emitPaymentFailure(address receiver, uint256 price) external;\\n\\n\\tfunction emitReceived(address receiver, uint256 price) external;\\n}\\n\",\"keccak256\":\"0x7ab04e62e2094f870870364d5df7f8ab7f6a646f74fcead70cef4c4a47b23613\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IMediaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Ad.sol\\\";\\n\\n/// @title MediaRegistry - registers a list of media accounts.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface IMediaRegistry {\\n\\tstruct Account {\\n\\t\\taddress proxy;\\n\\t\\taddress mediaEOA;\\n\\t\\tstring applicationMetadata;\\n\\t\\tstring updatableMetadata;\\n\\t}\\n\\n\\t/// @dev Returns account info.\\n\\t/// @param proxy address of the proxy contract address\\n\\tfunction allAccounts(address proxy)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\taddress,\\n\\t\\t\\taddress,\\n\\t\\t\\tstring memory,\\n\\t\\t\\tstring memory\\n\\t\\t);\\n\\n\\t/// @dev Adds media account.\\n\\t/// @param proxy address of the proxy contract\\n\\t/// @param applicationMetadata string of constant metadata for the defailts of the account\\n\\t/// @param updatableMetadata string of constant metadata for the defailts of the account\\n\\t/// @param mediaEOA address of the media account\\n\\tfunction addMedia(\\n\\t\\taddress proxy,\\n\\t\\tstring memory applicationMetadata,\\n\\t\\tstring memory updatableMetadata,\\n\\t\\taddress mediaEOA\\n\\t) external;\\n\\n\\t/// @dev Updates media account.\\n\\t/// @param metadata string of the account metadata\\n\\t/// @param mediaEOA address of the media account\\n\\tfunction updateMedia(address mediaEOA, string memory metadata) external;\\n\\n\\tfunction updateApplicationMetadata(address proxy, string memory metadata)\\n\\t\\texternal;\\n\\n\\t/// @dev Returns whether the account has created or not.\\n\\t/// @param proxy address of the proxy contract that represents an account.\\n\\tfunction created(address proxy) external view returns (bool);\\n\\n\\t/// @dev Returns the owner of the account.\\n\\t/// @param proxy address of the proxy contract that represents an account.\\n\\tfunction ownerOf(address proxy) external view returns (address);\\n}\\n\",\"keccak256\":\"0xf60005370edf262e5e68ba96deb5fc8b7a0fcb1546ba8c4a6c1793017389c78b\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/INameRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\n/// @title INameRegistry - saves a set of addresses used in the system.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface INameRegistry {\\n\\t/// @dev Sets the address associated with the key name.\\n\\t///      If the address is the contract, not an EOA, it is\\n\\t///      saved as the allowed contract list.\\n\\t/// @param key bytes32 of the key\\n\\t/// @param value address of the value\\n\\tfunction set(bytes32 key, address value) external;\\n\\n\\t/// @dev Gets the address associated with the key name.\\n\\t/// @param key bytes32 of the key\\n\\tfunction get(bytes32 key) external view returns (address);\\n\\n\\t/// @dev Returns whether or not the address is the one that we deployed.\\n\\t/// @param caller address of the msg.sender\\n\\tfunction allowedContracts(address caller) external returns (bool);\\n\\n\\t/// @dev Gets the deployer of NameRegistry.\\n\\tfunction deployer() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa46fe7c81f01262c7daf69b1d7695a6dd507d5a4ab881dab731e3faa992dcb1d\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOfferBid.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Sale.sol\\\";\\n\\n/// @title IOfferBid\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface IOfferBid {\\n\\t/// @dev Offers to buy a period that the sender requests.\\n\\t/// @param spaceMetadata string of the space metadata\\n\\t/// @param displayStartTimestamp uint256 of the start timestamp for the display\\n\\t/// @param displayEndTimestamp uint256 of the end timestamp for the display\\n\\t/// @param sender address of the msg.sender\\n\\t/// @param value uint256 of the msg.value\\n\\tfunction offer(\\n\\t\\tstring memory spaceMetadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp,\\n\\t\\taddress sender,\\n\\t\\tuint256 value\\n\\t) external returns (uint256);\\n\\n\\t/// @dev Cancels an offer.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param sender address of the msg.sender\\n\\tfunction cancel(uint256 tokenId, address sender)\\n\\t\\texternal\\n\\t\\treturns (Sale.Offer memory);\\n\\n\\t/// @dev Accepts an offer by the Media.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction accept(uint256 tokenId) external returns (Sale.Offer memory);\\n\\n\\t/// @dev Returns the current price.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction currentPrice(uint256 tokenId) external view returns (uint256);\\n\\n\\tfunction offered(uint256 tokenId) external view returns (Sale.Offer memory);\\n}\\n\",\"keccak256\":\"0xded2b4f6698d868661056de8beccdddca56e85bdfdd3fade1512edb50dc938fa\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOpenBid.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Sale.sol\\\";\\n\\n/// @title IOpenBid\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface IOpenBid {\\n\\t/// @dev Bids to participate in an auction.\\n\\t///      It is defined as an Open Bid.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param proposal string of the metadata hash\\n\\t/// @param sender address of the msg.sender\\n\\t/// @param amount uint256 of the msg.value\\n\\tfunction bid(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory proposal,\\n\\t\\taddress sender,\\n\\t\\tuint256 amount\\n\\t) external;\\n\\n\\t/// @dev Selects the best proposal bidded with.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param index uint256 of the index number\\n\\tfunction selectProposal(uint256 tokenId, uint256 index)\\n\\t\\texternal\\n\\t\\treturns (Sale.OpenBid memory selected, Sale.OpenBid[] memory nonSelected);\\n\\n\\tfunction biddingList(uint256 tokenId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (Sale.OpenBid[] memory);\\n\\n\\tfunction bidding(uint256 tokenId, uint256 index)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (Sale.OpenBid memory);\\n}\\n\",\"keccak256\":\"0x398ba97f65534ee328d18e7c77925b0f759bf0fd2e92f03011e456c384d397c9\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IProposalReview.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\n/// @title IProposalReview\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ninterface IProposalReview {\\n\\tstruct Denied {\\n\\t\\tstring reason;\\n\\t\\tbool offensive;\\n\\t}\\n\\tstruct Proposal {\\n\\t\\tstring content;\\n\\t\\taddress proposer;\\n\\t}\\n\\n\\t/// @dev Proposes the metadata to the token you bought.\\n\\t///      Users can propose many times as long as it is accepted.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param metadata string of the proposal metadata\\n\\t/// @param msgSender address of the msg.sender\\n\\tfunction propose(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory metadata,\\n\\t\\taddress msgSender\\n\\t) external;\\n\\n\\t/// @dev Accepts the proposal.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction accept(uint256 tokenId) external;\\n\\n\\t/// @dev Denies the submitted proposal, mentioning what is the problem.\\n\\t/// @param tokenId uint256 of the token ID\\n\\t/// @param reason string of the reason why it is rejected\\n\\t/// @param offensive bool if the content would offend somebody\\n\\tfunction denyProposal(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory reason,\\n\\t\\tbool offensive\\n\\t) external;\\n\\n\\t/// @dev Returns the proposer of the token.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction proposer(uint256 tokenId) external view returns (address);\\n\\n\\t/// @dev Returns the proposal content of the token.\\n\\t/// @param tokenId uint256 of the token ID\\n\\tfunction acceptedContent(uint256 tokenId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (string memory);\\n}\\n\",\"keccak256\":\"0xb9ec233e8bc5fe5c3eabe170a946c191d839af7cc8af334d4a7f59cac8c10f68\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Ad.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nlibrary Ad {\\n\\tuint256 private constant _ID_LENGTH = 100000000000000000000000000000000;\\n\\t// 0.RRP     : Recommended Retail Price\\n\\t// 1.DUTCH   : Dutch Auction\\n\\t// 2.ENGLISH : English Acction\\n\\t// 3.OFFER   : Offered by Others\\n\\t// 4.OPEN    : Open Bid by revealing the content\\n\\tenum Pricing {\\n\\t\\tRRP,\\n\\t\\tDUTCH,\\n\\t\\tENGLISH,\\n\\t\\tOFFER,\\n\\t\\tOPEN\\n\\t}\\n\\tstruct Period {\\n\\t\\taddress mediaProxy;\\n\\t\\tstring spaceMetadata;\\n\\t\\tstring tokenMetadata;\\n\\t\\tuint256 saleStartTimestamp;\\n\\t\\tuint256 saleEndTimestamp;\\n\\t\\tuint256 displayStartTimestamp;\\n\\t\\tuint256 displayEndTimestamp;\\n\\t\\tPricing pricing;\\n\\t\\tuint256 minPrice;\\n\\t\\tuint256 startPrice;\\n\\t\\tbool sold;\\n\\t}\\n\\n\\tfunction id(\\n\\t\\tstring memory metadata,\\n\\t\\tuint256 displayStartTimestamp,\\n\\t\\tuint256 displayEndTimestamp\\n\\t) public pure returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\tuint256(\\n\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\tabi.encodePacked(metadata, displayStartTimestamp, displayEndTimestamp)\\n\\t\\t\\t\\t)\\n\\t\\t\\t) % _ID_LENGTH;\\n\\t}\\n}\\n\",\"keccak256\":\"0x47955874c274fa881de288b6af7d7ea36130caf1d64c6e367316278f6e95fd07\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Sale.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"./Ad.sol\\\";\\n\\nlibrary Sale {\\n\\tstruct Bidding {\\n\\t\\tuint256 tokenId;\\n\\t\\taddress bidder;\\n\\t\\tuint256 price;\\n\\t}\\n\\tstruct Offer {\\n\\t\\tstring spaceMetadata;\\n\\t\\tuint256 displayStartTimestamp;\\n\\t\\tuint256 displayEndTimestamp;\\n\\t\\taddress sender;\\n\\t\\tuint256 price;\\n\\t}\\n\\tstruct OpenBid {\\n\\t\\tuint256 tokenId;\\n\\t\\taddress sender;\\n\\t\\tuint256 price;\\n\\t\\tstring content;\\n\\t}\\n\\n\\tfunction startPrice(Ad.Period memory period) public pure returns (uint256) {\\n\\t\\tif (period.pricing == Ad.Pricing.RRP) {\\n\\t\\t\\treturn period.minPrice;\\n\\t\\t} else if (period.pricing == Ad.Pricing.DUTCH) {\\n\\t\\t\\treturn period.minPrice * 10;\\n\\t\\t} else if (period.pricing == Ad.Pricing.ENGLISH) {\\n\\t\\t\\treturn period.minPrice;\\n\\t\\t} else if (period.pricing == Ad.Pricing.OFFER) {\\n\\t\\t\\treturn period.minPrice;\\n\\t\\t} else if (period.pricing == Ad.Pricing.OPEN) {\\n\\t\\t\\treturn period.minPrice;\\n\\t\\t} else {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x19a427a8ac429adf4fbe2f2a87c4a95e20c794fb99eaa0baa1ae69257541d9c2\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600c556143c7806100256000396000f3fe60806040526004361061022e5760003560e01c80630106d8eb1461023357806301ffc9a71461025e57806306fdde031461028e578063081812fc146102b0578063095ea7b3146102d057806313c1f278146102f2578063179bcff71461031257806318160ddd146103325780631daf7ff9146103515780632231c1eb1461036457806323b872dd1461037957806327b7a2f5146103995780632bc4bc68146103b75780632f745c59146103d757806332b18f6d146103f757806337df00c9146104175780633ccfd60b1461043757806342842e0e1461044c578063430bf08a1461046c578063444115f614610481578063454a2ab3146104a15780634b455a51146104b45780634f6ccce7146104d457806360c5cc3a146104f45780636352211e146105145780636a58767e1461053457806370a08231146105495780637ccacd49146105695780637cf175fb1461057c578063899c9989146105915780638da5cb5b146105b15780638f6059d6146105c657806393525d39146105db57806395d89b41146105fb578063a22cb46514610610578063b69ef8a814610630578063b88d4fde14610643578063c531c23614610663578063c87b56dd14610683578063c9cd71b5146106a3578063d4f6b5ec146106b8578063d6d0faee146106d8578063d8680069146106f8578063d96a094a1461070b578063e2f5fc781461071e578063e6e268f414610733578063e985e9c514610748578063ef706adf14610768578063f072629114610788575b600080fd5b34801561023f57600080fd5b5061024861079d565b60405161025591906134b5565b60405180910390f35b34801561026a57600080fd5b5061027e6102793660046134df565b61084b565b6040519015158152602001610255565b34801561029a57600080fd5b506102a3610882565b604051610255919061355b565b3480156102bc57600080fd5b506102486102cb36600461356e565b610914565b3480156102dc57600080fd5b506102f06102eb36600461359c565b6109a1565b005b3480156102fe57600080fd5b506102f061030d3660046136d0565b610ab2565b34801561031e57600080fd5b506102f061032d366004613726565b610bbb565b34801561033e57600080fd5b50600a545b604051908152602001610255565b6102f061035f366004613775565b610cc1565b34801561037057600080fd5b50610248610df8565b34801561038557600080fd5b506102f06103943660046137c2565b610e29565b3480156103a557600080fd5b50600d546001600160a01b0316610248565b3480156103c357600080fd5b506102f06103d2366004613803565b610e6b565b3480156103e357600080fd5b506103436103f236600461359c565b610f6e565b34801561040357600080fd5b506102f0610412366004613837565b611004565b34801561042357600080fd5b506102f061043236600461356e565b6111a5565b34801561044357600080fd5b506102f061126d565b34801561045857600080fd5b506102f06104673660046137c2565b61135d565b34801561047857600080fd5b50610248611368565b34801561048d57600080fd5b506102f061049c366004613859565b611397565b6102f06104af36600461356e565b611554565b3480156104c057600080fd5b506102f06104cf36600461356e565b6116d4565b3480156104e057600080fd5b506103436104ef36600461356e565b61182a565b34801561050057600080fd5b506102f061050f36600461356e565b6118bd565b34801561052057600080fd5b5061024861052f36600461356e565b611a53565b34801561054057600080fd5b50610248611aa0565b34801561055557600080fd5b50610343610564366004613889565b611ad7565b6102f0610577366004613859565b611b5e565b34801561058857600080fd5b50610248611c80565b34801561059d57600080fd5b506102f06105ac3660046138a6565b611cb2565b3480156105bd57600080fd5b50610248611dea565b3480156105d257600080fd5b50610248611e34565b3480156105e757600080fd5b506102f06105f636600461356e565b611e6a565b34801561060757600080fd5b506102a3611f88565b34801561061c57600080fd5b506102f061062b366004613948565b611f97565b34801561063c57600080fd5b5047610343565b34801561064f57600080fd5b506102f061065e36600461397d565b612058565b34801561066f57600080fd5b5061034361067e366004613775565b612090565b34801561068f57600080fd5b506102a361069e36600461356e565b612117565b3480156106af57600080fd5b50610248612273565b3480156106c457600080fd5b506102f06106d3366004613859565b6122a3565b3480156106e457600080fd5b506102f06106f33660046139fc565b61230a565b6102f061070636600461356e565b6123d5565b6102f061071936600461356e565b61253c565b34801561072a57600080fd5b50610248612615565b34801561073f57600080fd5b5061034361264d565b34801561075457600080fd5b5061027e610763366004613aab565b61265d565b34801561077457600080fd5b506102f061078336600461356e565b61268b565b34801561079457600080fd5b506102486127f1565b600d546040516d22b733b634b9b420bab1ba34b7b760911b60208201526000916001600160a01b031690638eaa6ac090602e015b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161080591815260200190565b602060405180830381865afa158015610822573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108469190613ae4565b905090565b60006001600160e01b031982166380ac58cd60e01b148061087c57506001600160e01b03198216635b5e139f60e01b145b92915050565b60606000805461089190613b01565b80601f01602080910402602001604051908101604052809291908181526020018280546108bd90613b01565b801561090a5780601f106108df5761010080835404028352916020019161090a565b820191906000526020600020905b8154815290600101906020018083116108ed57829003601f168201915b5050505050905090565b600061091f82612827565b6109855760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006109ac82611a53565b9050806001600160a01b0316836001600160a01b03161415610a1a5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161097c565b336001600160a01b0382161480610a365750610a36813361265d565b610aa35760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b606482015260840161097c565b610aad8383612844565b505050565b33610abb6128b2565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401610ae691906134b5565b602060405180830381865afa158015610b03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b279190613ae4565b6001600160a01b031614610b4d5760405162461bcd60e51b815260040161097c90613b3c565b610b556128bc565b6001600160a01b03166313c1f2788484846040518463ffffffff1660e01b8152600401610b8493929190613b5b565b600060405180830381600087803b158015610b9e57600080fd5b505af1158015610bb2573d6000803e3d6000fd5b50505050505050565b33610bc46128b2565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401610bef91906134b5565b602060405180830381865afa158015610c0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c309190613ae4565b6001600160a01b031614610c565760405162461bcd60e51b815260040161097c90613b3c565b610c5e6128b2565b6001600160a01b031663179bcff783836040518363ffffffff1660e01b8152600401610c8b929190613b86565b600060405180830381600087803b158015610ca557600080fd5b505af1158015610cb9573d6000803e3d6000fd5b505050505050565b33610cca6128b2565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401610cf591906134b5565b602060405180830381865afa158015610d12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d369190613ae4565b6001600160a01b03161415610d5d5760405162461bcd60e51b815260040161097c90613baa565b610d656128c6565b6001600160a01b031663171a133d84848433346040518663ffffffff1660e01b8152600401610d98959493929190613bc9565b6020604051808303816000875af1158015610db7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddb9190613c09565b5034600e6000828254610dee9190613c38565b9091555050505050565b600d546040516613dc195b909a5960ca1b60208201526000916001600160a01b031690638eaa6ac0906027016107d1565b610e348383836128d0565b610e3c612901565b6001600160a01b031663465bcf058484846040518463ffffffff1660e01b8152600401610b8493929190613c50565b33610e746128b2565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401610e9f91906134b5565b602060405180830381865afa158015610ebc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee09190613ae4565b6001600160a01b031614610f065760405162461bcd60e51b815260040161097c90613b3c565b610f0e61290b565b6001600160a01b031663b8926f2c826040518263ffffffff1660e01b8152600401610f39919061355b565b600060405180830381600087803b158015610f5357600080fd5b505af1158015610f67573d6000803e3d6000fd5b5050505050565b6000610f7983611ad7565b8210610fdb5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b606482015260840161097c565b506001600160a01b03919091166000908152600860209081526040808320938352929052205490565b3361100d6128b2565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b815260040161103891906134b5565b602060405180830381865afa158015611055573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110799190613ae4565b6001600160a01b03161461109f5760405162461bcd60e51b815260040161097c90613b3c565b6002600c5414156110c25760405162461bcd60e51b815260040161097c90613c74565b6002600c556000806110d2612915565b6040516332b18f6d60e01b815260048101869052602481018590526001600160a01b0391909116906332b18f6d906044016000604051808303816000875af1158015611122573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261114a9190810190613d7e565b9150915061115c82602001518561291f565b8160400151600e60008282546111729190613e64565b909155505060408201516111919061118c90600a90613e7b565b612961565b61119a81612972565b50506001600c555050565b80336111af6129ec565b6001600160a01b031663cc889b0b836040518263ffffffff1660e01b81526004016111dc91815260200190565b606060405180830381865afa1580156111f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121d9190613e9d565b602001516001600160a01b03161461125f5760405162461bcd60e51b815260206004820152600560248201526425a218991b60d91b604482015260640161097c565b61126982336129f6565b5050565b336112766128b2565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016112a191906134b5565b602060405180830381865afa1580156112be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e29190613ae4565b6001600160a01b0316146113085760405162461bcd60e51b815260040161097c90613b3c565b600061131261264d565b905060006113203383612aa2565b9050801561126957611330612901565b6001600160a01b031663279862cb836040518263ffffffff1660e01b8152600401610c8b91815260200190565b610e34838383612b76565b600d546040516415985d5b1d60da1b60208201526000916001600160a01b031690638eaa6ac0906025016107d1565b336113a06128b2565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016113cb91906134b5565b602060405180830381865afa1580156113e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140c9190613ae4565b6001600160a01b0316146114325760405162461bcd60e51b815260040161097c90613b3c565b600061143c6128c6565b6001600160a01b03166319b05f49846040518263ffffffff1660e01b815260040161146991815260200190565b6000604051808303816000875af1158015611488573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114b09190810190613efe565b90506114ba61290b565b6001600160a01b031663a9ad60f38484846040518463ffffffff1660e01b81526004016114e993929190613fa1565b600060405180830381600087803b15801561150357600080fd5b505af1158015611517573d6000803e3d6000fd5b5050505061152a81606001518484612b91565b61153e600a826080015161118c9190613e7b565b8060800151600e6000828254610dee9190613e64565b3361155d6128b2565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b815260040161158891906134b5565b602060405180830381865afa1580156115a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c99190613ae4565b6001600160a01b031614156115f05760405162461bcd60e51b815260040161097c90613baa565b6002600c5414156116135760405162461bcd60e51b815260040161097c90613c74565b6002600c55600061162261290b565b604051637ee8065f60e01b8152600481018490523360248201523460448201526001600160a01b039190911690637ee8065f906064016060604051808303816000875af1158015611677573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169b9190613e9d565b90506116a681612bf9565b60408101516116b59034613e64565b600e60008282546116c69190613c38565b90915550506001600c555050565b336116dd6128b2565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b815260040161170891906134b5565b602060405180830381865afa158015611725573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117499190613ae4565b6001600160a01b03161461176f5760405162461bcd60e51b815260040161097c90613b3c565b3061177982611a53565b6001600160a01b0316146117b75760405162461bcd60e51b81526020600482015260056024820152644b4431323160d81b604482015260640161097c565b6117bf61290b565b6001600160a01b0316634b455a51826040518263ffffffff1660e01b81526004016117ec91815260200190565b600060405180830381600087803b15801561180657600080fd5b505af115801561181a573d6000803e3d6000fd5b5050505061182781612c0b565b50565b6000611835600a5490565b82106118985760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161097c565b600a82815481106118ab576118ab614013565b90600052602060002001549050919050565b336118c66128b2565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016118f191906134b5565b602060405180830381865afa15801561190e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119329190613ae4565b6001600160a01b0316146119585760405162461bcd60e51b815260040161097c90613b3c565b6119606128bc565b6001600160a01b031663897615e6826040518263ffffffff1660e01b815260040161198d91815260200190565b602060405180830381865afa1580156119aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ce9190613ae4565b6001600160a01b03166119e082611a53565b6001600160a01b031614611a1e5760405162461bcd60e51b81526020600482015260056024820152644b4431333160d81b604482015260640161097c565b611a266128bc565b6001600160a01b03166319b05f49826040518263ffffffff1660e01b8152600401610f3991815260200190565b6000818152600460205260408120546001600160a01b03168061087c5760405162461bcd60e51b815260206004820152600560248201526412d10c4c4d60da1b604482015260640161097c565b600d546040516c4d65646961526567697374727960981b60208201526000916001600160a01b031690638eaa6ac090602d016107d1565b60006001600160a01b038216611b425760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161097c565b506001600160a01b031660009081526005602052604090205490565b33611b676128b2565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401611b9291906134b5565b602060405180830381865afa158015611baf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd39190613ae4565b6001600160a01b03161415611bfa5760405162461bcd60e51b815260040161097c90613baa565b611c0261290b565b6001600160a01b0316636c15b2bf838333346040518563ffffffff1660e01b8152600401611c339493929190614029565b600060405180830381600087803b158015611c4d57600080fd5b505af1158015611c61573d6000803e3d6000fd5b5050505034600e6000828254611c779190613c38565b90915550505050565b600d546040516713d999995c909a5960c21b60208201526000916001600160a01b031690638eaa6ac0906028016107d1565b33611cbb6128b2565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401611ce691906134b5565b602060405180830381865afa158015611d03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d279190613ae4565b6001600160a01b031614611d4d5760405162461bcd60e51b815260040161097c90613b3c565b6000611d5761290b565b6001600160a01b031663e6851b98308a8a8a8a8a8a8a6040518963ffffffff1660e01b8152600401611d9098979695949392919061405e565b6020604051808303816000875af1158015611daf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd39190613c09565b9050611de0308289612b91565b5050505050505050565b600d5460408051631abe729160e31b815290516000926001600160a01b03169163d5f394889160048083019260209291908290030181865afa158015610822573d6000803e3d6000fd5b600d546040516b4d65646961466163746f727960a01b60208201526000916001600160a01b031690638eaa6ac090602c016107d1565b33611e736128b2565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b8152600401611e9e91906134b5565b602060405180830381865afa158015611ebb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611edf9190613ae4565b6001600160a01b031614611f055760405162461bcd60e51b815260040161097c90613b3c565b61182781611f116129ec565b6001600160a01b031663cc889b0b846040518263ffffffff1660e01b8152600401611f3e91815260200190565b606060405180830381865afa158015611f5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7f9190613e9d565b602001516129f6565b60606001805461089190613b01565b6001600160a01b038216331415611fec5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b604482015260640161097c565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6120623383612c75565b61207e5760405162461bcd60e51b815260040161097c906140e0565b61208a84848484612d37565b50505050565b6040516303fb4aab60e41b8152600090734a4274681C57B4eBc4B9AebEf1C292c650956E8F90633fb4aab0906120ce90879087908790600401614131565b602060405180830381865af41580156120eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061210f9190613c09565b949350505050565b606061212282612827565b6121865760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161097c565b60006002805461219590613b01565b90501161223857600082815260036020526040902080546121b590613b01565b80601f01602080910402602001604051908101604052809291908181526020018280546121e190613b01565b801561222e5780601f106122035761010080835404028352916020019161222e565b820191906000526020600020905b81548152906001019060200180831161221157829003601f168201915b505050505061087c565b60026003600084815260200190815260200160002060405160200161225e9291906141f0565b60405160208183030381529060405292915050565b600d54604051651059141bdbdb60d21b60208201526000916001600160a01b031690638eaa6ac0906026016107d1565b336122ad83611a53565b6001600160a01b0316146122d35760405162461bcd60e51b815260040161097c90613b3c565b6122db6128bc565b6001600160a01b031663fb772f4b8383336040518463ffffffff1660e01b8152600401610c8b93929190614205565b600d546001600160a01b03161561234b5760405162461bcd60e51b8152602060048201526005602482015264041523030360dc1b604482015260640161097c565b845161235e90600090602088019061341c565b50846040516020016123709190614236565b6040516020818303038152906040526001908051906020019061239492919061341c565b5083516123a890600290602087019061341c565b506123b582600085612b91565b600d80546001600160a01b0319166001600160a01b038316179055610f67565b336123de6128b2565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b815260040161240991906134b5565b602060405180830381865afa158015612426573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244a9190613ae4565b6001600160a01b031614156124715760405162461bcd60e51b815260040161097c90613baa565b61247961290b565b6040516239a3eb60e31b8152600481018390523460248201526001600160a01b0391909116906301cd1f58906044015b600060405180830381600087803b1580156124c357600080fd5b505af11580156124d7573d6000803e3d6000fd5b505050506124e5338261291f565b6124f361118c600a34613e7b565b6124fb612901565b604051635dd995b560e01b8152600481018390523460248201523360448201524260648201526001600160a01b039190911690635dd995b590608401610f39565b336125456128b2565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b815260040161257091906134b5565b602060405180830381865afa15801561258d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b19190613ae4565b6001600160a01b031614156125d85760405162461bcd60e51b815260040161097c90613baa565b6125e061290b565b604051639d23b6af60e01b8152600481018390523460248201526001600160a01b039190911690639d23b6af906044016124a9565b600d546040516d50726f706f73616c52657669657760901b60208201526000916001600160a01b031690638eaa6ac090602e016107d1565b6000600e54476108469190613e64565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b336126946128b2565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016126bf91906134b5565b602060405180830381865afa1580156126dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127009190613ae4565b6001600160a01b031614156127275760405162461bcd60e51b815260040161097c90613baa565b6002600c54141561274a5760405162461bcd60e51b815260040161097c90613c74565b6002600c5560006127596128c6565b6040516315f5a0b160e21b8152600481018490523360248201526001600160a01b0391909116906357d682c4906044016000604051808303816000875af11580156127a8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127d09190810190613efe565b90506127db81612d6a565b8060800151600e60008282546116c69190613e64565b600d546040516b22bb32b73a22b6b4ba3a32b960a11b60208201526000916001600160a01b031690638eaa6ac090602c016107d1565b6000908152600460205260409020546001600160a01b0316151590565b600081815260066020526040902080546001600160a01b0319166001600160a01b038416908117909155819061287982611a53565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610846611aa0565b6000610846612615565b6000610846611c80565b6128da3382612c75565b6128f65760405162461bcd60e51b815260040161097c906140e0565b610aad838383612d7c565b60006108466127f1565b6000610846612273565b6000610846610df8565b61292a308383612d7c565b612932612901565b6001600160a01b031663465bcf053084846040518463ffffffff1660e01b8152600401610c8b93929190613c50565b61126961296c611368565b82612aa2565b60005b815181101561126957600082828151811061299257612992614013565b6020026020010151905080604001516000146129d9578060400151600e60008282546129be9190613e64565b925050819055506129d781602001518260400151612aa2565b505b50806129e481614266565b915050612975565b600061084661079d565b6000612a0061290b565b6001600160a01b031663f86fde57846040518263ffffffff1660e01b8152600401612a2d91815260200190565b60408051808303816000875af1158015612a4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6f9190614281565b91505080600e6000828254612a849190613e64565b90915550612a949050828461291f565b610aad61118c600a83613e7b565b6000826001600160a01b03168261271090604051600060405180830381858888f193505050503d8060008114612af4576040519150601f19603f3d011682016040523d82523d6000602084013e612af9565b606091505b5050809150508061087c57612b0c612901565b60405163ec720b9b60e01b81526001600160a01b03858116600483015260248201859052919091169063ec720b9b90604401600060405180830381600087803b158015612b5857600080fd5b505af1158015612b6c573d6000803e3d6000fd5b5050505092915050565b610aad83838360405180602001604052806000815250612058565b612b9b8383612f15565b60008281526003602090815260409091208251612bba9284019061341c565b508115610aad57612bc9612901565b6001600160a01b031663465bcf05600085856040518463ffffffff1660e01b8152600401610b8493929190613c50565b61126981602001518260400151612aa2565b612c1481613041565b604080516020808201808452600080845285815260039092529290209051612c3c929061341c565b50612c45612901565b6001600160a01b031663465bcf05306000846040518463ffffffff1660e01b8152600401610f3993929190613c50565b6000612c8082612827565b612ce15760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161097c565b6000612cec83611a53565b9050806001600160a01b0316846001600160a01b03161480612d275750836001600160a01b0316612d1c84610914565b6001600160a01b0316145b8061210f575061210f818561265d565b612d42848484612d7c565b612d4e848484846130d6565b61208a5760405162461bcd60e51b815260040161097c906142af565b61126981606001518260800151612aa2565b826001600160a01b0316612d8f82611a53565b6001600160a01b031614612df75760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161097c565b6001600160a01b038216612e595760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161097c565b612e648383836131d4565b612e6f600082612844565b6001600160a01b0383166000908152600560205260408120805460019290612e98908490613e64565b90915550506001600160a01b0382166000908152600560205260408120805460019290612ec6908490613c38565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b03868116918217909255915184939187169160008051602061437283398151915291a4505050565b6001600160a01b038216612f6b5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161097c565b612f7481612827565b15612fc05760405162461bcd60e51b815260206004820152601c60248201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b604482015260640161097c565b612fcc600083836131d4565b6001600160a01b0382166000908152600560205260408120805460019290612ff5908490613c38565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839290600080516020614372833981519152908290a45050565b600061304c82611a53565b905061305a816000846131d4565b613065600083612844565b6001600160a01b038116600090815260056020526040812080546001929061308e908490613e64565b909155505060008281526004602052604080822080546001600160a01b0319169055518391906001600160a01b03841690600080516020614372833981519152908390a45050565b60006001600160a01b0384163b156131c957604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061311a903390899088908890600401614301565b6020604051808303816000875af1925050508015613155575060408051601f3d908101601f191682019092526131529181019061433e565b60015b6131af573d808015613183576040519150601f19603f3d011682016040523d82523d6000602084013e613188565b606091505b5080516131a75760405162461bcd60e51b815260040161097c906142af565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061210f565b506001949350505050565b6001600160a01b03831661322f5761322a81600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b613252565b816001600160a01b0316836001600160a01b03161461325257613252838261328c565b6001600160a01b03821661326957610aad81613329565b826001600160a01b0316826001600160a01b031614610aad57610aad82826133d8565b6000600161329984611ad7565b6132a39190613e64565b6000838152600960205260409020549091508082146132f6576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a5460009061333b90600190613e64565b6000838152600b6020526040812054600a805493945090928490811061336357613363614013565b9060005260206000200154905080600a838154811061338457613384614013565b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a8054806133bc576133bc61435b565b6001900381819060005260206000200160009055905550505050565b60006133e383611ad7565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b82805461342890613b01565b90600052602060002090601f01602090048101928261344a5760008555613490565b82601f1061346357805160ff1916838001178555613490565b82800160010185558215613490579182015b82811115613490578251825591602001919060010190613475565b5061349c9291506134a0565b5090565b5b8082111561349c57600081556001016134a1565b6001600160a01b0391909116815260200190565b6001600160e01b03198116811461182757600080fd5b6000602082840312156134f157600080fd5b81356134fc816134c9565b9392505050565b60005b8381101561351e578181015183820152602001613506565b8381111561208a5750506000910152565b60008151808452613547816020860160208601613503565b601f01601f19169290920160200192915050565b6020815260006134fc602083018461352f565b60006020828403121561358057600080fd5b5035919050565b6001600160a01b038116811461182757600080fd5b600080604083850312156135af57600080fd5b82356135ba81613587565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715613600576136006135c8565b60405290565b604051601f8201601f191681016001600160401b038111828210171561362e5761362e6135c8565b604052919050565b60006001600160401b0382111561364f5761364f6135c8565b50601f01601f191660200190565b600061367061366b84613636565b613606565b905082815283838301111561368457600080fd5b828260208301376000602084830101529392505050565b600082601f8301126136ac57600080fd5b6134fc8383356020850161365d565b803580151581146136cb57600080fd5b919050565b6000806000606084860312156136e557600080fd5b8335925060208401356001600160401b0381111561370257600080fd5b61370e8682870161369b565b92505061371d604085016136bb565b90509250925092565b6000806040838503121561373957600080fd5b823561374481613587565b915060208301356001600160401b0381111561375f57600080fd5b61376b8582860161369b565b9150509250929050565b60008060006060848603121561378a57600080fd5b83356001600160401b038111156137a057600080fd5b6137ac8682870161369b565b9660208601359650604090950135949350505050565b6000806000606084860312156137d757600080fd5b83356137e281613587565b925060208401356137f281613587565b929592945050506040919091013590565b60006020828403121561381557600080fd5b81356001600160401b0381111561382b57600080fd5b61210f8482850161369b565b6000806040838503121561384a57600080fd5b50508035926020909101359150565b6000806040838503121561386c57600080fd5b8235915060208301356001600160401b0381111561375f57600080fd5b60006020828403121561389b57600080fd5b81356134fc81613587565b600080600080600080600060e0888a0312156138c157600080fd5b87356001600160401b03808211156138d857600080fd5b6138e48b838c0161369b565b985060208a01359150808211156138fa57600080fd5b506139078a828b0161369b565b96505060408801359450606088013593506080880135925060a08801356005811061393157600080fd5b8092505060c0880135905092959891949750929550565b6000806040838503121561395b57600080fd5b823561396681613587565b9150613974602084016136bb565b90509250929050565b6000806000806080858703121561399357600080fd5b843561399e81613587565b935060208501356139ae81613587565b92506040850135915060608501356001600160401b038111156139d057600080fd5b8501601f810187136139e157600080fd5b6139f08782356020840161365d565b91505092959194509250565b600080600080600060a08688031215613a1457600080fd5b85356001600160401b0380821115613a2b57600080fd5b613a3789838a0161369b565b96506020880135915080821115613a4d57600080fd5b613a5989838a0161369b565b95506040880135915080821115613a6f57600080fd5b50613a7c8882890161369b565b9350506060860135613a8d81613587565b91506080860135613a9d81613587565b809150509295509295909350565b60008060408385031215613abe57600080fd5b8235613ac981613587565b91506020830135613ad981613587565b809150509250929050565b600060208284031215613af657600080fd5b81516134fc81613587565b600181811c90821680613b1557607f821691505b60208210811415613b3657634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526005908201526425a218189960d91b604082015260600190565b838152606060208201526000613b74606083018561352f565b90508215156040830152949350505050565b6001600160a01b038316815260406020820181905260009061210f9083018461352f565b60208082526005908201526412d10c0c4d60da1b604082015260600190565b60a081526000613bdc60a083018861352f565b60208301969096525060408101939093526001600160a01b03919091166060830152608090910152919050565b600060208284031215613c1b57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115613c4b57613c4b613c22565b500190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600082601f830112613cbc57600080fd5b8151613cca61366b82613636565b818152846020838601011115613cdf57600080fd5b61210f826020830160208701613503565b600060808284031215613d0257600080fd5b604051608081016001600160401b038082118383101715613d2557613d256135c8565b816040528293508451835260208501519150613d4082613587565b816020840152604085015160408401526060850151915080821115613d6457600080fd5b50613d7185828601613cab565b6060830152505092915050565b60008060408385031215613d9157600080fd5b82516001600160401b0380821115613da857600080fd5b613db486838701613cf0565b9350602091508185015181811115613dcb57600080fd5b8501601f81018713613ddc57600080fd5b805182811115613dee57613dee6135c8565b8060051b613dfd858201613606565b918252828101850191858101908a841115613e1757600080fd5b86850192505b83831015613e5357825186811115613e355760008081fd5b613e438c8983890101613cf0565b8352509186019190860190613e1d565b809750505050505050509250929050565b600082821015613e7657613e76613c22565b500390565b600082613e9857634e487b7160e01b600052601260045260246000fd5b500490565b600060608284031215613eaf57600080fd5b604051606081016001600160401b0381118282101715613ed157613ed16135c8565b604052825181526020830151613ee681613587565b60208201526040928301519281019290925250919050565b600060208284031215613f1057600080fd5b81516001600160401b0380821115613f2757600080fd5b9083019060a08286031215613f3b57600080fd5b613f436135de565b825182811115613f5257600080fd5b613f5e87828601613cab565b825250602083015160208201526040830151604082015260608301519150613f8582613587565b8160608201526080830151608082015280935050505092915050565b838152606060208201526000613fba606083018561352f565b8281036040840152835160a08252613fd560a083018261352f565b60208681015190840152604080870151908401526060808701516001600160a01b031690840152608095860151959092019490945295945050505050565b634e487b7160e01b600052603260045260246000fd5b848152608060208201526000614042608083018661352f565b6001600160a01b03949094166040830152506060015292915050565b6001600160a01b0389168152610100602082018190526000906140838382018b61352f565b90508281036040840152614097818a61352f565b9150508660608301528560808301528460a0830152600584106140ca57634e487b7160e01b600052602160045260246000fd5b60c082019390935260e001529695505050505050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b606081526000614144606083018661352f565b60208301949094525060400152919050565b8054600090600181811c908083168061417057607f831692505b602080841082141561419257634e487b7160e01b600052602260045260246000fd5b8180156141a657600181146141b7576141e4565b60ff198616895284890196506141e4565b60008881526020902060005b868110156141dc5781548b8201529085019083016141c3565b505084890196505b50505050505092915050565b600061210f6141ff8386614156565b84614156565b83815260606020820152600061421e606083018561352f565b905060018060a01b0383166040830152949350505050565b674b616c6569646f5f60c01b815260008251614259816008850160208701613503565b9190910160080192915050565b600060001982141561427a5761427a613c22565b5060010190565b6000806040838503121561429457600080fd5b825161429f81613587565b6020939093015192949293505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906143349083018461352f565b9695505050505050565b60006020828403121561435057600080fd5b81516134fc816134c9565b634e487b7160e01b600052603160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212207106d206c4e412918c2040cc9bc2a23f69b1f6009b8fbb7ef4ccf29d86e598c364736f6c634300080a0033",
  "deployedBytecode": "$a79fa16630ef50be54c6520a39abca49df$__90633fb4aab0906120ce90879087908790600401614131565b602060405180830381865af41580156120eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061210f9190613c09565b949350505050565b606061212282612827565b6121865760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161097c565b60006002805461219590613b01565b90501161223857600082815260036020526040902080546121b590613b01565b80601f01602080910402602001604051908101604052809291908181526020018280546121e190613b01565b801561222e5780601f106122035761010080835404028352916020019161222e565b820191906000526020600020905b81548152906001019060200180831161221157829003601f168201915b505050505061087c565b60026003600084815260200190815260200160002060405160200161225e9291906141f0565b60405160208183030381529060405292915050565b600d54604051651059141bdbdb60d21b60208201526000916001600160a01b031690638eaa6ac0906026016107d1565b336122ad83611a53565b6001600160a01b0316146122d35760405162461bcd60e51b815260040161097c90613b3c565b6122db6128bc565b6001600160a01b031663fb772f4b8383336040518463ffffffff1660e01b8152600401610c8b93929190614205565b600d546001600160a01b03161561234b5760405162461bcd60e51b8152602060048201526005602482015264041523030360dc1b604482015260640161097c565b845161235e90600090602088019061341c565b50846040516020016123709190614236565b6040516020818303038152906040526001908051906020019061239492919061341c565b5083516123a890600290602087019061341c565b506123b582600085612b91565b600d80546001600160a01b0319166001600160a01b038316179055610f67565b336123de6128b2565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b815260040161240991906134b5565b602060405180830381865afa158015612426573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244a9190613ae4565b6001600160a01b031614156124715760405162461bcd60e51b815260040161097c90613baa565b61247961290b565b6040516239a3eb60e31b8152600481018390523460248201526001600160a01b0391909116906301cd1f58906044015b600060405180830381600087803b1580156124c357600080fd5b505af11580156124d7573d6000803e3d6000fd5b505050506124e5338261291f565b6124f361118c600a34613e7b565b6124fb612901565b604051635dd995b560e01b8152600481018390523460248201523360448201524260648201526001600160a01b039190911690635dd995b590608401610f39565b336125456128b2565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b815260040161257091906134b5565b602060405180830381865afa15801561258d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b19190613ae4565b6001600160a01b031614156125d85760405162461bcd60e51b815260040161097c90613baa565b6125e061290b565b604051639d23b6af60e01b8152600481018390523460248201526001600160a01b039190911690639d23b6af906044016124a9565b600d546040516d50726f706f73616c52657669657760901b60208201526000916001600160a01b031690638eaa6ac090602e016107d1565b6000600e54476108469190613e64565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b336126946128b2565b6001600160a01b03166314afd79e306040518263ffffffff1660e01b81526004016126bf91906134b5565b602060405180830381865afa1580156126dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127009190613ae4565b6001600160a01b031614156127275760405162461bcd60e51b815260040161097c90613baa565b6002600c54141561274a5760405162461bcd60e51b815260040161097c90613c74565b6002600c5560006127596128c6565b6040516315f5a0b160e21b8152600481018490523360248201526001600160a01b0391909116906357d682c4906044016000604051808303816000875af11580156127a8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127d09190810190613efe565b90506127db81612d6a565b8060800151600e60008282546116c69190613e64565b600d546040516b22bb32b73a22b6b4ba3a32b960a11b60208201526000916001600160a01b031690638eaa6ac090602c016107d1565b6000908152600460205260409020546001600160a01b0316151590565b600081815260066020526040902080546001600160a01b0319166001600160a01b038416908117909155819061287982611a53565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610846611aa0565b6000610846612615565b6000610846611c80565b6128da3382612c75565b6128f65760405162461bcd60e51b815260040161097c906140e0565b610aad838383612d7c565b60006108466127f1565b6000610846612273565b6000610846610df8565b61292a308383612d7c565b612932612901565b6001600160a01b031663465bcf053084846040518463ffffffff1660e01b8152600401610c8b93929190613c50565b61126961296c611368565b82612aa2565b60005b815181101561126957600082828151811061299257612992614013565b6020026020010151905080604001516000146129d9578060400151600e60008282546129be9190613e64565b925050819055506129d781602001518260400151612aa2565b505b50806129e481614266565b915050612975565b600061084661079d565b6000612a0061290b565b6001600160a01b031663f86fde57846040518263ffffffff1660e01b8152600401612a2d91815260200190565b60408051808303816000875af1158015612a4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6f9190614281565b91505080600e6000828254612a849190613e64565b90915550612a949050828461291f565b610aad61118c600a83613e7b565b6000826001600160a01b03168261271090604051600060405180830381858888f193505050503d8060008114612af4576040519150601f19603f3d011682016040523d82523d6000602084013e612af9565b606091505b5050809150508061087c57612b0c612901565b60405163ec720b9b60e01b81526001600160a01b03858116600483015260248201859052919091169063ec720b9b90604401600060405180830381600087803b158015612b5857600080fd5b505af1158015612b6c573d6000803e3d6000fd5b5050505092915050565b610aad83838360405180602001604052806000815250612058565b612b9b8383612f15565b60008281526003602090815260409091208251612bba9284019061341c565b508115610aad57612bc9612901565b6001600160a01b031663465bcf05600085856040518463ffffffff1660e01b8152600401610b8493929190613c50565b61126981602001518260400151612aa2565b612c1481613041565b604080516020808201808452600080845285815260039092529290209051612c3c929061341c565b50612c45612901565b6001600160a01b031663465bcf05306000846040518463ffffffff1660e01b8152600401610f3993929190613c50565b6000612c8082612827565b612ce15760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161097c565b6000612cec83611a53565b9050806001600160a01b0316846001600160a01b03161480612d275750836001600160a01b0316612d1c84610914565b6001600160a01b0316145b8061210f575061210f818561265d565b612d42848484612d7c565b612d4e848484846130d6565b61208a5760405162461bcd60e51b815260040161097c906142af565b61126981606001518260800151612aa2565b826001600160a01b0316612d8f82611a53565b6001600160a01b031614612df75760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161097c565b6001600160a01b038216612e595760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161097c565b612e648383836131d4565b612e6f600082612844565b6001600160a01b0383166000908152600560205260408120805460019290612e98908490613e64565b90915550506001600160a01b0382166000908152600560205260408120805460019290612ec6908490613c38565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b03868116918217909255915184939187169160008051602061437283398151915291a4505050565b6001600160a01b038216612f6b5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161097c565b612f7481612827565b15612fc05760405162461bcd60e51b815260206004820152601c60248201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b604482015260640161097c565b612fcc600083836131d4565b6001600160a01b0382166000908152600560205260408120805460019290612ff5908490613c38565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839290600080516020614372833981519152908290a45050565b600061304c82611a53565b905061305a816000846131d4565b613065600083612844565b6001600160a01b038116600090815260056020526040812080546001929061308e908490613e64565b909155505060008281526004602052604080822080546001600160a01b0319169055518391906001600160a01b03841690600080516020614372833981519152908390a45050565b60006001600160a01b0384163b156131c957604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061311a903390899088908890600401614301565b6020604051808303816000875af1925050508015613155575060408051601f3d908101601f191682019092526131529181019061433e565b60015b6131af573d808015613183576040519150601f19603f3d011682016040523d82523d6000602084013e613188565b606091505b5080516131a75760405162461bcd60e51b815260040161097c906142af565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061210f565b506001949350505050565b6001600160a01b03831661322f5761322a81600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b613252565b816001600160a01b0316836001600160a01b03161461325257613252838261328c565b6001600160a01b03821661326957610aad81613329565b826001600160a01b0316826001600160a01b031614610aad57610aad82826133d8565b6000600161329984611ad7565b6132a39190613e64565b6000838152600960205260409020549091508082146132f6576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a5460009061333b90600190613e64565b6000838152600b6020526040812054600a805493945090928490811061336357613363614013565b9060005260206000200154905080600a838154811061338457613384614013565b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a8054806133bc576133bc61435b565b6001900381819060005260206000200160009055905550505050565b60006133e383611ad7565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b82805461342890613b01565b90600052602060002090601f01602090048101928261344a5760008555613490565b82601f1061346357805160ff1916838001178555613490565b82800160010185558215613490579182015b82811115613490578251825591602001919060010190613475565b5061349c9291506134a0565b5090565b5b8082111561349c57600081556001016134a1565b6001600160a01b0391909116815260200190565b6001600160e01b03198116811461182757600080fd5b6000602082840312156134f157600080fd5b81356134fc816134c9565b9392505050565b60005b8381101561351e578181015183820152602001613506565b8381111561208a5750506000910152565b60008151808452613547816020860160208601613503565b601f01601f19169290920160200192915050565b6020815260006134fc602083018461352f565b60006020828403121561358057600080fd5b5035919050565b6001600160a01b038116811461182757600080fd5b600080604083850312156135af57600080fd5b82356135ba81613587565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715613600576136006135c8565b60405290565b604051601f8201601f191681016001600160401b038111828210171561362e5761362e6135c8565b604052919050565b60006001600160401b0382111561364f5761364f6135c8565b50601f01601f191660200190565b600061367061366b84613636565b613606565b905082815283838301111561368457600080fd5b828260208301376000602084830101529392505050565b600082601f8301126136ac57600080fd5b6134fc8383356020850161365d565b803580151581146136cb57600080fd5b919050565b6000806000606084860312156136e557600080fd5b8335925060208401356001600160401b0381111561370257600080fd5b61370e8682870161369b565b92505061371d604085016136bb565b90509250925092565b6000806040838503121561373957600080fd5b823561374481613587565b915060208301356001600160401b0381111561375f57600080fd5b61376b8582860161369b565b9150509250929050565b60008060006060848603121561378a57600080fd5b83356001600160401b038111156137a057600080fd5b6137ac8682870161369b565b9660208601359650604090950135949350505050565b6000806000606084860312156137d757600080fd5b83356137e281613587565b925060208401356137f281613587565b929592945050506040919091013590565b60006020828403121561381557600080fd5b81356001600160401b0381111561382b57600080fd5b61210f8482850161369b565b6000806040838503121561384a57600080fd5b50508035926020909101359150565b6000806040838503121561386c57600080fd5b8235915060208301356001600160401b0381111561375f57600080fd5b60006020828403121561389b57600080fd5b81356134fc81613587565b600080600080600080600060e0888a0312156138c157600080fd5b87356001600160401b03808211156138d857600080fd5b6138e48b838c0161369b565b985060208a01359150808211156138fa57600080fd5b506139078a828b0161369b565b96505060408801359450606088013593506080880135925060a08801356005811061393157600080fd5b8092505060c0880135905092959891949750929550565b6000806040838503121561395b57600080fd5b823561396681613587565b9150613974602084016136bb565b90509250929050565b6000806000806080858703121561399357600080fd5b843561399e81613587565b935060208501356139ae81613587565b92506040850135915060608501356001600160401b038111156139d057600080fd5b8501601f810187136139e157600080fd5b6139f08782356020840161365d565b91505092959194509250565b600080600080600060a08688031215613a1457600080fd5b85356001600160401b0380821115613a2b57600080fd5b613a3789838a0161369b565b96506020880135915080821115613a4d57600080fd5b613a5989838a0161369b565b95506040880135915080821115613a6f57600080fd5b50613a7c8882890161369b565b9350506060860135613a8d81613587565b91506080860135613a9d81613587565b809150509295509295909350565b60008060408385031215613abe57600080fd5b8235613ac981613587565b91506020830135613ad981613587565b809150509250929050565b600060208284031215613af657600080fd5b81516134fc81613587565b600181811c90821680613b1557607f821691505b60208210811415613b3657634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526005908201526425a218189960d91b604082015260600190565b838152606060208201526000613b74606083018561352f565b90508215156040830152949350505050565b6001600160a01b038316815260406020820181905260009061210f9083018461352f565b60208082526005908201526412d10c0c4d60da1b604082015260600190565b60a081526000613bdc60a083018861352f565b60208301969096525060408101939093526001600160a01b03919091166060830152608090910152919050565b600060208284031215613c1b57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115613c4b57613c4b613c22565b500190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600082601f830112613cbc57600080fd5b8151613cca61366b82613636565b818152846020838601011115613cdf57600080fd5b61210f826020830160208701613503565b600060808284031215613d0257600080fd5b604051608081016001600160401b038082118383101715613d2557613d256135c8565b816040528293508451835260208501519150613d4082613587565b816020840152604085015160408401526060850151915080821115613d6457600080fd5b50613d7185828601613cab565b6060830152505092915050565b60008060408385031215613d9157600080fd5b82516001600160401b0380821115613da857600080fd5b613db486838701613cf0565b9350602091508185015181811115613dcb57600080fd5b8501601f81018713613ddc57600080fd5b805182811115613dee57613dee6135c8565b8060051b613dfd858201613606565b918252828101850191858101908a841115613e1757600080fd5b86850192505b83831015613e5357825186811115613e355760008081fd5b613e438c8983890101613cf0565b8352509186019190860190613e1d565b809750505050505050509250929050565b600082821015613e7657613e76613c22565b500390565b600082613e9857634e487b7160e01b600052601260045260246000fd5b500490565b600060608284031215613eaf57600080fd5b604051606081016001600160401b0381118282101715613ed157613ed16135c8565b604052825181526020830151613ee681613587565b60208201526040928301519281019290925250919050565b600060208284031215613f1057600080fd5b81516001600160401b0380821115613f2757600080fd5b9083019060a08286031215613f3b57600080fd5b613f436135de565b825182811115613f5257600080fd5b613f5e87828601613cab565b825250602083015160208201526040830151604082015260608301519150613f8582613587565b8160608201526080830151608082015280935050505092915050565b838152606060208201526000613fba606083018561352f565b8281036040840152835160a08252613fd560a083018261352f565b60208681015190840152604080870151908401526060808701516001600160a01b031690840152608095860151959092019490945295945050505050565b634e487b7160e01b600052603260045260246000fd5b848152608060208201526000614042608083018661352f565b6001600160a01b03949094166040830152506060015292915050565b6001600160a01b0389168152610100602082018190526000906140838382018b61352f565b90508281036040840152614097818a61352f565b9150508660608301528560808301528460a0830152600584106140ca57634e487b7160e01b600052602160045260246000fd5b60c082019390935260e001529695505050505050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b606081526000614144606083018661352f565b60208301949094525060400152919050565b8054600090600181811c908083168061417057607f831692505b602080841082141561419257634e487b7160e01b600052602260045260246000fd5b8180156141a657600181146141b7576141e4565b60ff198616895284890196506141e4565b60008881526020902060005b868110156141dc5781548b8201529085019083016141c3565b505084890196505b50505050505092915050565b600061210f6141ff8386614156565b84614156565b83815260606020820152600061421e606083018561352f565b905060018060a01b0383166040830152949350505050565b674b616c6569646f5f60c01b815260008251614259816008850160208701613503565b9190910160080192915050565b600060001982141561427a5761427a613c22565b5060010190565b6000806040838503121561429457600080fd5b825161429f81613587565b6020939093015192949293505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906143349083018461352f565b9695505050505050565b60006020828403121561435057600080fd5b81516134fc816134c9565b634e487b7160e01b600052603160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212207106d206c4e412918c2040cc9bc2a23f69b1f6009b8fbb7ef4ccf29d86e598c364736f6c634300080a0033",
  "libraries": {
    "Ad": "0x4a4274681C57B4eBc4B9AebEf1C292c650956E8F"
  },
  "devdoc": {
    "author": "Shumpei Koike - <shumpei.koike@bridges.inc>",
    "kind": "dev",
    "methods": {
      "acceptOffer(uint256,string)": {
        "details": "Accepts an offer by the Media.",
        "params": {
          "tokenId": "uint256 of the token ID",
          "tokenMetadata": "string of the NFT token metadata"
        }
      },
      "acceptProposal(uint256)": {
        "details": "Accepts the proposal.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "adId(string,uint256,uint256)": {
        "details": "Returns ID based on the space metadata, display start timestamp, and      display end timestamp. These three makes it the unique.",
        "params": {
          "displayEndTimestamp": "uint256 of the end timestamp for the display",
          "displayStartTimestamp": "uint256 of the start timestamp for the display",
          "spaceMetadata": "uint256 of the space metadata"
        }
      },
      "adPoolAddress()": {
        "details": "Gets the address of AdPool."
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balance()": {
        "details": "Returns the balacne deposited on the proxy contract."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "bid(uint256)": {
        "details": "Bids to participate in an auction.      It is defined as an English Auction.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "bidWithProposal(uint256,string)": {
        "details": "Bids to participate in an auction.      It is defined as an Open Bid.",
        "params": {
          "proposalMetadata": "string of the metadata hash",
          "tokenId": "uint256 of the token ID"
        }
      },
      "buy(uint256)": {
        "details": "Buys the token that is defined as the specific period on an ad space.      The price of the token is fixed.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "buyBasedOnTime(uint256)": {
        "details": "Buys the token that is defined as the specific period on an ad space.      The price is decreasing as time goes by, that is defined as an Dutch Auction.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "cancelOffer(uint256)": {
        "details": "Cancels an offer.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "deletePeriod(uint256)": {
        "details": "Deletes a period and its token.      If there is any users locking the fund for the sale, the amount would be transfered      to the user when deleting the period.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "denyProposal(uint256,string,bool)": {
        "details": "Denies the submitted proposal, mentioning what is the problem.",
        "params": {
          "offensive": "bool if the content would offend somebody",
          "reason": "string of the reason why it is rejected",
          "tokenId": "uint256 of the token ID"
        }
      },
      "englishAuctionAddress()": {
        "details": "Gets the address of EnglishAuction."
      },
      "eventEmitterAddress()": {
        "details": "Gets the address of EventEmitter."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "initialize(string,string,string,address,address)": {
        "details": "Initialize the instance.",
        "params": {
          "baseURI": "string of the base URI",
          "mediaEOA": "address of the media owner",
          "nameRegistry": "address of NameRegistry",
          "title": "string of the title of the instance",
          "tokenMetadata": "string of the token metadata"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mediaFactoryAddress()": {
        "details": "Gets the address of MediaFactory."
      },
      "mediaRegistryAddress()": {
        "details": "Gets the address of MediaRegistry."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "nameRegistryAddress()": {
        "details": "Gets the address of NameRegistry"
      },
      "newPeriod(string,string,uint256,uint256,uint256,uint8,uint256)": {
        "details": "Create a new period for a space. This function requires some params      to decide which kinds of pricing way and how much price to get started.",
        "params": {
          "displayEndTimestamp": "uint256 of the end timestamp for the display",
          "displayStartTimestamp": "uint256 of the start timestamp for the display",
          "minPrice": "uint256 of the minimum price to sell it out",
          "pricing": "uint256 of the pricing way",
          "saleEndTimestamp": "uint256 of the end timestamp for the sale",
          "spaceMetadata": "string of the space metadata",
          "tokenMetadata": "string of the token metadata"
        }
      },
      "newSpace(string)": {
        "details": "Creates a new space for the media account.",
        "params": {
          "spaceMetadata": "string of the space metadata"
        }
      },
      "offerBidAddress()": {
        "details": "Gets the address of OfferBid."
      },
      "offerPeriod(string,uint256,uint256)": {
        "details": "Offers to buy a period that the sender requests.",
        "params": {
          "displayEndTimestamp": "uint256 of the end timestamp for the display",
          "displayStartTimestamp": "uint256 of the start timestamp for the display",
          "spaceMetadata": "string of the space metadata"
        }
      },
      "openBidAddress()": {
        "details": "Gets the address of OpenBid."
      },
      "owner()": {
        "details": "Gets the owner address."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "proposalReviewAddress()": {
        "details": "Gets the address of ProposalReview."
      },
      "propose(uint256,string)": {
        "details": "Proposes the metadata to the token you bought.      Users can propose many times as long as it is accepted.",
        "params": {
          "metadata": "string of the proposal metadata",
          "tokenId": "uint256 of the token ID"
        }
      },
      "pushToSuccessfulBidder(uint256)": {
        "details": "Receives the token you bidded if you are the successful bidder.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "receiveToken(uint256)": {
        "details": "Receives the token you bidded if you are the successful bidder.",
        "params": {
          "tokenId": "uint256 of the token ID"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Overrides transferFrom to emit an event from the common emitter."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "selectProposal(uint256,uint256)": {
        "details": "Selects the best proposal bidded with.",
        "params": {
          "index": "uint256 of the index number",
          "tokenId": "uint256 of the token ID"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Overrides transferFrom to emit an event from the common emitter."
      },
      "updateMedia(address,string)": {
        "details": "Updates the media EOA and the metadata.",
        "params": {
          "newMediaEOA": "address of a new EOA",
          "newMetadata": "string of a new metadata"
        }
      },
      "vaultAddress()": {
        "details": "Gets the address of Vault."
      },
      "withdraw()": {
        "details": "Withdraws the fund deposited to the proxy contract."
      },
      "withdrawalAmount()": {
        "details": "Returns the withdrawal amount."
      }
    },
    "title": "MediaFacade - A root contract that calls the processes of each media.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2206,
        "contract": "contracts/MediaFacade.sol:MediaFacade",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2208,
        "contract": "contracts/MediaFacade.sol:MediaFacade",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2210,
        "contract": "contracts/MediaFacade.sol:MediaFacade",
        "label": "_baseURI",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2214,
        "contract": "contracts/MediaFacade.sol:MediaFacade",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2218,
        "contract": "contracts/MediaFacade.sol:MediaFacade",
        "label": "_owners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2222,
        "contract": "contracts/MediaFacade.sol:MediaFacade",
        "label": "_balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2226,
        "contract": "contracts/MediaFacade.sol:MediaFacade",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2232,
        "contract": "contracts/MediaFacade.sol:MediaFacade",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2238,
        "contract": "contracts/MediaFacade.sol:MediaFacade",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2242,
        "contract": "contracts/MediaFacade.sol:MediaFacade",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2245,
        "contract": "contracts/MediaFacade.sol:MediaFacade",
        "label": "_allTokens",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2249,
        "contract": "contracts/MediaFacade.sol:MediaFacade",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 114,
        "contract": "contracts/MediaFacade.sol:MediaFacade",
        "label": "_status",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1886,
        "contract": "contracts/MediaFacade.sol:MediaFacade",
        "label": "_nameRegistry",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(INameRegistry)3992"
      },
      {
        "astId": 3250,
        "contract": "contracts/MediaFacade.sol:MediaFacade",
        "label": "_processingTotal",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(INameRegistry)3992": {
        "encoding": "inplace",
        "label": "contract INameRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}