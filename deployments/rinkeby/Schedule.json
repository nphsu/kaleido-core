{
  "address": "0x6bB6902720590b4060AF926eD2c7bD8AE8069CB1",
  "abi": [],
  "transactionHash": "0xca127b1d628b4355d4e131474e5baad7762378b14d12f67d08d182f6c2ef2a62",
  "receipt": {
    "to": null,
    "from": "0x9ADd84a2A0d708f46009de2b29707bfB3414ff25",
    "contractAddress": "0x6bB6902720590b4060AF926eD2c7bD8AE8069CB1",
    "transactionIndex": 0,
    "gasUsed": "72217",
    "logsBloom": "0x
    "blockHash": "0x371c21884f1bae2797e79138a3a00d749512b77dc2daed4fb1c52a08831f07e3",
    "transactionHash": "0xca127b1d628b4355d4e131474e5baad7762378b14d12f67d08d182f6c2ef2a62",
    "logs": [],
    "blockNumber": 9755486,
    "cumulativeGasUsed": "72217",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c223bd9c030b84fabf96ddb6a85aba33",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/Schedule.sol\":\"Schedule\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/libraries/Schedule.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nlibrary Schedule {\\n\\tfunction _isOverlapped(\\n\\t\\tuint256 newFromTimestamp,\\n\\t\\tuint256 newToTimestamp,\\n\\t\\tuint256 currentFromTimestamp,\\n\\t\\tuint256 currentToTimestamp\\n\\t) internal pure returns (bool) {\\n\\t\\treturn\\n\\t\\t\\t!(_isPast(newToTimestamp, currentFromTimestamp) ||\\n\\t\\t\\t\\t_isFuture(newFromTimestamp, currentToTimestamp));\\n\\t}\\n\\n\\tfunction _isPast(uint256 newToTimestamp, uint256 currentFromTimestamp)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn newToTimestamp < currentFromTimestamp;\\n\\t}\\n\\n\\tfunction _isFuture(uint256 newFromTimestamp, uint256 currentToTimestamp)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn currentToTimestamp < newFromTimestamp;\\n\\t}\\n}\\n\",\"keccak256\":\"0x0073afdac9f47643e4a0db2b3600f5274dfc1e8c511ca20e44965c7ce67ec881\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201a333c039b50f95e4354bb3edcbb8c09935703a674504462911540bf30afcfd264736f6c63430008090033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201a333c039b50f95e4354bb3edcbb8c09935703a674504462911540bf30afcfd264736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}