{
  "address": "0x41da9C7dF05c7E89463510f59F4B30348f7021D5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nameRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Received",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "adPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributionRightAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nameRegistryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "postOwnerPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "receivePooledAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reservedRightAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x33be1d0b5fade19a233e2e1a99c163a23ac8f80417b39d5c02b7c5b64e37bf24",
  "receipt": {
    "to": null,
    "from": "0x50414Ac6431279824df9968855181474c919a94B",
    "contractAddress": "0x41da9C7dF05c7E89463510f59F4B30348f7021D5",
    "transactionIndex": 0,
    "gasUsed": "395194",
    "logsBloom": "0x
    "blockHash": "0x9618d4290625e74098b9ee67ffd0fe5c4b3e565ec9c7d86733fb0b16c43f6d52",
    "transactionHash": "0x33be1d0b5fade19a233e2e1a99c163a23ac8f80417b39d5c02b7c5b64e37bf24",
    "logs": [],
    "blockNumber": 9248417,
    "cumulativeGasUsed": "395194",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5EBA2dD6C26Dae8e733D55e4DC6D5B6EEBFa8F20"
  ],
  "solcInputHash": "19216fe1aa042e94a1a5c454afe04ebc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nameRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionRightAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postOwnerPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"receivePooledAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservedRightAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Shumpei Koike - <shumpei.koike@bridges.inc>\",\"kind\":\"dev\",\"methods\":{\"adPoolAddress()\":{\"details\":\"Gets the address of AdPool.\"},\"distributionRightAddress()\":{\"details\":\"Gets the address of DistributionRight.\"},\"nameRegistryAddress()\":{\"details\":\"Gets the address of NameRegistry\"},\"owner()\":{\"details\":\"Gets the owner address.\"},\"reservedRightAddress()\":{\"details\":\"Gets the address of ReservedRight.\"},\"vaultAddress()\":{\"details\":\"Gets the address of Vault.\"}},\"title\":\"AdPool - pools the assets before distribution.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/AdPool.sol\":\"AdPool\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/accessors/NameAccessor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.6;\\n\\nimport \\\"./NameRegistry.sol\\\";\\n\\n/// @title NameAccessor - manages the endpoints.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ncontract NameAccessor {\\n\\tNameRegistry internal _nameRegistry;\\n\\n\\t/// @dev Sets the address of NameRegistry.\\n\\t/// @param nameRegistry address of the NameRegistry\\n\\tconstructor(address nameRegistry) {\\n\\t\\t_nameRegistry = NameRegistry(nameRegistry);\\n\\t}\\n\\n\\t/// @dev Prevents calling a function from anyone except the accepted contract.\\n\\tmodifier onlyAllowedContract() {\\n\\t\\trequire(_nameRegistry.allowedContracts(msg.sender), \\\"AR201\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Throws if called by any account other than the owner.\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(owner() == msg.sender, \\\"AR202\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev Gets the address of NameRegistry\\n\\tfunction nameRegistryAddress() public view returns (address) {\\n\\t\\treturn address(_nameRegistry);\\n\\t}\\n\\n\\t/// @dev Gets the address of DistributionRight.\\n\\tfunction distributionRightAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"DistributionRight\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of ReservedRight.\\n\\tfunction reservedRightAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"ReservedRight\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of Vault.\\n\\tfunction vaultAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"Vault\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the address of AdPool.\\n\\tfunction adPoolAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"AdPool\\\")));\\n\\t}\\n\\n\\tfunction postOwnerPoolAddress() public view returns (address) {\\n\\t\\treturn _nameRegistry.get(keccak256(abi.encodePacked(\\\"PostOwnerPool\\\")));\\n\\t}\\n\\n\\t/// @dev Gets the owner address.\\n\\tfunction owner() public view returns (address) {\\n\\t\\treturn _nameRegistry.owner();\\n\\t}\\n}\\n\",\"keccak256\":\"0x42b5bd74aa079389a49c37b469cdeb70156a988652a2695018bf937582aa952a\",\"license\":\"UNLICENSED\"},\"contracts/accessors/NameRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.6;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title NameRegistry - saves a set of addresses.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ncontract NameRegistry is Ownable {\\n\\tusing Address for address;\\n\\n\\tmapping(address => bool) public allowedContracts;\\n\\tmapping(bytes32 => address) private _addressStorage;\\n\\n\\tconstructor() Ownable() {}\\n\\n\\t/// @dev Sets the address associated with the key name.\\n\\t///      If the address is the contract, not an EOA, it is\\n\\t///      saved as the allowed contract list.\\n\\t/// @param key bytes32 of the key\\n\\t/// @param value address of the value\\n\\tfunction set(bytes32 key, address value) public onlyOwner {\\n\\t\\t_addressStorage[key] = value;\\n\\t\\tif (value.isContract()) {\\n\\t\\t\\tallowedContracts[value] = true;\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev Gets the address associated with the key name.\\n\\t/// @param key bytes32 of the key\\n\\tfunction get(bytes32 key) public view returns (address) {\\n\\t\\treturn _addressStorage[key];\\n\\t}\\n}\\n\",\"keccak256\":\"0x722d516b65ac61532eeb206e7f0dc0c09c608f17e75eada46807d2d98a0bba15\",\"license\":\"UNLICENSED\"},\"contracts/accessors/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n\\taddress internal _owner;\\n\\n\\tevent OwnershipTransferred(\\n\\t\\taddress indexed previousOwner,\\n\\t\\taddress indexed newOwner\\n\\t);\\n\\n\\t/**\\n\\t * @dev Initializes the contract setting the deployer as the initial owner.\\n\\t */\\n\\tconstructor() {\\n\\t\\t_setOwner(_msgSender());\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address of the current owner.\\n\\t */\\n\\tfunction owner() public view virtual returns (address) {\\n\\t\\treturn _owner;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Throws if called by any account other than the owner.\\n\\t */\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Leaves the contract without owner. It will not be possible to call\\n\\t * `onlyOwner` functions anymore. Can only be called by the current owner.\\n\\t *\\n\\t * NOTE: Renouncing ownership will leave the contract without an owner,\\n\\t * thereby removing any functionality that is only available to the owner.\\n\\t */\\n\\tfunction renounceOwnership() public virtual onlyOwner {\\n\\t\\t_setOwner(address(0));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n\\t * Can only be called by the current owner.\\n\\t */\\n\\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\\n\\t\\trequire(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n\\t\\t_setOwner(newOwner);\\n\\t}\\n\\n\\tfunction _setOwner(address newOwner) private {\\n\\t\\taddress oldOwner = _owner;\\n\\t\\t_owner = newOwner;\\n\\t\\temit OwnershipTransferred(oldOwner, newOwner);\\n\\t}\\n}\\n\",\"keccak256\":\"0xe2505d2c93a1f60b3b74357557c24bc6ec10d36870165ff8454d04adf5e368cf\",\"license\":\"MIT\"},\"contracts/base/AdPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.6;\\n\\nimport \\\"../accessors/NameAccessor.sol\\\";\\nimport \\\"../common/EtherPaymentFallback.sol\\\";\\n\\n/// @title AdPool - pools the assets before distribution.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ncontract AdPool is EtherPaymentFallback, NameAccessor {\\n\\tconstructor(address nameRegistry) NameAccessor(nameRegistry) {}\\n\\n\\tfunction receivePooledAmount(address sender, uint256 amount)\\n\\t\\tpublic\\n\\t\\tonlyAllowedContract\\n\\t{\\n\\t\\tpayable(sender).transfer(amount);\\n\\t}\\n}\\n\",\"keccak256\":\"0x644d55e3d717ea5ce68b5b275d5d8d3b05c484753499c010ce5e96b23bd03fca\",\"license\":\"UNLICENSED\"},\"contracts/common/EtherPaymentFallback.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.6;\\n\\n/// @title EtherPaymentFallback - A contract that has a fallback to accept ether payments.\\n/// @author Shumpei Koike - <shumpei.koike@bridges.inc>\\ncontract EtherPaymentFallback {\\n\\tevent Received(address, uint256);\\n\\n\\t/// @dev Fallback function accepts Ether transactions.\\n\\treceive() external payable {\\n\\t\\temit Received(msg.sender, msg.value);\\n\\t}\\n}\\n\",\"keccak256\":\"0xba482ac0c951246d9d2ec283c87b59d2a61b2fb05b9bb1b242415de5802ebcbf\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161065c38038061065c83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6105c9806100936000396000f3fe60806040526004361061007f5760003560e01c8063aa90b35f1161004e578063aa90b35f14610138578063ac6919a51461015a578063c9cd71b51461016f578063ef95e90f1461018457600080fd5b806327b7a2f5146100c357806329a594b5146100f9578063430bf08a1461010e5780638da5cb5b1461012357600080fd5b366100be57604080513381523460208201527f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874910160405180910390a1005b600080fd5b3480156100cf57600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b34801561010557600080fd5b506100dd610199565b34801561011a57600080fd5b506100dd610265565b34801561012f57600080fd5b506100dd6102ac565b34801561014457600080fd5b5061015861015336600461052d565b6102fb565b005b34801561016657600080fd5b506100dd610434565b34801561017b57600080fd5b506100dd61047b565b34801561019057600080fd5b506100dd6104c2565b600080546040517f526573657276656452696768740000000000000000000000000000000000000060208201526001600160a01b0390911690638eaa6ac090602d015b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161021091815260200190565b60206040518083038186803b15801561022857600080fd5b505afa15801561023c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102609190610509565b905090565b600080546040517f5661756c7400000000000000000000000000000000000000000000000000000060208201526001600160a01b0390911690638eaa6ac0906025016101dc565b60008060009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561022857600080fd5b6000546040517f51e0e26b0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03909116906351e0e26b9060240160206040518083038186803b15801561035757600080fd5b505afa15801561036b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038f9190610559565b6103f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f4152323031000000000000000000000000000000000000000000000000000000604482015260640160405180910390fd5b6040516001600160a01b0383169082156108fc029083906000818181858888f1935050505015801561042f573d6000803e3d6000fd5b505050565b600080546040517f446973747269627574696f6e526967687400000000000000000000000000000060208201526001600160a01b0390911690638eaa6ac0906031016101dc565b600080546040517f4164506f6f6c000000000000000000000000000000000000000000000000000060208201526001600160a01b0390911690638eaa6ac0906026016101dc565b600080546040517f506f73744f776e6572506f6f6c0000000000000000000000000000000000000060208201526001600160a01b0390911690638eaa6ac090602d016101dc565b60006020828403121561051b57600080fd5b81516105268161057b565b9392505050565b6000806040838503121561054057600080fd5b823561054b8161057b565b946020939093013593505050565b60006020828403121561056b57600080fd5b8151801515811461052657600080fd5b6001600160a01b038116811461059057600080fd5b5056fea264697066735822122046e2d8c0662aa9952fd3d048abed56058119a1bec16868d64d74a4e64435779164736f6c63430008060033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c8063aa90b35f1161004e578063aa90b35f14610138578063ac6919a51461015a578063c9cd71b51461016f578063ef95e90f1461018457600080fd5b806327b7a2f5146100c357806329a594b5146100f9578063430bf08a1461010e5780638da5cb5b1461012357600080fd5b366100be57604080513381523460208201527f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874910160405180910390a1005b600080fd5b3480156100cf57600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b34801561010557600080fd5b506100dd610199565b34801561011a57600080fd5b506100dd610265565b34801561012f57600080fd5b506100dd6102ac565b34801561014457600080fd5b5061015861015336600461052d565b6102fb565b005b34801561016657600080fd5b506100dd610434565b34801561017b57600080fd5b506100dd61047b565b34801561019057600080fd5b506100dd6104c2565b600080546040517f526573657276656452696768740000000000000000000000000000000000000060208201526001600160a01b0390911690638eaa6ac090602d015b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161021091815260200190565b60206040518083038186803b15801561022857600080fd5b505afa15801561023c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102609190610509565b905090565b600080546040517f5661756c7400000000000000000000000000000000000000000000000000000060208201526001600160a01b0390911690638eaa6ac0906025016101dc565b60008060009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561022857600080fd5b6000546040517f51e0e26b0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03909116906351e0e26b9060240160206040518083038186803b15801561035757600080fd5b505afa15801561036b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038f9190610559565b6103f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f4152323031000000000000000000000000000000000000000000000000000000604482015260640160405180910390fd5b6040516001600160a01b0383169082156108fc029083906000818181858888f1935050505015801561042f573d6000803e3d6000fd5b505050565b600080546040517f446973747269627574696f6e526967687400000000000000000000000000000060208201526001600160a01b0390911690638eaa6ac0906031016101dc565b600080546040517f4164506f6f6c000000000000000000000000000000000000000000000000000060208201526001600160a01b0390911690638eaa6ac0906026016101dc565b600080546040517f506f73744f776e6572506f6f6c0000000000000000000000000000000000000060208201526001600160a01b0390911690638eaa6ac090602d016101dc565b60006020828403121561051b57600080fd5b81516105268161057b565b9392505050565b6000806040838503121561054057600080fd5b823561054b8161057b565b946020939093013593505050565b60006020828403121561056b57600080fd5b8151801515811461052657600080fd5b6001600160a01b038116811461059057600080fd5b5056fea264697066735822122046e2d8c0662aa9952fd3d048abed56058119a1bec16868d64d74a4e64435779164736f6c63430008060033",
  "devdoc": {
    "author": "Shumpei Koike - <shumpei.koike@bridges.inc>",
    "kind": "dev",
    "methods": {
      "adPoolAddress()": {
        "details": "Gets the address of AdPool."
      },
      "distributionRightAddress()": {
        "details": "Gets the address of DistributionRight."
      },
      "nameRegistryAddress()": {
        "details": "Gets the address of NameRegistry"
      },
      "owner()": {
        "details": "Gets the owner address."
      },
      "reservedRightAddress()": {
        "details": "Gets the address of ReservedRight."
      },
      "vaultAddress()": {
        "details": "Gets the address of Vault."
      }
    },
    "title": "AdPool - pools the assets before distribution.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1643,
        "contract": "contracts/base/AdPool.sol:AdPool",
        "label": "_nameRegistry",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(NameRegistry)1858"
      }
    ],
    "types": {
      "t_contract(NameRegistry)1858": {
        "encoding": "inplace",
        "label": "contract NameRegistry",
        "numberOfBytes": "20"
      }
    }
  }
}